// –§–∞–π–ª: script.js
document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    const tg = window.Telegram.WebApp;
    tg.ready();
    tg.expand();

    // --- –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã DOM ---
    const essenceCountElement = document.getElementById('essence-count');
    const essencePerSecondElement = document.getElementById('essence-per-second');
    const gemCountElement = document.getElementById('gem-count');
    const cauldronElement = document.getElementById('cauldron');
    const clickFeedbackContainer = document.getElementById('click-feedback-container');
    const openUpgradesBtn = document.getElementById('open-upgrades-btn');
    const closeUpgradesBtn = document.getElementById('close-upgrades-btn');
    const upgradesPanel = document.getElementById('upgrades-panel');
    const upgradesListElement = document.getElementById('upgrades-list');
    const userGreetingElement = document.getElementById('user-greeting');
    const inviteFriendBtn = document.getElementById('invite-friend-btn');
    const bubblesContainer = document.getElementById('bubbles-container');
    const perSecondDisplayDiv = document.getElementById('per-second-display');
    const settingsBtn = document.getElementById('settings-btn');
    const settingsPanel = document.getElementById('settings-panel');
    const closeSettingsBtn = document.getElementById('close-settings-btn');
    const languageOptionsContainer = settingsPanel ? settingsPanel.querySelector('.language-options') : null;
    const shopBtn = document.getElementById('shop-btn');
    const shopPanel = document.getElementById('shop-panel');
    const closeShopBtn = document.getElementById('close-shop-btn');
    const skinsListElement = document.getElementById('skins-list');
    const shopGemCountElement = document.getElementById('shop-gem-count');
    // --- –ù–æ–≤—ã–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∑–≤—É–∫–∞ ---
    const soundToggleCheckbox = document.getElementById('sound-toggle-checkbox');
    const volumeSlider = document.getElementById('volume-slider');
    const volumeValueDisplay = document.getElementById('volume-value-display');


    // --- –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ) ---
    let essence = 0;
    let essencePerClick = 1;
    let essencePerSecond = 0;
    let gems = 0;
    let ownedSkins = ['default']; // –ò–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –≤–ª–∞–¥–µ–µ—Ç —Å–∫–∏–Ω–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let activeSkinId = 'default'; // –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let isSoundEnabled = true;  // –ó–≤—É–∫ –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let soundVolume = 0.5;    // –ì—Ä–æ–º–∫–æ—Å—Ç—å 50% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1)
    const GEM_AWARD_CHANCE = 0.03;
    const GEMS_PER_AWARD = 1;
    let currentLanguage = 'ru'; // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let userName = tg.initDataUnsafe?.user?.first_name || null;

    // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞ ---
    let lastClickTime = 0;
    const MIN_CLICK_INTERVAL = 67; // ~15 clicks per second max theoretical
    const MAX_WARNINGS = 3;
    let warningCount = 0;
    let isBlocked = false;

    // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∂–∏–¥–∫–æ—Å—Ç–∏ ---
    let visualLiquidLevel = 10;
    const LIQUID_MIN_LEVEL = 10;
    const LIQUID_MAX_LEVEL = 95;
    const LIQUID_INCREASE_PER_CLICK = 1.0;
    const LIQUID_DECAY_RATE = 0.15; // Decay per interval when idle
    const LIQUID_UPDATE_INTERVAL = 100; // ms
    const IDLE_TIMEOUT = 500; // ms of inactivity before decay starts
    let lastInteractionTime = 0;

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–∞ ---
    let clickSound = null;
    const soundFilePath = 'click.mp3'; // <- –ü—É—Ç—å –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–∞–ø–æ–∫
    try {
        console.log(`[Sound] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤—É–∫–∞: ${soundFilePath}`);
        clickSound = new Audio(soundFilePath);
        clickSound.preload = 'auto';
        clickSound.load();
        clickSound.volume = 0.01; // –¢–∏—Ö–æ –¥–ª—è —Ç–µ—Å—Ç–∞
        clickSound.play().then(() => {
            console.log("[Sound] –ó–≤—É–∫ –∫–ª–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –º–æ–∂–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è.");
            clickSound.pause();
            clickSound.currentTime = 0;
        }).catch(error => {
            if (error.name === 'NotAllowedError') {
                console.warn("[Sound] –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –±—Ä–∞—É–∑–µ—Ä–æ–º –¥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            } else if (error.name === 'NotSupportedError'){
                console.error(`[Sound] –§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ (${soundFilePath}) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º.`);
                isSoundEnabled = false;
            } else {
                console.error(`[Sound] –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫ (${error.name}):`, error.message);
            }
        });
    } catch (error) {
        console.error("[Sound] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Audio –æ–±—ä–µ–∫—Ç–∞:", error);
        isSoundEnabled = false;
    }

    // --- –û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ ---
    const translations = { /* ... –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã ... */
        greetingBase: { ru: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", en: "Laboratory" },
        perSec: { ru: "–≤ —Å–µ–∫", en: "/ sec" },
        upgradesButton: { ru: "–£–ª—É—á—à–µ–Ω–∏—è", en: "Upgrades" },
        inviteFriendsButton: { ru: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", en: "Invite Friends" },
        upgradesTitle: { ru: "–£–ª—É—á—à–µ–Ω–∏—è", en: "Upgrades" },
        settingsTitle: { ru: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", en: "Settings" },
        languageTitle: { ru: "–Ø–∑—ã–∫", en: "Language" },
        buyButton: { ru: "–ö—É–ø–∏—Ç—å", en: "Buy" },
        requirementPrefix: { ru: "–ù—É–∂–Ω–æ", en: "Need" },
        requirementInfoPrefix: { ru: "–¢—Ä–µ–±—É–µ—Ç—Å—è", en: "Requires" },
        tooFastClick: { ru: "–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!", en: "Clicking too fast!" },
        autoclickerBlocked: { ru: "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –ö–ª–∏–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", en: "Autoclicker detected! Clicking blocked." },
        actionBlocked: { ru: "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.", en: "Action blocked." },
        needMoreEssence: { ru: "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —ç—Å—Å–µ–Ω—Ü–∏–∏!", en: "Need more essence!" },
        invalidCostError: { ru: "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è!", en: "Error: Invalid upgrade cost!" },
        notEnoughEssence: { ru: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Å—Å–µ–Ω—Ü–∏–∏!", en: "Not enough essence!" },
        loadErrorStartNew: { ru: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.", en: "Failed to load progress. Starting new game." },
        loadError: { ru: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!", en: "Error loading progress!" },
        readError: { ru: "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", en: "Error reading save data!" },
        saveCritError: { ru: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", en: "Critical save error!" },
        welcomeReferral: { ru: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –±–æ–Ω—É—Å.", en: "Welcome! Your inviter gets a bonus." },
        referralRegErrorBot: { ru: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–æ—à–∏–±–∫–∞ –±–æ—Ç–∞).", en: "Could not register invite (bot error)." },
        referralRegErrorFunc: { ru: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞).", en: "Could not register invite (feature unavailable)." },
        bonusCheckError: { ru: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–Ω—É—Å–∞!", en: "Bonus check error!" },
        bonusAlreadyClaimed: { ru: "–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω.", en: "Bonus already claimed." },
        bonusReasonFriend: { ru: "–∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!", en: "for invited friend!" },
        bonusAddError: { ru: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!", en: "Bonus add error!" },
        inviteLinkError: { ru: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", en: "Failed to create invite link." },
        shareText: { ru: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –º–æ–µ–π –ê–ª—Ö–∏–º–∏—á–µ—Å–∫–æ–π –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –≤ Telegram! üß™‚öóÔ∏è –ö–ª–∏–∫–∞–π –∏ —Å–æ–∑–¥–∞–≤–∞–π —ç–ª–∏–∫—Å–∏—Ä—ã!', en: 'Join my Alchemy Lab in Telegram! üß™‚öóÔ∏è Click and create elixirs!' },
        shopTitle: { ru: "–ú–∞–≥–∞–∑–∏–Ω", en: "Shop" },
        yourGems: { ru: "–í–∞—à–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã:", en: "Your Gems:" },
        selectButton: { ru: "–í—ã–±—Ä–∞—Ç—å", en: "Select" },
        selectedButton: { ru: "–í—ã–±—Ä–∞–Ω–æ", en: "Selected" },
        notEnoughGems: { ru: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!", en: "Not enough gems!" },
        skinPurchaseSuccess: { ru: "–°–∫–∏–Ω –∫—É–ø–ª–µ–Ω!", en: "Skin purchased!" },
        skinSelected: { ru: "–°–∫–∏–Ω –≤—ã–±—Ä–∞–Ω!", en: "Skin selected!" },
        skin_default_name: { ru: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–ª–±–∞", en: "Standard Flask" },
        skin_gold_name: { ru: "–ó–æ–ª–æ—Ç–∞—è –∫–æ–ª–±–∞", en: "Golden Flask" },
        skin_crystal_name: { ru: "–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —Å–æ—Å—É–¥", en: "Crystal Vial" },
        skin_obsidian_name: { ru: "–û–±—Å–∏–¥–∏–∞–Ω–æ–≤–∞—è —Ä–µ—Ç–æ—Ä—Ç–∞", en: "Obsidian Retort" },
        soundTitle: { ru: "–ó–≤—É–∫", en: "Sound" },
        soundEnableLabel: { ru: "–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫:", en: "Enable Sound:" },
        volumeLabel: { ru: "–ì—Ä–æ–º–∫–æ—Å—Ç—å:", en: "Volume:" },
        upgrade_click1_name: { ru: "–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", en: "Improved Recipe" },
        upgrade_click1_desc: { ru: "+1 –∫ –∫–ª–∏–∫—É", en: "+1 per click" },
        upgrade_auto1_name: { ru: "–ì–æ–º—É–Ω–∫—É–ª-–ü–æ–º–æ—â–Ω–∏–∫", en: "Homunculus Helper" },
        upgrade_auto1_desc: { ru: "+1 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+1 per second" },
        upgrade_click2_name: { ru: "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—É–ø–∫–∞", en: "Enchanted Mortar" },
        upgrade_click2_desc: { ru: "+5 –∫ –∫–ª–∏–∫—É", en: "+5 per click" },
        upgrade_auto2_name: { ru: "–ü—É–∑—ã—Ä—è—â–∏–π—Å—è –∫–æ—Ç–µ–ª", en: "Bubbling Cauldron" },
        upgrade_auto2_desc: { ru: "+4 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+4 per second" },
        upgrade_click3_name: { ru: "–ê–ª–µ–º–±–∏–∫ –ú–∞—Å—Ç–µ—Ä–∞", en: "Master's Alembic" },
        upgrade_click3_desc: { ru: "+25 –∫ –∫–ª–∏–∫—É", en: "+25 per click" },
        upgrade_auto3_name: { ru: "–ü—Ä–∏–∑–≤–∞–Ω–Ω—ã–π –ò—Ñ—Ä–∏—Ç", en: "Summoned Ifrit" },
        upgrade_auto3_desc: { ru: "+20 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+20 per second" },
        upgrade_auto4_name: { ru: "–°–∞–¥ –ê–ª—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –†–∞—Å—Ç–µ–Ω–∏–π", en: "Garden of Alchemical Plants" },
        upgrade_auto4_desc: { ru: "+50 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+50 per second" },
        upgrade_click4_name: { ru: "–°–∏–ª–∞ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–≥–æ –ö–∞–º–Ω—è (–æ—Å–∫–æ–ª–æ–∫)", en: "Power of the Philosopher's Stone (Shard)" },
        upgrade_click4_desc: { ru: "+150 –∫ –∫–ª–∏–∫—É", en: "+150 per click" },
        upgrade_auto5_name: { ru: "–≠—Ñ–∏—Ä–Ω—ã–π –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä", en: "Aether Concentrator" },
        upgrade_auto5_desc: { ru: "+250 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+250 per second" },
        upgrade_auto6_name: { ru: "–ü–æ—Ä—Ç–∞–ª –≤ –º–∏—Ä –≠—Å—Å–µ–Ω—Ü–∏–∏", en: "Portal to the Essence Realm" },
        upgrade_auto6_desc: { ru: "+1000 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+1000 per second" },
        upgrade_click5_name: { ru: "–ü—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ –¢–≤–æ—Ä—Ü–∞", en: "Creator's Touch" },
        upgrade_click5_desc: { ru: "+1000 –∫ –∫–ª–∏–∫—É", en: "+1000 per click" },
        upgrade_auto7_name: { ru: "–ü–æ—Ç–æ–∫ –ß–∏—Å—Ç–æ–π –ú–∞–≥–∏–∏", en: "Flow of Pure Magic" },
        upgrade_auto7_desc: { ru: "+5000 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+5000 per second" },
    };

    // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π ---
    const upgrades = [ /* ... –∫–∞–∫ –±—ã–ª–∏ —Ä–∞–Ω—å—à–µ ... */
        { id: 'click1', nameKey: 'upgrade_click1_name', descKey: 'upgrade_click1_desc', baseCost: 15, costMultiplier: 1.4, type: 'click', value: 1, currentLevel: 0, requiredEssence: 0 },
        { id: 'auto1', nameKey: 'upgrade_auto1_name', descKey: 'upgrade_auto1_desc', baseCost: 60, costMultiplier: 1.6, type: 'auto', value: 1, currentLevel: 0, requiredEssence: 0 },
        { id: 'click2', nameKey: 'upgrade_click2_name', descKey: 'upgrade_click2_desc', baseCost: 300, costMultiplier: 1.5, type: 'click', value: 5, currentLevel: 0, requiredEssence: 500 },
        { id: 'auto2', nameKey: 'upgrade_auto2_name', descKey: 'upgrade_auto2_desc', baseCost: 750, costMultiplier: 1.7, type: 'auto', value: 4, currentLevel: 0, requiredEssence: 700 },
        { id: 'click3', nameKey: 'upgrade_click3_name', descKey: 'upgrade_click3_desc', baseCost: 5000, costMultiplier: 1.6, type: 'click', value: 25, currentLevel: 0, requiredEssence: 10000 },
        { id: 'auto3', nameKey: 'upgrade_auto3_name', descKey: 'upgrade_auto3_desc', baseCost: 12000, costMultiplier: 1.8, type: 'auto', value: 20, currentLevel: 0, requiredEssence: 15000 },
        { id: 'auto4', nameKey: 'upgrade_auto4_name', descKey: 'upgrade_auto4_desc', baseCost: 30000, costMultiplier: 1.9, type: 'auto', value: 50, currentLevel: 0, requiredEssence: 40000 },
        { id: 'click4', nameKey: 'upgrade_click4_name', descKey: 'upgrade_click4_desc', baseCost: 250000, costMultiplier: 1.7, type: 'click', value: 150, currentLevel: 0, requiredEssence: 500000 },
        { id: 'auto5', nameKey: 'upgrade_auto5_name', descKey: 'upgrade_auto5_desc', baseCost: 1000000, costMultiplier: 2.0, type: 'auto', value: 250, currentLevel: 0, requiredEssence: 1200000 },
        { id: 'auto6', nameKey: 'upgrade_auto6_name', descKey: 'upgrade_auto6_desc', baseCost: 5000000, costMultiplier: 2.2, type: 'auto', value: 1000, currentLevel: 0, requiredEssence: 6000000 },
        { id: 'click5', nameKey: 'upgrade_click5_name', descKey: 'upgrade_click5_desc', baseCost: 10000000, costMultiplier: 1.8, type: 'click', value: 1000, currentLevel: 0, requiredEssence: 15000000 },
        { id: 'auto7', nameKey: 'upgrade_auto7_name', descKey: 'upgrade_auto7_desc', baseCost: 50000000, costMultiplier: 2.1, type: 'auto', value: 5000, currentLevel: 0, requiredEssence: 60000000 },
    ];

    // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–∏–Ω–æ–≤ ---
    const availableSkins = [ /* ... –∫–∞–∫ –±—ã–ª–∏ —Ä–∞–Ω—å—à–µ ... */
        { id: 'default', nameKey: 'skin_default_name', cost: 0, cssClass: 'skin-default' },
        { id: 'gold', nameKey: 'skin_gold_name', cost: 15, cssClass: 'skin-gold' },
        { id: 'crystal', nameKey: 'skin_crystal_name', cost: 50, cssClass: 'skin-crystal' },
        { id: 'obsidian', nameKey: 'skin_obsidian_name', cost: 100, cssClass: 'skin-obsidian' },
    ];

    // --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (createBubble, updateLiquidLevelVisual, updateDisplay, formatNumber, showClickFeedback, click handler, intervals, upgrades logic, panel logic, settings logic, sound logic, shop logic, referral logic) ---
    // ... (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –æ—Ç–≤–µ—Ç–æ–º) ...
    // ... (createBubble) ...
    // ... (updateLiquidLevelVisual) ...
    // ... (updateDisplay) ...
    // ... (formatNumber) ...
    // ... (showClickFeedback) ...
    // ... (cauldronElement click listener) ...
    // ... (setInterval for auto-click) ...
    // ... (setInterval for liquid decay) ...
    // ... (calculateCost, renderUpgrades, buyUpgrade, recalculateBonuses) ...
    // ... (closeSettings, closeUpgrades, closeShop) ...
    // ... (event listeners for open/close buttons) ...
    // ... (setLanguage, applyTranslations, updateActiveLangButton, languageOptionsContainer listener) ...
    // ... (applySoundSettingsToUI, soundToggleCheckbox listener, volumeSlider listeners) ...
    // ... (renderSkins, handleSkinAction, buySkin, setActiveSkin, applyCauldronSkin) ...
    // ... (checkReferralAndBonus, handleNewReferral, handleBonusClaim, cleanBonusUrlParam, inviteFriendBtn listener) ...

    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–ó–∞–≥—Ä—É–∑–∫–∞ (–° –£–î–ê–õ–ï–ù–ù–û–ô –û–®–ò–ë–ö–û–ô –∏ –ü–†–û–í–ï–†–ö–û–ô CloudStorage) ---
    function saveGame() {
        // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ CloudStorage ---
        if (!tg?.CloudStorage || !tg.CloudStorage.setItem) {
            // console.log("[Save] CloudStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.");
            return;
        }
        // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ ---

        console.log("[Save] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...");
        // --- –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
        let isValid = true;
        if (!Number.isFinite(essence) || essence < 0) { console.warn(`[Save Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —ç—Å—Å–µ–Ω—Ü–∏—è (${essence}). –°–±—Ä–æ—Å –Ω–∞ 0.`); essence = 0; isValid = false; }
        if (!Number.isFinite(gems) || gems < 0) { console.warn(`[Save Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã (${gems}). –°–±—Ä–æ—Å –Ω–∞ 0.`); gems = 0; isValid = false; }
        if (typeof isSoundEnabled !== 'boolean') { console.warn(`[Save Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–ª–∞–≥ –∑–≤—É–∫–∞ (${isSoundEnabled}). –£—Å—Ç–∞–Ω–æ–≤–∫–∞ true.`); isSoundEnabled = true; isValid = false; }
        if (!Number.isFinite(soundVolume) || soundVolume < 0 || soundVolume > 1) { console.warn(`[Save Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å (${soundVolume}). –°–±—Ä–æ—Å –Ω–∞ 0.5.`); soundVolume = 0.5; isValid = false; }
        if (!Array.isArray(ownedSkins) || !ownedSkins.includes('default')) { console.warn(`[Save Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤ (${JSON.stringify(ownedSkins)}). –°–±—Ä–æ—Å.`); ownedSkins = ['default']; if (activeSkinId !== 'default') activeSkinId = 'default'; isValid = false; }
        if (typeof activeSkinId !== 'string' || !ownedSkins.includes(activeSkinId)) { console.warn(`[Save Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω (${activeSkinId}). –°–±—Ä–æ—Å –Ω–∞ default.`); activeSkinId = 'default'; isValid = false; }
        upgrades.forEach(upg => { if (!Number.isFinite(upg.currentLevel) || upg.currentLevel < 0) { console.warn(`[Save Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞ ${upg.id} (${upg.currentLevel}). –°–±—Ä–æ—Å –Ω–∞ 0.`); upg.currentLevel = 0; isValid = false; } });
        if (!isValid) { console.warn("[Save] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∑–Ω–∞—á–µ–Ω–∏—è –±—ã–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º."); }
        // --- –ö–æ–Ω–µ—Ü –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ---

        const gameState = {
            essence: essence, gems: gems, upgrades: upgrades.map(u => ({ id: u.id, level: u.currentLevel })),
            language: currentLanguage, ownedSkins: ownedSkins, activeSkinId: activeSkinId,
            isSoundEnabled: isSoundEnabled, soundVolume: soundVolume
        };

        try {
            const gameStateString = JSON.stringify(gameState);
            console.log(`[Save] –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (JSON ${gameStateString.length} –±–∞–π—Ç):`, gameState);

            tg.CloudStorage.setItem('gameState', gameStateString, (error, success) => {
                if (error) { console.error("[Save Callback] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ CloudStorage:", error);
                } else if (success) { console.log("[Save Callback] –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ CloudStorage.");
                } else { console.warn("[Save Callback] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –±–µ–∑ –æ—à–∏–±–∫–∏, –Ω–æ –∏ –±–µ–∑ —Ñ–ª–∞–≥–∞ —É—Å–ø–µ—Ö–∞."); }
            });
        } catch (stringifyError) {
             console.error("[Save] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ JSON.stringify:", stringifyError, "–û–±—ä–µ–∫—Ç gameState:", gameState);
             showTemporaryNotification(translations.saveCritError?.[currentLanguage] || "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", "error");
        }
    }

    function loadGame() {
        console.log("[Load] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏..."); // –õ–æ–≥: –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
        isBlocked = false; warningCount = 0; // –°–±—Ä–æ—Å –±–ª–æ–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        if (cauldronElement) cauldronElement.classList.remove('blocked-cauldron');

        // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–¥–∞–ª–µ–Ω–æ –æ—à–∏–±–æ—á–Ω–æ–µ —Å–ª–æ–≤–æ "–ü–æ–ø—ã—Ç–∫–∞" ---

        // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ CloudStorage ---
        if (!tg?.CloudStorage || !tg.CloudStorage.getItem) {
            console.warn("[Load] CloudStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏.");
            resetGameData();
            applyTranslations(); updateDisplay(); applyCauldronSkin(); applySoundSettingsToUI(); updateLiquidLevelVisual(LIQUID_MIN_LEVEL);
            showTemporaryNotification("–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Telegram.", "warning");
            return;
        }
        // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ ---

        tg.CloudStorage.getItem('gameState', (error, value) => {
            console.log("[Load Callback] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç CloudStorage.getItem.");
            let loadedSuccessfully = false;
            if (error) {
                console.error("[Load Callback] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CloudStorage:", error);
                showTemporaryNotification(translations.loadError?.[currentLanguage] || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!", "error");
                resetGameData();
            } else if (value) {
                console.log(`[Load Callback] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ CloudStorage (${value.length} –±–∞–π—Ç). –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...`);
                try {
                    const savedState = JSON.parse(value);
                    console.log("[Load Parse] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã:", savedState);
                    // --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π ---
                    essence = Number(savedState.essence) || 0; if (!Number.isFinite(essence) || essence < 0) { console.warn("[Load Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —ç—Å—Å–µ–Ω—Ü–∏—è, —Å–±—Ä–æ—Å."); essence = 0; }
                    gems = Number(savedState.gems) || 0; if (!Number.isFinite(gems) || gems < 0) { console.warn("[Load Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã, —Å–±—Ä–æ—Å."); gems = 0; }
                    currentLanguage = savedState.language || 'ru'; if (!translations.greetingBase[currentLanguage]) { console.warn(`[Load Validation] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫ "${currentLanguage}", —Å–±—Ä–æ—Å –Ω–∞ 'ru'.`); currentLanguage = 'ru'; }
                    if (Array.isArray(savedState.upgrades)) { upgrades.forEach(upgrade => { const savedUpgrade = savedState.upgrades.find(su => su.id === upgrade.id); const loadedLevel = Number(savedUpgrade?.level); upgrade.currentLevel = (Number.isFinite(loadedLevel) && loadedLevel >= 0) ? loadedLevel : 0; if (upgrade.currentLevel !== 0 && !(Number.isFinite(loadedLevel) && loadedLevel >= 0)) { console.warn(`[Load Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–ø–≥—Ä–µ–π–¥–∞ ${upgrade.id}, —Å–±—Ä–æ—Å.`);}}); } else { console.warn("[Load Validation] –î–∞–Ω–Ω—ã–µ –∞–ø–≥—Ä–µ–π–¥–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, —Å–±—Ä–æ—Å —É—Ä–æ–≤–Ω–µ–π."); upgrades.forEach(upgrade => upgrade.currentLevel = 0); }
                    ownedSkins = Array.isArray(savedState.ownedSkins) ? savedState.ownedSkins : ['default']; if (!ownedSkins.includes('default')) { ownedSkins.push('default'); console.warn("[Load Validation] –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª —Å–∫–∏–Ω 'default', –¥–æ–±–∞–≤–ª–µ–Ω."); }
                    activeSkinId = (typeof savedState.activeSkinId === 'string' && ownedSkins.includes(savedState.activeSkinId)) ? savedState.activeSkinId : 'default'; if (savedState.activeSkinId && !ownedSkins.includes(savedState.activeSkinId)) { console.warn(`[Load Validation] –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω '${savedState.activeSkinId}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö, —Å–±—Ä–æ—Å.`); }
                    isSoundEnabled = typeof savedState.isSoundEnabled === 'boolean' ? savedState.isSoundEnabled : true;
                    let loadedVolume = Number(savedState.soundVolume); soundVolume = (Number.isFinite(loadedVolume) && loadedVolume >= 0 && loadedVolume <= 1) ? loadedVolume : 0.5; if (!(Number.isFinite(loadedVolume) && loadedVolume >= 0 && loadedVolume <= 1)) { console.warn(`[Load Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å ${savedState.soundVolume}, —Å–±—Ä–æ—Å.`);}
                    // --- –ö–æ–Ω–µ—Ü –∑–∞–≥—Ä—É–∑–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π ---
                    recalculateBonuses();
                    console.log("[Load] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ.");
                    loadedSuccessfully = true;
                } catch (parseError) {
                    console.error("[Load Parse] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ CloudStorage:", parseError, "–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", value);
                    showTemporaryNotification(translations.readError?.[currentLanguage] || "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", "error");
                    resetGameData();
                }
            } else {
                console.log("[Load Callback] –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ CloudStorage. –ù–æ–≤–∞—è –∏–≥—Ä–∞.");
                resetGameData();
            }
            // --- –ü–æ—Å—Ç-–∑–∞–≥—Ä—É–∑–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
            checkReferralAndBonus(); applyTranslations(); updateDisplay(); applyCauldronSkin(); applySoundSettingsToUI();
            visualLiquidLevel = LIQUID_MIN_LEVEL; lastInteractionTime = Date.now(); updateLiquidLevelVisual(visualLiquidLevel);
            console.log(`[Load] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. Essence: ${essence}, Gems: ${gems}, Active Skin: ${activeSkinId}, Sound: ${isSoundEnabled}, Volume: ${soundVolume}`);
            if (!loadedSuccessfully && !error && !value) { console.log("[Load] –≠—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫."); }
        });
    }


    function resetGameData() {
        console.log("–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
        isBlocked = false; warningCount = 0;
        if (cauldronElement) cauldronElement.classList.remove('blocked-cauldron');
        essence = 0; gems = 0;
        upgrades.forEach(upgrade => upgrade.currentLevel = 0);
        currentLanguage = 'ru';
        ownedSkins = ['default']; activeSkinId = 'default';
        isSoundEnabled = true; soundVolume = 0.5;
        recalculateBonuses();
        visualLiquidLevel = LIQUID_MIN_LEVEL; lastInteractionTime = Date.now();
    }

    // --- –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
    function showTemporaryNotification(message, type = "info") { const notification = document.createElement('div'); notification.className = `notification ${type}`; notification.textContent = message; document.body.appendChild(notification); void notification.offsetWidth; requestAnimationFrame(() => { notification.style.opacity = '1'; notification.style.bottom = '80px'; }); setTimeout(() => { notification.style.opacity = '0'; notification.style.bottom = '70px'; setTimeout(() => { if (notification.parentNode) { notification.remove(); } }, 500); }, 2500); }

    // --- –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    loadGame(); // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã

    // --- –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
    const autoSaveInterval = setInterval(saveGame, 15000); // –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    window.addEventListener('beforeunload', saveGame); // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    document.addEventListener('visibilitychange', () => { if (document.visibilityState === 'hidden') { saveGame(); } }); // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏
    if (tg?.onEvent) { tg.onEvent('viewportChanged', (event) => { if (event.isStateStable) { console.log("Viewport stable, triggering save."); saveGame(); } }); }

}); // –ö–æ–Ω–µ—Ü DOMContentLoaded