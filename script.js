document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    const tg = window.Telegram.WebApp;
    tg.ready(); // –°–æ–æ–±—â–∞–µ–º Telegram, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
    tg.expand(); // –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç—å Mini App –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω

    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã DOM
    const essenceCountElement = document.getElementById('essence-count');
    const essencePerSecondElement = document.getElementById('essence-per-second');
    const cauldronElement = document.getElementById('cauldron');
    const clickFeedbackContainer = document.getElementById('click-feedback-container');
    const openUpgradesBtn = document.getElementById('open-upgrades-btn');
    const closeUpgradesBtn = document.getElementById('close-upgrades-btn');
    const upgradesPanel = document.getElementById('upgrades-panel');
    const upgradesListElement = document.getElementById('upgrades-list');
    const userGreetingElement = document.getElementById('user-greeting');
    const inviteFriendBtn = document.getElementById('invite-friend-btn');

    // –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    let essence = 0;
    let essencePerClick = 1;
    let essencePerSecond = 0;

    // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
    if (tg.initDataUnsafe && tg.initDataUnsafe.user && tg.initDataUnsafe.user.first_name) {
        userGreetingElement.textContent = `–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è ${tg.initDataUnsafe.user.first_name}`;
    }

    // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π ---
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
    // id: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    // name: –ù–∞–∑–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
    // description: –û–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
    // baseCost: –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    // costMultiplier: –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    // type: 'click' –∏–ª–∏ 'auto' - —Ç–∏–ø —É–ª—É—á—à–µ–Ω–∏—è
    // value: –ù–∞ —Å–∫–æ–ª—å–∫–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∫–ª–∏–∫ –∏–ª–∏ –∞–≤—Ç–æ-–∫–ª–∏–∫ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    // maxLevel: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const upgrades = [
        { id: 'click1', name: '–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç', description: '+1 –∫ –∫–ª–∏–∫—É', baseCost: 10, costMultiplier: 1.5, type: 'click', value: 1, currentLevel: 0 },
        { id: 'auto1', name: '–ì–æ–º—É–Ω–∫—É–ª-–ü–æ–º–æ—â–Ω–∏–∫', description: '+1 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 50, costMultiplier: 1.8, type: 'auto', value: 1, currentLevel: 0 },
        { id: 'click2', name: '–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—É–ø–∫–∞', description: '+5 –∫ –∫–ª–∏–∫—É', baseCost: 200, costMultiplier: 1.6, type: 'click', value: 5, currentLevel: 0 },
        { id: 'auto2', name: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≥–æ–Ω–Ω—ã–π –∫—É–±', description: '+8 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 1000, costMultiplier: 2.0, type: 'auto', value: 8, currentLevel: 0 },
    ];

    // --- –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI ---
    function updateEssenceDisplay() {
        essenceCountElement.textContent = formatNumber(Math.floor(essence));
        essencePerSecondElement.textContent = formatNumber(essencePerSecond);
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª (–¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏)
    function formatNumber(num) {
        if (num < 1000) return num.toString();
        if (num < 1000000) return (num / 1000).toFixed(1).replace('.0', '') + 'K';
        if (num < 1000000000) return (num / 1000000).toFixed(1).replace('.0', '') + 'M';
        return (num / 1000000000).toFixed(1).replace('.0', '') + 'B';
    }

    // --- –õ–æ–≥–∏–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ—Ç–ª—É ---
    cauldronElement.addEventListener('click', () => {
        essence += essencePerClick;
        updateEssenceDisplay();
        showClickFeedback(`+${formatNumber(essencePerClick)}`);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∫–æ—Ç–ª–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
        cauldronElement.style.transform = 'scale(0.95)';
        setTimeout(() => {
            cauldronElement.style.transform = 'scale(1)';
        }, 80); // –ö–æ—Ä–æ—Ç–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
    });

    // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "+1" –ø—Ä–∏ –∫–ª–∏–∫–µ ---
    function showClickFeedback(text) {
        const feedback = document.createElement('div');
        feedback.className = 'click-feedback';
        feedback.textContent = text;

        // –°–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        const offsetX = Math.random() * 40 - 20; // –æ—Ç -20px –¥–æ +20px
        const offsetY = Math.random() * 20 - 10; // –æ—Ç -10px –¥–æ +10px
        feedback.style.left = `calc(50% + ${offsetX}px)`;
        feedback.style.top = `calc(50% + ${offsetY}px)`;

        clickFeedbackContainer.appendChild(feedback);

        // –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            feedback.remove();
        }, 950); // –ß—É—Ç—å –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ (1s)
    }

    // --- –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ-–∫–ª–∏–∫–∞ (–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥) ---
    setInterval(() => {
        essence += essencePerSecond / 10; // –ù–∞—á–∏—Å–ª—è–µ–º 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        updateEssenceDisplay();
    }, 100); // –ò–Ω—Ç–µ—Ä–≤–∞–ª 100–º—Å

    // --- –õ–æ–≥–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π ---
    function calculateCost(upgrade) {
        return Math.floor(upgrade.baseCost * Math.pow(upgrade.costMultiplier, upgrade.currentLevel));
    }

    function renderUpgrades() {
        upgradesListElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–æ–º
        upgrades.forEach(upgrade => {
            const cost = calculateCost(upgrade);
            const li = document.createElement('li');

            const canAfford = essence >= cost;

            li.innerHTML = `
                <div class="upgrade-info">
                    <h3>${upgrade.name} (–£—Ä. ${upgrade.currentLevel})</h3>
                    <p>${upgrade.description}</p>
                    <p class="upgrade-cost">–°—Ç–æ–∏–º–æ—Å—Ç—å: ${formatNumber(cost)} üß™</p>
                </div>
                <button class="buy-upgrade-btn" data-upgrade-id="${upgrade.id}" ${!canAfford ? 'disabled' : ''}>
                    –ö—É–ø–∏—Ç—å
                </button>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å"
            li.querySelector('.buy-upgrade-btn').addEventListener('click', () => {
                buyUpgrade(upgrade.id);
            });

            upgradesListElement.appendChild(li);
        });
    }

    function buyUpgrade(upgradeId) {
        const upgrade = upgrades.find(u => u.id === upgradeId);
        if (!upgrade) return;

        const cost = calculateCost(upgrade);
        if (essence >= cost) {
            essence -= cost;
            upgrade.currentLevel++;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —É–ª—É—á—à–µ–Ω–∏—è
            if (upgrade.type === 'click') {
                essencePerClick += upgrade.value;
            } else if (upgrade.type === 'auto') {
                essencePerSecond += upgrade.value;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            updateEssenceDisplay();
            renderUpgrades(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ª—É—á—à–µ–Ω–∏–π —Å –Ω–æ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        } else {
            console.log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Å—Å–µ–Ω—Ü–∏–∏!"); // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        }
    }

    // --- –û—Ç–∫—Ä—ã—Ç–∏–µ/–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ª—É—á—à–µ–Ω–∏–π ---
    openUpgradesBtn.addEventListener('click', () => {
        renderUpgrades(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
        upgradesPanel.classList.remove('hidden');
    });

    closeUpgradesBtn.addEventListener('click', () => {
        upgradesPanel.classList.add('hidden');
    });

    // --- –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–∑—å—è" (–∑–∞–≥–ª—É—à–∫–∞) ---
    inviteFriendBtn.addEventListener('click', () => {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram API
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∏ —à–∞—Ä–∏–Ω–≥
        // tg.share(...) –∏–ª–∏ tg.openTelegramLink(...)
        console.log('–ö–Ω–æ–ø–∫–∞ "–î—Ä—É–∑—å—è" –Ω–∞–∂–∞—Ç–∞. –ù—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram API.');
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        tg.showPopup({
            title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π',
            message: '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã!',
            buttons: [{ type: 'ok' }]
        });
    });

    // --- –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ ---
    updateEssenceDisplay();
    // renderUpgrades(); // –ú–æ–∂–Ω–æ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É, –Ω–æ –ª—É—á—à–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏

    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–ó–∞–≥—Ä—É–∑–∫–∞ (–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä —Å localStorage) ---
    function saveGame() {
        const gameState = {
            essence: essence,
            upgrades: upgrades.map(u => ({ id: u.id, level: u.currentLevel }))
        };
        localStorage.setItem('alchemistClickerSave', JSON.stringify(gameState));
        console.log("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
    }

    function loadGame() {
        const savedState = localStorage.getItem('alchemistClickerSave');
        if (savedState) {
            try {
                const gameState = JSON.parse(savedState);
                essence = gameState.essence || 0;

                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ —É–ª—É—á—à–µ–Ω–∏–π –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã
                essencePerClick = 1; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º
                essencePerSecond = 0;
                upgrades.forEach(upgrade => {
                    const savedUpgrade = gameState.upgrades.find(su => su.id === upgrade.id);
                    if (savedUpgrade) {
                        upgrade.currentLevel = savedUpgrade.level || 0;
                        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
                        if (upgrade.type === 'click') {
                            essencePerClick += upgrade.value * upgrade.currentLevel;
                        } else if (upgrade.type === 'auto') {
                            essencePerSecond += upgrade.value * upgrade.currentLevel;
                        }
                    } else {
                         upgrade.currentLevel = 0; // –ï—Å–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                    }
                });

                console.log("–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", e);
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
                resetGameData();
            }
        } else {
             console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.");
             resetGameData();
        }
        updateEssenceDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    }

    function resetGameData() {
        essence = 0;
        essencePerClick = 1;
        essencePerSecond = 0;
        upgrades.forEach(u => u.currentLevel = 0);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    loadGame();

    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(saveGame, 30000);

     // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º (–º–æ–∂–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤ Mini Apps)
    window.addEventListener('beforeunload', saveGame);
    // –î–ª—è Mini Apps –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ API –ø–æ–∑–≤–æ–ª—è–µ—Ç
     document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'hidden') {
            saveGame();
        }
    });


}); // –ö–æ–Ω–µ—Ü DOMContentLoaded