// –§–∞–π–ª: script.js
// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞
document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    const tg = window.Telegram.WebApp;
    tg.ready();
    tg.expand();

    // --- –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã DOM ---
    const essenceCountElement = document.getElementById('essence-count');
    const cauldronElement = document.getElementById('cauldron');
    const openUpgradesBtn = document.getElementById('open-upgrades-btn');
    const essencePerSecondElement = document.getElementById('essence-per-second');
    const gemCountElement = document.getElementById('gem-count');
    const clickFeedbackContainer = document.getElementById('click-feedback-container');
    const closeUpgradesBtn = document.getElementById('close-upgrades-btn');
    const upgradesPanel = document.getElementById('upgrades-panel');
    const upgradesListElement = document.getElementById('upgrades-list');
    const userGreetingElement = document.getElementById('user-greeting');
    const inviteFriendBtn = document.getElementById('invite-friend-btn');
    const bubblesContainer = document.getElementById('bubbles-container');
    const perSecondDisplayDiv = document.getElementById('per-second-display');
    const settingsBtn = document.getElementById('settings-btn');
    const settingsPanel = document.getElementById('settings-panel');
    const closeSettingsBtn = document.getElementById('close-settings-btn');
    const languageOptionsContainer = settingsPanel ? settingsPanel.querySelector('.language-options') : null;
    const shopBtn = document.getElementById('shop-btn');
    const shopPanel = document.getElementById('shop-panel');
    const closeShopBtn = document.getElementById('close-shop-btn');
    const skinsListElement = document.getElementById('skins-list');
    const shopGemCountElement = document.getElementById('shop-gem-count');
    const oneTimeBonusBtn = document.getElementById('one-time-bonus-btn');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (!essenceCountElement || !cauldronElement || !openUpgradesBtn || !upgradesPanel || !settingsPanel || !shopPanel || !inviteFriendBtn || !settingsBtn || !shopBtn || !gemCountElement || !userGreetingElement || !oneTimeBonusBtn ) {
        console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM. –†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
        alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.");
        return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
    }

    // --- –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ) ---
    let essence = 0;
    let essencePerClick = 1;
    let essencePerSecond = 0;
    let gems = 0;
    let ownedSkins = ['default'];
    let activeSkinId = 'default';
    const GEM_AWARD_CHANCE = 0.03; // 3% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª
    const GEMS_PER_AWARD = 1;
    let currentLanguage = 'ru'; // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let userName = tg.initDataUnsafe?.user?.first_name || null;
    let bonusClaimed = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞

    // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞ ---
    let lastClickTime = 0;
    const MIN_CLICK_INTERVAL = 60; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏ –≤ –º—Å
    const MAX_WARNINGS = 5; // –ë–æ–ª—å—à–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    let warningCount = 0;
    let isBlocked = false;

    // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∂–∏–¥–∫–æ—Å—Ç–∏ ---
    let visualLiquidLevel = 10; // –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ %
    const LIQUID_MIN_LEVEL = 10;
    const LIQUID_MAX_LEVEL = 95;
    const LIQUID_INCREASE_PER_CLICK = 1.0; // –ù–∞ —Å–∫–æ–ª—å–∫–æ % –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –∑–∞ –∫–ª–∏–∫
    const LIQUID_DECAY_RATE = 0.15; // –ù–∞ —Å–∫–æ–ª—å–∫–æ % –ø–∞–¥–∞–µ—Ç –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
    const LIQUID_UPDATE_INTERVAL = 100; // –ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å/–æ–±–Ω–æ–≤–ª—è—Ç—å —É—Ä–æ–≤–µ–Ω—å (–º—Å)
    const IDLE_TIMEOUT = 500; // –í—Ä–µ–º—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–ø–∞–¥–∞ —É—Ä–æ–≤–Ω—è (–º—Å)
    let lastInteractionTime = Date.now();

    // --- –û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ ---
    const translations = {
        greetingBase: { ru: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", en: "Laboratory" },
        perSec: { ru: "–≤ —Å–µ–∫", en: "/ sec" },
        upgradesButton: { ru: "–£–ª—É—á—à–µ–Ω–∏—è", en: "Upgrades" },
        inviteFriendsButton: { ru: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", en: "Invite Friends" },
        upgradesTitle: { ru: "–£–ª—É—á—à–µ–Ω–∏—è", en: "Upgrades" },
        settingsTitle: { ru: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", en: "Settings" },
        languageTitle: { ru: "–Ø–∑—ã–∫", en: "Language" },
        buyButton: { ru: "–ö—É–ø–∏—Ç—å", en: "Buy" },
        requirementPrefix: { ru: "–ù—É–∂–Ω–æ", en: "Need" },
        requirementInfoPrefix: { ru: "–¢—Ä–µ–±—É–µ—Ç—Å—è", en: "Requires" },
        tooFastClick: { ru: "–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!", en: "Clicking too fast!" },
        autoclickerBlocked: { ru: "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –ö–ª–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", en: "Autoclicker detected! Clicking temporarily blocked." },
        actionBlocked: { ru: "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.", en: "Action blocked." },
        needMoreEssence: { ru: "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —ç—Å—Å–µ–Ω—Ü–∏–∏!", en: "Need more essence!" },
        invalidCostError: { ru: "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è!", en: "Error: Invalid upgrade cost!" },
        notEnoughEssence: { ru: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Å—Å–µ–Ω—Ü–∏–∏!", en: "Not enough essence!" },
        loadErrorStartNew: { ru: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.", en: "Failed to load progress. Starting new game." },
        loadError: { ru: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!", en: "Error loading progress!" },
        readError: { ru: "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", en: "Error reading save data!" },
        saveCritError: { ru: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", en: "Critical save error!" }, // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ JSON.stringify –∏–ª–∏ setItem
        saveSuccess: { ru: "–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω", en: "Progress saved" },
        welcomeReferral: { ru: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –±–æ–Ω—É—Å.", en: "Welcome! Your inviter gets a bonus." },
        referralRegErrorBot: { ru: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–æ—à–∏–±–∫–∞ –±–æ—Ç–∞).", en: "Could not register invite (bot error)." },
        referralRegErrorFunc: { ru: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞).", en: "Could not register invite (feature unavailable)." },
        bonusCheckError: { ru: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–Ω—É—Å–∞!", en: "Bonus check error!" },
        bonusAlreadyClaimed: { ru: "–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω.", en: "Bonus already claimed." },
        bonusReasonFriend: { ru: "–∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!", en: "for invited friend!" },
        bonusAddError: { ru: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!", en: "Bonus add error!" },
        inviteLinkError: { ru: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", en: "Failed to create invite link." },
        shareText: { ru: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –º–æ–µ–π –ê–ª—Ö–∏–º–∏—á–µ—Å–∫–æ–π –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –≤ Telegram! üß™‚öóÔ∏è –ö–ª–∏–∫–∞–π –∏ —Å–æ–∑–¥–∞–≤–∞–π —ç–ª–∏–∫—Å–∏—Ä—ã!', en: 'Join my Alchemy Lab in Telegram! üß™‚öóÔ∏è Click and create elixirs!' },
        shopTitle: { ru: "–ú–∞–≥–∞–∑–∏–Ω", en: "Shop" },
        yourGems: { ru: "–í–∞—à–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã:", en: "Your Gems:" },
        selectButton: { ru: "–í—ã–±—Ä–∞—Ç—å", en: "Select" },
        selectedButton: { ru: "–í—ã–±—Ä–∞–Ω–æ", en: "Selected" },
        notEnoughGems: { ru: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!", en: "Not enough gems!" },
        skinPurchaseSuccess: { ru: "–°–∫–∏–Ω –∫—É–ø–ª–µ–Ω!", en: "Skin purchased!" },
        skinSelected: { ru: "–°–∫–∏–Ω –≤—ã–±—Ä–∞–Ω!", en: "Skin selected!" },
        skin_default_name: { ru: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–ª–±–∞", en: "Standard Flask" },
        skin_gold_name: { ru: "–ó–æ–ª–æ—Ç–∞—è –∫–æ–ª–±–∞", en: "Golden Flask" },
        skin_crystal_name: { ru: "–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —Å–æ—Å—É–¥", en: "Crystal Vial" },
        skin_obsidian_name: { ru: "–û–±—Å–∏–¥–∏–∞–Ω–æ–≤–∞—è —Ä–µ—Ç–æ—Ä—Ç–∞", en: "Obsidian Retort" },
        upgrade_click1_name: { ru: "–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", en: "Improved Recipe" },
        upgrade_click1_desc: { ru: "+1 –∫ –∫–ª–∏–∫—É", en: "+1 per click" },
        upgrade_auto1_name: { ru: "–ì–æ–º—É–Ω–∫—É–ª-–ü–æ–º–æ—â–Ω–∏–∫", en: "Homunculus Helper" },
        upgrade_auto1_desc: { ru: "+1 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+1 per second" },
        upgrade_click2_name: { ru: "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—É–ø–∫–∞", en: "Enchanted Mortar" },
        upgrade_click2_desc: { ru: "+5 –∫ –∫–ª–∏–∫—É", en: "+5 per click" },
        upgrade_auto2_name: { ru: "–ü—É–∑—ã—Ä—è—â–∏–π—Å—è –∫–æ—Ç–µ–ª", en: "Bubbling Cauldron" },
        upgrade_auto2_desc: { ru: "+4 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+4 per second" },
        upgrade_click3_name: { ru: "–ê–ª–µ–º–±–∏–∫ –ú–∞—Å—Ç–µ—Ä–∞", en: "Master's Alembic" },
        upgrade_click3_desc: { ru: "+25 –∫ –∫–ª–∏–∫—É", en: "+25 per click" },
        upgrade_auto3_name: { ru: "–ü—Ä–∏–∑–≤–∞–Ω–Ω—ã–π –ò—Ñ—Ä–∏—Ç", en: "Summoned Ifrit" },
        upgrade_auto3_desc: { ru: "+20 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+20 per second" },
        upgrade_auto4_name: { ru: "–°–∞–¥ –ê–ª—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –†–∞—Å—Ç–µ–Ω–∏–π", en: "Garden of Alchemical Plants" },
        upgrade_auto4_desc: { ru: "+50 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+50 per second" },
        upgrade_click4_name: { ru: "–°–∏–ª–∞ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–≥–æ –ö–∞–º–Ω—è (–æ—Å–∫–æ–ª–æ–∫)", en: "Power of the Philosopher's Stone (Shard)" },
        upgrade_click4_desc: { ru: "+150 –∫ –∫–ª–∏–∫—É", en: "+150 per click" },
        upgrade_auto5_name: { ru: "–≠—Ñ–∏—Ä–Ω—ã–π –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä", en: "Aether Concentrator" },
        upgrade_auto5_desc: { ru: "+250 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+250 per second" },
        upgrade_auto6_name: { ru: "–ü–æ—Ä—Ç–∞–ª –≤ –º–∏—Ä –≠—Å—Å–µ–Ω—Ü–∏–∏", en: "Portal to the Essence Realm" },
        upgrade_auto6_desc: { ru: "+1000 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+1000 per second" },
        upgrade_click5_name: { ru: "–ü—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ –¢–≤–æ—Ä—Ü–∞", en: "Creator's Touch" },
        upgrade_click5_desc: { ru: "+1000 –∫ –∫–ª–∏–∫—É", en: "+1000 per click" },
        upgrade_auto7_name: { ru: "–ü–æ—Ç–æ–∫ –ß–∏—Å—Ç–æ–π –ú–∞–≥–∏–∏", en: "Flow of Pure Magic" },
        upgrade_auto7_desc: { ru: "+5000 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+5000 per second" },
        // –î–æ–±–∞–≤–∏–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –±–æ–Ω—É—Å–æ–º
        bonusClaimedAlready: { ru: "–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω.", en: "Bonus already claimed." },
        bonusClaimSuccess: { ru: "+100K üß™ –ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!", en: "+100K üß™ Bonus claimed!" },
    };

    // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π ---
    const upgrades = [
        { id: 'click1', nameKey: 'upgrade_click1_name', descKey: 'upgrade_click1_desc', baseCost: 15, costMultiplier: 1.4, type: 'click', value: 1, currentLevel: 0, requiredEssence: 0 },
        { id: 'auto1', nameKey: 'upgrade_auto1_name', descKey: 'upgrade_auto1_desc', baseCost: 60, costMultiplier: 1.6, type: 'auto', value: 1, currentLevel: 0, requiredEssence: 0 },
        { id: 'click2', nameKey: 'upgrade_click2_name', descKey: 'upgrade_click2_desc', baseCost: 300, costMultiplier: 1.5, type: 'click', value: 5, currentLevel: 0, requiredEssence: 500 },
        { id: 'auto2', nameKey: 'upgrade_auto2_name', descKey: 'upgrade_auto2_desc', baseCost: 750, costMultiplier: 1.7, type: 'auto', value: 4, currentLevel: 0, requiredEssence: 700 },
        { id: 'click3', nameKey: 'upgrade_click3_name', descKey: 'upgrade_click3_desc', baseCost: 5000, costMultiplier: 1.6, type: 'click', value: 25, currentLevel: 0, requiredEssence: 10000 },
        { id: 'auto3', nameKey: 'upgrade_auto3_name', descKey: 'upgrade_auto3_desc', baseCost: 12000, costMultiplier: 1.8, type: 'auto', value: 20, currentLevel: 0, requiredEssence: 15000 },
        { id: 'auto4', nameKey: 'upgrade_auto4_name', descKey: 'upgrade_auto4_desc', baseCost: 30000, costMultiplier: 1.9, type: 'auto', value: 50, currentLevel: 0, requiredEssence: 40000 },
        { id: 'click4', nameKey: 'upgrade_click4_name', descKey: 'upgrade_click4_desc', baseCost: 250000, costMultiplier: 1.7, type: 'click', value: 150, currentLevel: 0, requiredEssence: 500000 },
        { id: 'auto5', nameKey: 'upgrade_auto5_name', descKey: 'upgrade_auto5_desc', baseCost: 1000000, costMultiplier: 2.0, type: 'auto', value: 250, currentLevel: 0, requiredEssence: 1200000 },
        { id: 'auto6', nameKey: 'upgrade_auto6_name', descKey: 'upgrade_auto6_desc', baseCost: 5000000, costMultiplier: 2.2, type: 'auto', value: 1000, currentLevel: 0, requiredEssence: 6000000 },
        { id: 'click5', nameKey: 'upgrade_click5_name', descKey: 'upgrade_click5_desc', baseCost: 10000000, costMultiplier: 1.8, type: 'click', value: 1000, currentLevel: 0, requiredEssence: 15000000 },
        { id: 'auto7', nameKey: 'upgrade_auto7_name', descKey: 'upgrade_auto7_desc', baseCost: 50000000, costMultiplier: 2.1, type: 'auto', value: 5000, currentLevel: 0, requiredEssence: 60000000 },
    ];

    // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–∏–Ω–æ–≤ ---
    const availableSkins = [
        { id: 'default', nameKey: 'skin_default_name', cost: 0, cssClass: 'skin-default' },
        { id: 'gold', nameKey: 'skin_gold_name', cost: 15, cssClass: 'skin-gold' },
        { id: 'crystal', nameKey: 'skin_crystal_name', cost: 50, cssClass: 'skin-crystal' },
        { id: 'obsidian', nameKey: 'skin_obsidian_name', cost: 100, cssClass: 'skin-obsidian' },
    ];

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—É–∑—ã—Ä—å–∫–æ–≤ ---
    function createBubble() { if (!bubblesContainer) return; const b = document.createElement('div'); b.classList.add('bubble'); const s = Math.random() * 8 + 6; const d = Math.random() * 2.5 + 3; const l = Math.random() * 1.5; const h = Math.random() * 90 + 5; b.style.width = `${s}px`; b.style.height = `${s}px`; b.style.left = `${h}%`; b.style.animationDuration = `${d}s`; b.style.animationDelay = `${l}s`; try { bubblesContainer.appendChild(b); } catch (e) { /* Ignore DOMException if container removed */ }; setTimeout(() => { b.remove(); }, (d + l) * 1000 + 100); }
    let bubbleInterval = null;
    if (bubblesContainer) { bubbleInterval = setInterval(createBubble, 500); } else { console.warn("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—É–∑—ã—Ä—å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."); }

    // --- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∞ –∂–∏–¥–∫–æ—Å—Ç–∏ ---
    function updateLiquidLevelVisual(percentage) {
        if (!cauldronElement) return;
        const l = Math.max(LIQUID_MIN_LEVEL, Math.min(LIQUID_MAX_LEVEL, percentage));
        cauldronElement.style.setProperty('--liquid-level', `${l}%`);
        if(bubblesContainer) {
            bubblesContainer.style.height = `${l}%`;
        }
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –∂–∏–¥–∫–æ—Å—Ç–∏ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ –õ–æ–Ω–¥–æ–Ω–∞/UTC) ---
    function getLondonHour() { const now = new Date(); return now.getUTCHours(); }
    function getLiquidColorByLondonTime() { const hour = getLondonHour(); const alpha = 0.35; if (hour >= 22 || hour < 5) return `rgba(40, 40, 100, ${alpha})`; if (hour >= 5 && hour < 7)  return `rgba(255, 150, 100, ${alpha})`; if (hour >= 7 && hour < 11) return `rgba(100, 180, 220, ${alpha})`; if (hour >= 11 && hour < 17) return `rgba(220, 220, 100, ${alpha})`; if (hour >= 17 && hour < 20) return `rgba(255, 120, 50, ${alpha})`; return `rgba(70, 70, 150, ${alpha})`; }
    function updateLiquidColor() { if (!cauldronElement) return; const color = getLiquidColorByLondonTime(); cauldronElement.style.setProperty('--liquid-color', color); }

    // --- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI ---
    function updateDisplay() {
        essenceCountElement.textContent = formatNumber(Math.floor(essence));
        if (essencePerSecondElement && perSecondDisplayDiv) { essencePerSecondElement.textContent = formatNumber(essencePerSecond); perSecondDisplayDiv.style.display = essencePerSecond > 0 ? 'block' : 'none'; }
        if (gemCountElement) gemCountElement.textContent = formatNumber(gems);
        updateLiquidLevelVisual(visualLiquidLevel);
        if (!upgradesPanel.classList.contains('hidden')) updateUpgradeButtonStates();
        if (!shopPanel.classList.contains('hidden')) updateSkinButtonStates();
    }

    // --- –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª ---
    function formatNumber(num) { if (isNaN(num) || !Number.isFinite(num)) { console.warn("formatNumber: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", num); return "ERR"; } if (num < 1000) return num.toString(); const ab = ["", "K", "M", "B", "T", "q", "Q", "s", "S", "O", "N", "d", "U"]; let i = 0; let t = num; while (t >= 1000 && i < ab.length - 1) { t /= 1000; i++; } return (t % 1 === 0 ? t.toString() : t.toFixed(1)) + ab[i]; }

    // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "+N" –ø—Ä–∏ –∫–ª–∏–∫–µ ---
    function showClickFeedback(amount, type = 'essence') { if (isBlocked || !clickFeedbackContainer) return; const fb = document.createElement('div'); fb.className = 'click-feedback'; const fa = formatNumber(amount); if (type === 'gem') { const si = `<span class="gem-icon" style="display:inline-flex; vertical-align: middle; margin-left: 4px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="1em" height="1em" fill="var(--gem-color)"><path d="M12 1.68l-8 8.42L12 22.32l8-8.42L12 1.68zm0 2.1l5.95 6.27L12 18.54l-5.95-6.27L12 3.78z M6.4 10.1L12 16.1l5.6-6H6.4z"></path></svg></span>`; fb.innerHTML = `+${fa}${si}`; fb.style.cssText = 'font-size: 1.3em; font-weight: bold; color: var(--gem-color);'; } else { fb.textContent = `+${fa} üß™`; fb.style.color = 'var(--accent-color)'; } const ox = Math.random() * 60 - 30; const oy = (type === 'gem') ? (Math.random() * 20 + 15) : (Math.random() * 20 - 10); fb.style.left = `calc(50% + ${ox}px)`; fb.style.top = `calc(50% + ${oy}px)`; clickFeedbackContainer.appendChild(fb); setTimeout(() => { fb.remove(); }, 950); }

    // --- –õ–æ–≥–∏–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ—Ç–ª—É ---
    cauldronElement.addEventListener('click', () => {
        const now = Date.now();
        tg.HapticFeedback?.impactOccurred('light');
        if (isBlocked) { showTemporaryNotification(translations.autoclickerBlocked[currentLanguage], "error"); return; }
        if (now - lastClickTime >= MIN_CLICK_INTERVAL) {
            warningCount = 0; lastInteractionTime = now;
            const ca = essencePerClick; if (Number.isFinite(ca) && ca > 0) { essence += ca; showClickFeedback(ca, 'essence'); } else { console.error("Invalid essencePerClick:", ca); }
            if (Math.random() < GEM_AWARD_CHANCE) { gems += GEMS_PER_AWARD; console.log(`+${GEMS_PER_AWARD} gem! Total: ${gems}`); showClickFeedback(GEMS_PER_AWARD, 'gem'); tg.HapticFeedback?.impactOccurred('medium'); }
            visualLiquidLevel = Math.min(visualLiquidLevel + LIQUID_INCREASE_PER_CLICK, LIQUID_MAX_LEVEL);
            updateDisplay();
            cauldronElement.style.transform = 'scale(0.95)'; setTimeout(() => { cauldronElement.style.transform = 'scale(1)'; }, 80);
            lastClickTime = now;
        } else {
            warningCount++; lastInteractionTime = now; console.warn(`Fast click ${warningCount}/${MAX_WARNINGS}`); showTemporaryNotification(`${translations.tooFastClick[currentLanguage]} (${warningCount}/${MAX_WARNINGS})`, "warning"); tg.HapticFeedback?.impactOccurred('medium');
            if (warningCount >= MAX_WARNINGS) { isBlocked = true; console.error("Autoclicker blocked."); showTemporaryNotification(translations.autoclickerBlocked[currentLanguage], "error"); tg.HapticFeedback?.notificationOccurred('error'); cauldronElement.classList.add('blocked-cauldron'); }
        }
    });

    // --- –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ-–∫–ª–∏–∫–∞ ---
    let autoClickInterval = null;
    try { autoClickInterval = setInterval(() => { if (!isBlocked && essencePerSecond > 0 && Number.isFinite(essencePerSecond)) { const ea = essencePerSecond / 10; if (Number.isFinite(ea) && ea > 0) { essence += ea; } else if (ea !== 0) { console.warn("Invalid auto-click essence portion:", ea); } } }, 100); } catch(e) { console.error("Error in auto-click interval:", e); }

    // --- –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI/–∂–∏–¥–∫–æ—Å—Ç–∏ ---
    let uiInterval = null;
    try { uiInterval = setInterval(() => { const now = Date.now(); if (!isBlocked && now - lastInteractionTime > IDLE_TIMEOUT && visualLiquidLevel > LIQUID_MIN_LEVEL) { visualLiquidLevel = Math.max(visualLiquidLevel - LIQUID_DECAY_RATE, LIQUID_MIN_LEVEL); } updateDisplay(); }, LIQUID_UPDATE_INTERVAL); } catch(e) { console.error("Error in UI update interval:", e); }

    // --- –õ–æ–≥–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π ---
    function calculateCost(upg) { if (!upg || typeof upg.baseCost !== 'number' || typeof upg.costMultiplier !== 'number' || typeof upg.currentLevel !== 'number') { console.error("Invalid upgrade data for cost calculation:", upg); return Infinity; } return Math.floor(upg.baseCost * Math.pow(upg.costMultiplier, upg.currentLevel)); }
    function renderUpgrades() { if (!upgradesListElement) return; upgradesListElement.innerHTML = ''; upgrades.sort((a, b) => (a.requiredEssence || 0) - (b.requiredEssence || 0)); if (upgrades.length === 0) { upgradesListElement.innerHTML = `<li><p>–ù–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π.</p></li>`; return; } const cef = Math.floor(essence); upgrades.forEach(upg => { const cost = calculateCost(upg); if (!Number.isFinite(cost)) { console.error("Skip rendering upgrade with invalid cost:", upg.id, cost); return; } const req = upg.requiredEssence || 0; const lock = cef < req; const aff = cef >= cost; const li = document.createElement('li'); li.dataset.upgradeId = upg.id; li.classList.toggle('locked', lock); li.classList.toggle('cannot-afford', !lock && !aff); const tName = translations[upg.nameKey]?.[currentLanguage] || upg.nameKey; const tDesc = translations[upg.descKey]?.[currentLanguage] || upg.descKey; const btnBuy = translations.buyButton?.[currentLanguage] || "–ö—É–ø–∏—Ç—å"; const preReq = translations.requirementPrefix?.[currentLanguage] || "–ù—É–∂–Ω–æ"; const infReq = translations.requirementInfoPrefix?.[currentLanguage] || "–¢—Ä–µ–±—É–µ—Ç—Å—è"; let btnTxt = btnBuy; let dis = lock || !aff; if (lock) { btnTxt = `${preReq} ${formatNumber(req)} üß™`; } li.innerHTML = `<div class="upgrade-info"><h3>${tName} (–£—Ä. ${upg.currentLevel})</h3><p>${tDesc}</p><p class="upgrade-cost">–¶–µ–Ω–∞: ${formatNumber(cost)} üß™</p><p class="requirement-info" style="display: ${lock ? 'block' : 'none'};">${infReq}: ${formatNumber(req)} üß™</p></div><button class="buy-upgrade-btn" data-upgrade-id="${upg.id}">${btnTxt}</button>`; const btn = li.querySelector('.buy-upgrade-btn'); if (btn) { btn.disabled = dis; btn.addEventListener('click', (e) => { e.stopPropagation(); if (!btn.disabled) { buyUpgrade(upg.id); } else { console.log("Clicked disabled upgrade button:", upg.id); tg.HapticFeedback?.notificationOccurred('warning'); if (lock) { showTemporaryNotification(`${infReq}: ${formatNumber(req)} üß™`, "warning"); } else if (!aff) { showTemporaryNotification(translations.notEnoughEssence[currentLanguage], "warning"); } } }); } upgradesListElement.appendChild(li); }); }
    function buyUpgrade(id) { if (isBlocked) { showTemporaryNotification(translations.actionBlocked[currentLanguage], "error"); return; } const upg = upgrades.find(u => u.id === id); if (!upg) { console.error("Upgrade not found:", id); return; } const req = upg.requiredEssence || 0; if (Math.floor(essence) < req) { showTemporaryNotification(`${translations.requirementInfoPrefix[currentLanguage]}: ${formatNumber(req)} üß™`, "warning"); tg.HapticFeedback?.notificationOccurred('warning'); return; } const cost = calculateCost(upg); if (!Number.isFinite(cost)) { showTemporaryNotification(translations.invalidCostError[currentLanguage], "error"); console.error("Attempted buy with invalid cost:", id, cost); return; } if (essence >= cost) { essence -= cost; upg.currentLevel++; recalculateBonuses(); renderUpgrades(); saveGame(); tg.HapticFeedback?.impactOccurred('light'); } else { showTemporaryNotification(translations.notEnoughEssence[currentLanguage], "warning"); tg.HapticFeedback?.notificationOccurred('warning'); } }
    function recalculateBonuses() { let cb = 0; let ab = 0; upgrades.forEach(u => { if (u.currentLevel > 0 && Number.isFinite(u.value) && typeof u.type === 'string') { const b = u.value * u.currentLevel; if (u.type === 'click') cb += b; else if (u.type === 'auto') ab += b; } else if (u.currentLevel > 0) { console.warn("Invalid upgrade data for bonus calc:", u); } }); essencePerClick = 1 + cb; essencePerSecond = ab; if (!Number.isFinite(essencePerClick) || essencePerClick < 1) { console.error("Invalid final essencePerClick:", essencePerClick); essencePerClick = 1; } if (!Number.isFinite(essencePerSecond) || essencePerSecond < 0) { console.error("Invalid final essencePerSecond:", essencePerSecond); essencePerSecond = 0; } }
    function updateUpgradeButtonStates() { if (!upgradesListElement || upgradesPanel.classList.contains('hidden')) return; const cef = Math.floor(essence); const items = upgradesListElement.querySelectorAll('li[data-upgrade-id]'); items.forEach(li => { const btn = li.querySelector('.buy-upgrade-btn'); const id = li.dataset.upgradeId; if (!btn || !id) return; const upg = upgrades.find(u => u.id === id); if (!upg) return; const cost = calculateCost(upg); const req = upg.requiredEssence || 0; const lock = cef < req; const aff = cef >= cost; const dis = lock || !aff; li.classList.toggle('locked', lock); li.classList.toggle('cannot-afford', !lock && !aff); if (btn.disabled !== dis) btn.disabled = dis; let btnTxt = translations.buyButton[currentLanguage]; if (lock) btnTxt = `${translations.requirementPrefix[currentLanguage]} ${formatNumber(req)} üß™`; if (btn.textContent !== btnTxt && !dis || lock && btn.textContent !== btnTxt) btn.textContent = btnTxt; const ce = li.querySelector('.upgrade-cost'); if (ce) { const ct = `–¶–µ–Ω–∞: ${formatNumber(cost)} üß™`; if (ce.textContent !== ct) ce.textContent = ct; } const rie = li.querySelector('.requirement-info'); if (rie) { const rt = `${translations.requirementInfoPrefix[currentLanguage]}: ${formatNumber(req)} üß™`; if (rie.textContent !== rt) rie.textContent = rt; const sv = lock; if ((rie.style.display === 'none') === sv) rie.style.display = sv ? 'block' : 'none'; } }); }

    // --- –õ–æ–≥–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ ---
    function renderSkins() { if (!skinsListElement) return; skinsListElement.innerHTML = ''; if (shopGemCountElement) shopGemCountElement.textContent = formatNumber(gems); availableSkins.forEach(skin => { const own = ownedSkins.includes(skin.id); const act = activeSkinId === skin.id; const aff = gems >= skin.cost; const li = document.createElement('li'); li.dataset.skinId = skin.id; li.classList.toggle('active-skin', act); const tName = translations[skin.nameKey]?.[currentLanguage] || skin.nameKey; const btnBuy = translations.buyButton?.[currentLanguage] || "–ö—É–ø–∏—Ç—å"; const btnSel = translations.selectButton?.[currentLanguage] || "–í—ã–±—Ä–∞—Ç—å"; const btnSeld = translations.selectedButton?.[currentLanguage] || "–í—ã–±—Ä–∞–Ω–æ"; const gemSvg = `<span class="gem-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="1em" height="1em"><path d="M12 1.68l-8 8.42L12 22.32l8-8.42L12 1.68zm0 2.1l5.95 6.27L12 18.54l-5.95-6.27L12 3.78z M6.4 10.1L12 16.1l5.6-6H6.4z"/></svg></span>`; let btnHtml = ''; if (act) btnHtml = `<button class="skin-action-btn selected-btn" disabled>${btnSeld}</button>`; else if (own) btnHtml = `<button class="skin-action-btn select-btn" data-skin-id="${skin.id}">${btnSel}</button>`; else btnHtml = `<button class="skin-action-btn buy-btn" data-skin-id="${skin.id}" ${!aff ? 'disabled' : ''}>${btnBuy}</button>`; li.innerHTML = `<div class="skin-preview ${skin.cssClass || ''}"></div><div class="skin-info"><h3>${tName}</h3>${skin.cost > 0 ? `<p class="skin-cost">${gemSvg} ${formatNumber(skin.cost)}</p>` : '<p class="skin-cost">¬†</p>'}</div>${btnHtml}`; const ab = li.querySelector('.skin-action-btn:not(.selected-btn)'); if (ab) { ab.addEventListener('click', (e) => { if (!e.currentTarget.disabled) { handleSkinAction(skin.id); } else { console.log("Clicked disabled skin button:", skin.id); tg.HapticFeedback?.notificationOccurred('warning'); if (!own && !aff) showTemporaryNotification(translations.notEnoughGems[currentLanguage], "warning"); } }); } skinsListElement.appendChild(li); }); }
    function handleSkinAction(id) { if (isBlocked) { showTemporaryNotification(translations.actionBlocked[currentLanguage], "error"); return; } const skin = availableSkins.find(s => s.id === id); if (!skin) { console.error("Skin not found:", id); return; } if (ownedSkins.includes(id)) { if (activeSkinId !== id) setActiveSkin(id); } else { buySkin(id); } }
    function buySkin(id) { const skin = availableSkins.find(s => s.id === id); if (!skin || ownedSkins.includes(id) || skin.cost <= 0) { console.warn("Cannot buy skin (not found, owned, or free):", id); return; } if (gems >= skin.cost) { gems -= skin.cost; ownedSkins.push(id); console.log(`Skin purchased: ${id}. Gems left: ${gems}`); showTemporaryNotification(translations.skinPurchaseSuccess[currentLanguage], "success"); tg.HapticFeedback?.notificationOccurred('success'); renderSkins(); setActiveSkin(id); } else { console.log(`Not enough gems for skin: ${id}. Need: ${skin.cost}, Have: ${gems}`); showTemporaryNotification(translations.notEnoughGems[currentLanguage], "warning"); tg.HapticFeedback?.notificationOccurred('warning'); } }
    function setActiveSkin(id) { if (!ownedSkins.includes(id)) { console.error(`Attempt to activate unowned skin: ${id}`); return; } if (activeSkinId !== id) { activeSkinId = id; console.log(`Active skin set to: ${id}`); applyCauldronSkin(); if (!shopPanel.classList.contains('hidden')) renderSkins(); saveGame(); showTemporaryNotification(translations.skinSelected[currentLanguage], "info"); tg.HapticFeedback?.impactOccurred('light'); } }
    function applyCauldronSkin() { if (!cauldronElement) return; const ad = availableSkins.find(s => s.id === activeSkinId); const sc = ad?.cssClass; availableSkins.forEach(s => { if (s.cssClass) cauldronElement.classList.remove(s.cssClass); }); if (sc) { cauldronElement.classList.add(sc); console.log(`Applied skin class: ${sc}`); } else { cauldronElement.classList.add('skin-default'); console.warn(`CSS class not found for active skin: ${activeSkinId}. Applied 'skin-default'.`); } }
    function updateSkinButtonStates() { if (!skinsListElement || shopPanel.classList.contains('hidden')) return; if (shopGemCountElement) { const fg = formatNumber(gems); if (shopGemCountElement.textContent !== fg) shopGemCountElement.textContent = fg; } const items = skinsListElement.querySelectorAll('li[data-skin-id]'); items.forEach(li => { const id = li.dataset.skinId; if (!id) return; const skin = availableSkins.find(s => s.id === id); if (!skin) return; const buyBtn = li.querySelector('.skin-action-btn.buy-btn'); const own = ownedSkins.includes(id); const act = activeSkinId === id; li.classList.toggle('active-skin', act); if (buyBtn && !own) { const aff = gems >= skin.cost; if (buyBtn.disabled === aff) buyBtn.disabled = !aff; } }); }

    // --- –û—Ç–∫—Ä—ã—Ç–∏–µ/–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–µ–π ---
    function closeAllPanels() { settingsPanel.classList.add('hidden'); upgradesPanel.classList.add('hidden'); shopPanel.classList.add('hidden'); }
    function openPanel(panel) { if (!panel) return; closeAllPanels(); panel.classList.remove('hidden'); tg.HapticFeedback?.impactOccurred('light'); }
    openUpgradesBtn.addEventListener('click', () => { renderUpgrades(); openPanel(upgradesPanel); });
    settingsBtn.addEventListener('click', () => { updateActiveLangButton(); openPanel(settingsPanel); });
    shopBtn.addEventListener('click', () => { renderSkins(); openPanel(shopPanel); });
    if (closeUpgradesBtn) closeUpgradesBtn.addEventListener('click', closeAllPanels);
    if (closeSettingsBtn) closeSettingsBtn.addEventListener('click', closeAllPanels);
    if (closeShopBtn) closeShopBtn.addEventListener('click', closeAllPanels);
    settingsPanel.addEventListener('click', (e) => { if (e.target === settingsPanel) closeAllPanels(); });

    // --- –õ–æ–≥–∏–∫–∞ –ù–∞—Å—Ç—Ä–æ–µ–∫ (—è–∑—ã–∫) ---
    function setLanguage(lang) { if (translations.greetingBase[lang] && lang !== currentLanguage) { currentLanguage = lang; console.log(`Language changed to: ${currentLanguage}`); applyTranslations(); updateActiveLangButton(); saveGame(); if (!upgradesPanel.classList.contains('hidden')) renderUpgrades(); if (!shopPanel.classList.contains('hidden')) renderSkins(); } else if (!translations.greetingBase[lang]) { console.warn(`Language "${lang}" not found.`); } }
    function applyTranslations() { if (userGreetingElement) { let g = translations.greetingBase[currentLanguage] || "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è"; if (userName) g += ` ${userName}`; userGreetingElement.textContent = g; } document.querySelectorAll('[data-translate]').forEach(el => { const k = el.dataset.translate; const t = translations[k]?.[currentLanguage]; if (t && el.textContent !== t) el.textContent = t; else if (!t) console.warn(`Translation key "${k}" not found for lang "${currentLanguage}".`); }); const ps = perSecondDisplayDiv?.querySelector('span[data-translate="perSec"]'); if(ps) { const pt = translations.perSec?.[currentLanguage] || '/ sec'; if (ps.textContent !== pt) ps.textContent = pt; } }
    function updateActiveLangButton() { if (!languageOptionsContainer) return; languageOptionsContainer.querySelectorAll('.lang-btn').forEach(b => { b.classList.toggle('active', b.dataset.lang === currentLanguage); }); }
    if (languageOptionsContainer) { languageOptionsContainer.addEventListener('click', (e) => { if (e.target.classList.contains('lang-btn')) { const l = e.target.dataset.lang; if (l) setLanguage(l); } }); } else { console.error("Language options container not found."); }

    // --- –õ–æ–≥–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã ---
    function checkReferralAndBonus() { try { const sp = tg.initDataUnsafe?.start_param; const up = new URLSearchParams(window.location.search); const cp = up.get('claimBonus'); console.log("Launch Params:", { sp, cp }); if (cp) { handleBonusClaim(cp); cleanBonusUrlParam(); } else if (sp && !isNaN(parseInt(sp))) { const cuid = tg.initDataUnsafe?.user?.id?.toString(); if (sp !== cuid) { handleNewReferral(sp); } else { console.log("User opened via own ref link."); } } } catch (e) { console.error("Error checking ref params:", e); } }
    function handleNewReferral(invId) { console.log(`Handling new referral from ${invId}.`); /* TODO: Implement logic */ }
    function handleBonusClaim(refId) { console.log(`Handling bonus claim for referral ${refId}.`); /* TODO: Implement logic (likely backend) */ }
    function cleanBonusUrlParam() { try { const url = new URL(window.location); if (url.searchParams.has('claimBonus')) { url.searchParams.delete('claimBonus'); window.history.replaceState({}, document.title, url); console.log("claimBonus param removed from URL."); } } catch (e) { console.error("Error cleaning URL:", e); } }
    inviteFriendBtn.addEventListener('click', () => { if (isBlocked) { showTemporaryNotification(translations.actionBlocked[currentLanguage], "error"); return; } if (tg.isVersionAtLeast('6.1')) { const uid = tg.initDataUnsafe?.user?.id; const bot = tg.initDataUnsafe?.bot?.username; if (!uid || !bot) { console.error("User ID or Bot username missing for referral link."); showTemporaryNotification(translations.inviteLinkError[currentLanguage], "error"); return; } const url = `https://t.me/${bot}/${tg.WebApp.name}?startapp=${uid}`; const txt = translations.shareText?.[currentLanguage] || 'Join my Alchemy Lab!'; console.log("Sharing:", { url, txt }); try { tg.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(url)}&text=${encodeURIComponent(txt)}`); tg.HapticFeedback?.impactOccurred('light'); } catch (e) { console.error("Error opening share link:", e); showTemporaryNotification(translations.inviteLinkError[currentLanguage], "error"); } } else { console.warn("Share feature potentially unavailable."); showTemporaryNotification(translations.referralRegErrorFunc[currentLanguage], "warning"); } });

    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–ó–∞–≥—Ä—É–∑–∫–∞ ---
    let saveTimeout = null;
    function saveGame(immediate = false) {
        if (!tg?.CloudStorage || typeof tg.CloudStorage.setItem !== 'function') {
            // –ï—Å–ª–∏ CloudStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º (–æ—à–∏–±–∫–∏ –ª–æ–≥–≥–∏—Ä—É—é—Ç—Å—è –≤ loadGame)
            // console.warn("[Save] CloudStorage unavailable. Skipping save.");
            return;
        }

        const saveData = () => {
            console.log("[Save] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...");
            let vld = true;
            // --- –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ---
            if (!Number.isFinite(essence) || essence < 0) { console.warn(`[Save Valid] –ù–µ–≤–µ—Ä–Ω–∞—è —ç—Å—Å–µ–Ω—Ü–∏—è ${essence}. –°–±—Ä–æ—Å –¥–æ 0.`); essence = 0; vld = false; }
            if (!Number.isFinite(gems) || gems < 0) { console.warn(`[Save Valid] –ù–µ–≤–µ—Ä–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã ${gems}. –°–±—Ä–æ—Å –¥–æ 0.`); gems = 0; vld = false; }
            if (!Array.isArray(ownedSkins) || !ownedSkins.includes('default')) { console.warn(`[Save Valid] –ù–µ–≤–µ—Ä–Ω—ã–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Å–∫–∏–Ω—ã ${ownedSkins}. –°–±—Ä–æ—Å –¥–æ ['default'].`); ownedSkins = ['default']; if (activeSkinId !== 'default') activeSkinId = 'default'; vld = false; }
            if (typeof activeSkinId !== 'string' || !ownedSkins.includes(activeSkinId)) { console.warn(`[Save Valid] –ù–µ–≤–µ—Ä–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω ${activeSkinId}. –°–±—Ä–æ—Å –¥–æ 'default'.`); activeSkinId = 'default'; vld = false; }
            upgrades.forEach(u => { if (!Number.isFinite(u.currentLevel) || u.currentLevel < 0) { console.warn(`[Save Valid] –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–µ–Ω–∏—è ${u.id}: ${u.currentLevel}. –°–±—Ä–æ—Å –¥–æ 0.`); u.currentLevel = 0; vld = false; } });
            // --- –ö–æ–Ω–µ—Ü –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ---

            if (!vld) console.warn("[Save] –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.");

            const gs = {
                essence: essence,
                gems: gems,
                upgrades: upgrades.map(u => ({ id: u.id, level: u.currentLevel })),
                language: currentLanguage,
                ownedSkins: ownedSkins,
                activeSkinId: activeSkinId,
                bonusClaimed: bonusClaimed,
                saveVersion: 1
            };

            try {
                const gss = JSON.stringify(gs);
                // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—ã–∑–æ–≤ setItem –≤ try...catch, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ç–æ–∂–µ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
                tg.CloudStorage.setItem('gameState', gss, (err, ok) => {
                    if (err) {
                        console.error("[Save Callback] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ setItem:", err);
                        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ catch –Ω–∏–∂–µ,
                        // –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å JSON.stringify –∏–ª–∏ —Å–∞–º–∏–º –≤—ã–∑–æ–≤–æ–º.
                        // –û—à–∏–±–∫–∏ —Ç–∏–ø–∞ "WebAppMethodUnsupported" –±—É–¥—É—Ç –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã –∑–¥–µ—Å—å.
                    }
                    /* else if (ok) console.log("[Save Callback] –£—Å–ø–µ—à–Ω–æ."); */
                    /* else console.warn("[Save Callback] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."); */
                });
            } catch (e) {
                // --- –ò–ó–ú–ï–ù–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ ---
                console.error("[Save] –û—à–∏–±–∫–∞ JSON.stringify –∏–ª–∏ –≤—ã–∑–æ–≤–∞ setItem:", e);
                try {
                    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    const errMsg = translations?.saveCritError?.[currentLanguage] ?? "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!";
                    showTemporaryNotification(errMsg, "error");
                } catch (notifyError) {
                    // –ï—Å–ª–∏ –¥–∞–∂–µ –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –µ–µ
                    console.error("[Save] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", notifyError);
                }
                // --------------------------------------------------------
            }
            saveTimeout = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        };

        // –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if (saveTimeout) clearTimeout(saveTimeout);
        if (immediate) {
            saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        } else {
            saveTimeout = setTimeout(saveData, 1000); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        }
    }

    function loadGame() {
        console.log("[Load] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏...");
        isBlocked = false; // –°–±—Ä–æ—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        warningCount = 0;
        if (cauldronElement) cauldronElement.classList.remove('blocked-cauldron');
        let setupDone = false; // –§–ª–∞–≥, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞

        const postSetup = (isNew = false) => {
            if (setupDone) return; // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            console.log("[Load] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç-–∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...");
            if (isNew) {
                console.log("[Load] –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã.");
                resetGameData(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –∏–≥—Ä–∞
            }
            recalculateBonuses(); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —É–ª—É—á—à–µ–Ω–∏–π
            applyTranslations(); // –ü—Ä–∏–º–µ–Ω—è–µ–º —è–∑—ã–∫
            updateLiquidColor(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∂–∏–¥–∫–æ—Å—Ç–∏
            visualLiquidLevel = LIQUID_MIN_LEVEL; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∂–∏–¥–∫–æ—Å—Ç–∏
            lastInteractionTime = Date.now(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            applyCauldronSkin(); // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–∏–Ω –∫–æ–ª–±—ã
            updateDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            checkReferralAndBonus(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            console.log(`[Load] –ü–æ—Å—Ç-–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ: E:${formatNumber(essence)}, G:${gems}, Lng:${currentLanguage}, Skin:${activeSkinId}, BonusClaimed:${bonusClaimed}`);
            setupDone = true;
        };

        if (!tg?.CloudStorage || typeof tg.CloudStorage.getItem !== 'function') {
            console.warn("[Load] CloudStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã.");
            postSetup(true); // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ –Ω–æ–≤—É—é –∏–≥—Ä—É
            showTemporaryNotification("–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", "warning");
            updateBonusButtonVisibility(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return; // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        }

        try {
            tg.CloudStorage.getItem('gameState', (err, val) => {
                console.log("[Load Callback] –û—Ç–≤–µ—Ç –æ—Ç CloudStorage –ø–æ–ª—É—á–µ–Ω.");
                let reset = false; // –§–ª–∞–≥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞ –Ω–æ–≤—É—é –∏–≥—Ä—É

                if (err) {
                    console.error("[Load Callback] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", err);
                    if (err.message?.includes("STORAGE_KEY_CLOUD_NOT_FOUND")) {
                        console.log("[Load Callback] –ö–ª—é—á 'gameState' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–æ–≤–∞—è –∏–≥—Ä–∞.");
                    } else if (err.message?.includes("Unsupported")) {
                        console.warn("[Load Callback] CloudStorage.getItem –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.");
                        showTemporaryNotification("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", "warning");
                    } else {
                        showTemporaryNotification(translations.loadError[currentLanguage], "error");
                    }
                    reset = true; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω–æ–≤—É—é –∏–≥—Ä—É –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
                } else if (val) {
                    console.log(`[Load Callback] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã (${val.length} –±–∞–π—Ç). –ü–∞—Ä—Å–∏–Ω–≥...`);
                    try {
                        const ss = JSON.parse(val); // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É JSON
                        console.log("[Load Parse] OK:", ss);

                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                        essence = Number(ss.essence) || 0;
                        if (!Number.isFinite(essence) || essence < 0) { console.warn("[Load Valid] essence -> 0"); essence = 0; }
                        gems = Number(ss.gems) || 0;
                        if (!Number.isFinite(gems) || gems < 0) { console.warn("[Load Valid] gems -> 0"); gems = 0; }
                        currentLanguage = ss.language || 'ru';
                        if (!translations.greetingBase[currentLanguage]) { console.warn(`[Load Valid] —è–∑—ã–∫ '${ss.language}' -> ru`); currentLanguage = 'ru'; }

                        // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–≤–Ω–∏ —É–ª—É—á—à–µ–Ω–∏–π
                        if (Array.isArray(ss.upgrades)) {
                            upgrades.forEach(u => {
                                const savedUpgrade = ss.upgrades.find(s => s.id === u.id);
                                const level = Number(savedUpgrade?.level);
                                u.currentLevel = (Number.isFinite(level) && level >= 0) ? level : 0;
                                if (u.currentLevel !== 0 && !(Number.isFinite(level) && level >= 0)) console.warn(`[Load Valid] —É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à. ${u.id} (${level}) -> 0`);
                            });
                        } else {
                            console.warn("[Load Valid] –º–∞—Å—Å–∏–≤ —É–ª—É—á—à–µ–Ω–∏–π –Ω–µ–≤–µ—Ä–Ω—ã–π -> –≤—Å–µ —É—Ä–æ–≤–Ω–∏ 0");
                            upgrades.forEach(u => u.currentLevel = 0);
                        }

                        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–∏–Ω—ã
                        ownedSkins = Array.isArray(ss.ownedSkins) ? ss.ownedSkins : ['default'];
                        if (!ownedSkins.includes('default')) { ownedSkins.push('default'); console.warn("[Load Valid] –¥–æ–±–∞–≤–ª–µ–Ω —Å–∫–∏–Ω 'default'."); }
                        activeSkinId = (typeof ss.activeSkinId === 'string' && ownedSkins.includes(ss.activeSkinId)) ? ss.activeSkinId : 'default';
                        if (ss.activeSkinId && !ownedSkins.includes(ss.activeSkinId)) console.warn(`[Load Valid] –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω '${ss.activeSkinId}' –Ω–µ –∫—É–ø–ª–µ–Ω -> 'default'`);

                        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
                        bonusClaimed = ss.bonusClaimed === true; // –°—Ç—Ä–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ true
                        if (bonusClaimed) console.log("[Load] –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å —É–∂–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω —Ä–∞–Ω–µ–µ.");

                        console.log("[Load] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");

                    } catch (pe) {
                        console.error("[Load Parse] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", pe, "–î–∞–Ω–Ω—ã–µ:", val);
                        showTemporaryNotification(translations.readError[currentLanguage], "error");
                        reset = true; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã
                    }
                } else {
                    // –ï—Å–ª–∏ val –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ—Ç
                    console.log("[Load Callback] –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç CloudStorage. –ù–æ–≤–∞—è –∏–≥—Ä–∞.");
                    reset = true;
                }

                // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å—Ç-–Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                postSetup(reset);
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –±–æ–Ω—É—Å–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                updateBonusButtonVisibility();

            }); // –ö–æ–Ω–µ—Ü CloudStorage.getItem callback
        } catch (se) {
            console.error("[Load Try] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ CloudStorage.getItem:", se);
            showTemporaryNotification("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É.", "error");
            postSetup(true); // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
             // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –±–æ–Ω—É—Å–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            updateBonusButtonVisibility();
        }
    }

    function resetGameData() {
        console.warn("–°–±—Ä–æ—Å –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!");
        essence = 0;
        gems = 0;
        upgrades.forEach(u => u.currentLevel = 0);
        ownedSkins = ['default'];
        activeSkinId = 'default';
        bonusClaimed = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –±–æ–Ω—É—Å–∞ –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
        isBlocked = false;
        warningCount = 0;
    }

    // --- –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
    function showTemporaryNotification(msg, type = "info", dur = 2500) { const oldN = document.querySelector('.notification'); if (oldN) oldN.remove(); const n = document.createElement('div'); n.className = `notification ${type}`; n.textContent = msg; document.body.appendChild(n); requestAnimationFrame(() => { n.style.opacity = '1'; n.style.transform = 'translate(-50%, 0)'; }); setTimeout(() => { n.style.opacity = '0'; n.style.transform = 'translate(-50%, 10px)'; setTimeout(() => { if (n.parentNode) n.remove(); }, 500); }, dur); }

    // --- –§—É–Ω–∫—Ü–∏—è: –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–Ω–æ–ø–∫–∏ –±–æ–Ω—É—Å–∞ ---
    function updateBonusButtonVisibility() {
        if (!oneTimeBonusBtn) return; // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (bonusClaimed) {
            // –ï—Å–ª–∏ –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å hidden
            oneTimeBonusBtn.classList.add('hidden');
        } else {
            // –ï—Å–ª–∏ –±–æ–Ω—É—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω, —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å hidden
            oneTimeBonusBtn.classList.remove('hidden');
        }
    }
    // -------------------------------------------------------

    // --- –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    loadGame(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

    // --- –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
    setInterval(() => saveGame(false), 15000); // Debounced save every 15s
    window.addEventListener('beforeunload', () => saveGame(true)); // Immediate save on close
    document.addEventListener('visibilitychange', () => { if (document.visibilityState === 'hidden') saveGame(true); }); // Immediate save on hide
    if (tg?.onEvent) { tg.onEvent('viewportChanged', (e) => { if (e && e.isStateStable) { console.log("Viewport —Å—Ç–∞–±–∏–ª–µ–Ω, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ."); saveGame(false); } }); }
    // --- –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∂–∏–¥–∫–æ—Å—Ç–∏ ---
    let liquidColorInterval = setInterval(updateLiquidColor, 5 * 60 * 1000);

    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞ ---
    if (oneTimeBonusBtn) {
        oneTimeBonusBtn.addEventListener('click', () => {
            if (isBlocked) {
                 // –ò—Å–ø–æ–ª—å–∑—É–µ–º !! –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ boolean –∏ ?? –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                 const message = translations.actionBlocked?.[currentLanguage] ?? "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.";
                 showTemporaryNotification(message, "error");
                 return; // –ù–µ –¥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å, –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω
            if (!bonusClaimed) {
                console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞!");
                tg.HapticFeedback?.notificationOccurred('success'); // –í–∏–±—Ä–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞

                // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
                essence += 100000;
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω
                bonusClaimed = true;

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                const successMessage = translations.bonusClaimSuccess?.[currentLanguage] ?? "+100K üß™ –ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!";
                showTemporaryNotification(successMessage, "success", 3000);

                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ (—Å–∫—Ä—ã–≤–∞–µ–º –µ–µ)
                updateBonusButtonVisibility();
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç—Å—Å–µ–Ω—Ü–∏–∏
                updateDisplay();
                // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
                saveGame(true);

            } else {
                // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –ø–æ—á–µ–º—É-—Ç–æ –≤–∏–¥–∏–º–∞, –Ω–æ –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω
                console.log("–ë–æ–Ω—É—Å —É–∂–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω —Ä–∞–Ω–µ–µ.");
                tg.HapticFeedback?.notificationOccurred('warning'); // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                 // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —è–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                // const claimedMessage = translations.bonusClaimedAlready?.[currentLanguage] ?? "–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω.";
                // showTemporaryNotification(claimedMessage, "info");
            }
        });
    } else {
        console.error("–ö–Ω–æ–ø–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }
    // -----------------------------------------------------------


    // --- –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (—Ä–µ–¥–∫–æ –Ω—É–∂–Ω–æ) ---
    // window.addEventListener('unload', () => {
    //     if (bubbleInterval) clearInterval(bubbleInterval);
    //     if (autoClickInterval) clearInterval(autoClickInterval);
    //     if (uiInterval) clearInterval(uiInterval);
    //     if (liquidColorInterval) clearInterval(liquidColorInterval);
    // });

}); // --- –ö–û–ù–ï–¶ DOMContentLoaded ---