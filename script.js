```javascript
// –§–∞–π–ª: script.js
document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    const tg = window.Telegram.WebApp;
    tg.ready();
    tg.expand();

    // --- –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã DOM ---
    const essenceCountElement = document.getElementById('essence-count');
    const essencePerSecondElement = document.getElementById('essence-per-second');
    const gemCountElement = document.getElementById('gem-count');
    const cauldronElement = document.getElementById('cauldron');
    const clickFeedbackContainer = document.getElementById('click-feedback-container');
    const openUpgradesBtn = document.getElementById('open-upgrades-btn');
    const closeUpgradesBtn = document.getElementById('close-upgrades-btn');
    const upgradesPanel = document.getElementById('upgrades-panel');
    const upgradesListElement = document.getElementById('upgrades-list');
    const userGreetingElement = document.getElementById('user-greeting');
    const inviteFriendBtn = document.getElementById('invite-friend-btn');
    const bubblesContainer = document.getElementById('bubbles-container');
    const perSecondDisplayDiv = document.getElementById('per-second-display');
    const settingsBtn = document.getElementById('settings-btn');
    const settingsPanel = document.getElementById('settings-panel');
    const closeSettingsBtn = document.getElementById('close-settings-btn');
    const languageOptionsContainer = settingsPanel ? settingsPanel.querySelector('.language-options') : null;
    const shopBtn = document.getElementById('shop-btn');
    const shopPanel = document.getElementById('shop-panel');
    const closeShopBtn = document.getElementById('close-shop-btn');
    const skinsListElement = document.getElementById('skins-list');
    const shopGemCountElement = document.getElementById('shop-gem-count');
    // --- –ù–æ–≤—ã–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∑–≤—É–∫–∞ ---
    const soundToggleCheckbox = document.getElementById('sound-toggle-checkbox');
    const volumeSlider = document.getElementById('volume-slider');
    const volumeValueDisplay = document.getElementById('volume-value-display');


    // --- –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ) ---
    let essence = 0;
    let essencePerClick = 1;
    let essencePerSecond = 0;
    let gems = 0;
    let ownedSkins = ['default']; // –ò–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –≤–ª–∞–¥–µ–µ—Ç —Å–∫–∏–Ω–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let activeSkinId = 'default'; // –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let isSoundEnabled = true;  // –ó–≤—É–∫ –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let soundVolume = 0.5;    // –ì—Ä–æ–º–∫–æ—Å—Ç—å 50% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1)
    const GEM_AWARD_CHANCE = 0.03;
    const GEMS_PER_AWARD = 1;
    let currentLanguage = 'ru'; // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let userName = tg.initDataUnsafe?.user?.first_name || null;

    // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞ ---
    let lastClickTime = 0;
    const MIN_CLICK_INTERVAL = 67; // ~15 clicks per second max theoretical
    const MAX_WARNINGS = 3;
    let warningCount = 0;
    let isBlocked = false;

    // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∂–∏–¥–∫–æ—Å—Ç–∏ ---
    let visualLiquidLevel = 10;
    const LIQUID_MIN_LEVEL = 10;
    const LIQUID_MAX_LEVEL = 95;
    const LIQUID_INCREASE_PER_CLICK = 1.0;
    const LIQUID_DECAY_RATE = 0.15; // Decay per interval when idle
    const LIQUID_UPDATE_INTERVAL = 100; // ms
    const IDLE_TIMEOUT = 500; // ms of inactivity before decay starts
    let lastInteractionTime = 0;

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–∞ (–ò–°–ü–†–ê–í–õ–ï–ù –ü–£–¢–¨) ---
    let clickSound = null;
    const soundFilePath = 'click.mp3'; // <- –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–∞–ø–æ–∫
    try {
        console.log(`[Sound] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤—É–∫–∞: ${soundFilePath}`);
        clickSound = new Audio(soundFilePath);
        clickSound.preload = 'auto';
        clickSound.load();
        // –¢–µ—Å—Ç–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–∏—Ö–æ–≥–æ –∑–≤—É–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –±—Ä–∞—É–∑–µ—Ä–æ–º)
        clickSound.volume = 0.01;
        clickSound.play().then(() => {
            console.log("[Sound] –ó–≤—É–∫ –∫–ª–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –º–æ–∂–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è.");
            clickSound.pause(); // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            clickSound.currentTime = 0; // –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞ –Ω–∞—á–∞–ª–æ
        }).catch(error => {
            if (error.name === 'NotAllowedError') {
                console.warn("[Sound] –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –±—Ä–∞—É–∑–µ—Ä–æ–º –¥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–≤—É–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.");
            } else if (error.name === 'NotSupportedError'){
                console.error(`[Sound] –§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ (${soundFilePath}) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º.`);
                isSoundEnabled = false; // –û—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            }
            else {
                console.error(`[Sound] –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫ (${error.name}):`, error.message);
                // –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ —Å–æ–≤—Å–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                // isSoundEnabled = false;
            }
        });
    } catch (error) {
        console.error("[Sound] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Audio –æ–±—ä–µ–∫—Ç–∞:", error);
        isSoundEnabled = false; // –û—Ç–∫–ª—é—á–∞–µ–º –∑–≤—É–∫, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ–∑–¥–∞—Ç—å Audio –æ–±—ä–µ–∫—Ç
    }

    // --- –û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ ---
    const translations = {
        // ... (–≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã, –∫–∞–∫ –±—ã–ª–∏ —Ä–∞–Ω—å—à–µ) ...
        greetingBase: { ru: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", en: "Laboratory" },
        perSec: { ru: "–≤ —Å–µ–∫", en: "/ sec" },
        upgradesButton: { ru: "–£–ª—É—á—à–µ–Ω–∏—è", en: "Upgrades" },
        inviteFriendsButton: { ru: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", en: "Invite Friends" },
        upgradesTitle: { ru: "–£–ª—É—á—à–µ–Ω–∏—è", en: "Upgrades" },
        settingsTitle: { ru: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", en: "Settings" },
        languageTitle: { ru: "–Ø–∑—ã–∫", en: "Language" },
        buyButton: { ru: "–ö—É–ø–∏—Ç—å", en: "Buy" },
        requirementPrefix: { ru: "–ù—É–∂–Ω–æ", en: "Need" },
        requirementInfoPrefix: { ru: "–¢—Ä–µ–±—É–µ—Ç—Å—è", en: "Requires" },
        tooFastClick: { ru: "–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!", en: "Clicking too fast!" },
        autoclickerBlocked: { ru: "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –ö–ª–∏–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", en: "Autoclicker detected! Clicking blocked." },
        actionBlocked: { ru: "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.", en: "Action blocked." },
        needMoreEssence: { ru: "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —ç—Å—Å–µ–Ω—Ü–∏–∏!", en: "Need more essence!" },
        invalidCostError: { ru: "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è!", en: "Error: Invalid upgrade cost!" },
        notEnoughEssence: { ru: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Å—Å–µ–Ω—Ü–∏–∏!", en: "Not enough essence!" },
        loadErrorStartNew: { ru: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.", en: "Failed to load progress. Starting new game." },
        loadError: { ru: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!", en: "Error loading progress!" },
        readError: { ru: "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", en: "Error reading save data!" },
        saveCritError: { ru: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", en: "Critical save error!" },
        welcomeReferral: { ru: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –±–æ–Ω—É—Å.", en: "Welcome! Your inviter gets a bonus." },
        referralRegErrorBot: { ru: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–æ—à–∏–±–∫–∞ –±–æ—Ç–∞).", en: "Could not register invite (bot error)." },
        referralRegErrorFunc: { ru: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞).", en: "Could not register invite (feature unavailable)." },
        bonusCheckError: { ru: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–Ω—É—Å–∞!", en: "Bonus check error!" },
        bonusAlreadyClaimed: { ru: "–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω.", en: "Bonus already claimed." },
        bonusReasonFriend: { ru: "–∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!", en: "for invited friend!" },
        bonusAddError: { ru: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!", en: "Bonus add error!" },
        inviteLinkError: { ru: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", en: "Failed to create invite link." },
        shareText: { ru: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –º–æ–µ–π –ê–ª—Ö–∏–º–∏—á–µ—Å–∫–æ–π –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –≤ Telegram! üß™‚öóÔ∏è –ö–ª–∏–∫–∞–π –∏ —Å–æ–∑–¥–∞–≤–∞–π —ç–ª–∏–∫—Å–∏—Ä—ã!', en: 'Join my Alchemy Lab in Telegram! üß™‚öóÔ∏è Click and create elixirs!' },
        shopTitle: { ru: "–ú–∞–≥–∞–∑–∏–Ω", en: "Shop" },
        yourGems: { ru: "–í–∞—à–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã:", en: "Your Gems:" },
        selectButton: { ru: "–í—ã–±—Ä–∞—Ç—å", en: "Select" },
        selectedButton: { ru: "–í—ã–±—Ä–∞–Ω–æ", en: "Selected" },
        notEnoughGems: { ru: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!", en: "Not enough gems!" },
        skinPurchaseSuccess: { ru: "–°–∫–∏–Ω –∫—É–ø–ª–µ–Ω!", en: "Skin purchased!" },
        skinSelected: { ru: "–°–∫–∏–Ω –≤—ã–±—Ä–∞–Ω!", en: "Skin selected!" },
        skin_default_name: { ru: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–ª–±–∞", en: "Standard Flask" },
        skin_gold_name: { ru: "–ó–æ–ª–æ—Ç–∞—è –∫–æ–ª–±–∞", en: "Golden Flask" },
        skin_crystal_name: { ru: "–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —Å–æ—Å—É–¥", en: "Crystal Vial" },
        skin_obsidian_name: { ru: "–û–±—Å–∏–¥–∏–∞–Ω–æ–≤–∞—è —Ä–µ—Ç–æ—Ä—Ç–∞", en: "Obsidian Retort" },
        soundTitle: { ru: "–ó–≤—É–∫", en: "Sound" },
        soundEnableLabel: { ru: "–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫:", en: "Enable Sound:" },
        volumeLabel: { ru: "–ì—Ä–æ–º–∫–æ—Å—Ç—å:", en: "Volume:" },
        upgrade_click1_name: { ru: "–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", en: "Improved Recipe" },
        upgrade_click1_desc: { ru: "+1 –∫ –∫–ª–∏–∫—É", en: "+1 per click" },
        upgrade_auto1_name: { ru: "–ì–æ–º—É–Ω–∫—É–ª-–ü–æ–º–æ—â–Ω–∏–∫", en: "Homunculus Helper" },
        upgrade_auto1_desc: { ru: "+1 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+1 per second" },
        upgrade_click2_name: { ru: "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—É–ø–∫–∞", en: "Enchanted Mortar" },
        upgrade_click2_desc: { ru: "+5 –∫ –∫–ª–∏–∫—É", en: "+5 per click" },
        upgrade_auto2_name: { ru: "–ü—É–∑—ã—Ä—è—â–∏–π—Å—è –∫–æ—Ç–µ–ª", en: "Bubbling Cauldron" },
        upgrade_auto2_desc: { ru: "+4 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+4 per second" },
        upgrade_click3_name: { ru: "–ê–ª–µ–º–±–∏–∫ –ú–∞—Å—Ç–µ—Ä–∞", en: "Master's Alembic" },
        upgrade_click3_desc: { ru: "+25 –∫ –∫–ª–∏–∫—É", en: "+25 per click" },
        upgrade_auto3_name: { ru: "–ü—Ä–∏–∑–≤–∞–Ω–Ω—ã–π –ò—Ñ—Ä–∏—Ç", en: "Summoned Ifrit" },
        upgrade_auto3_desc: { ru: "+20 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+20 per second" },
        upgrade_auto4_name: { ru: "–°–∞–¥ –ê–ª—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –†–∞—Å—Ç–µ–Ω–∏–π", en: "Garden of Alchemical Plants" },
        upgrade_auto4_desc: { ru: "+50 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+50 per second" },
        upgrade_click4_name: { ru: "–°–∏–ª–∞ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–≥–æ –ö–∞–º–Ω—è (–æ—Å–∫–æ–ª–æ–∫)", en: "Power of the Philosopher's Stone (Shard)" },
        upgrade_click4_desc: { ru: "+150 –∫ –∫–ª–∏–∫—É", en: "+150 per click" },
        upgrade_auto5_name: { ru: "–≠—Ñ–∏—Ä–Ω—ã–π –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä", en: "Aether Concentrator" },
        upgrade_auto5_desc: { ru: "+250 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+250 per second" },
        upgrade_auto6_name: { ru: "–ü–æ—Ä—Ç–∞–ª –≤ –º–∏—Ä –≠—Å—Å–µ–Ω—Ü–∏–∏", en: "Portal to the Essence Realm" },
        upgrade_auto6_desc: { ru: "+1000 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+1000 per second" },
        upgrade_click5_name: { ru: "–ü—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ –¢–≤–æ—Ä—Ü–∞", en: "Creator's Touch" },
        upgrade_click5_desc: { ru: "+1000 –∫ –∫–ª–∏–∫—É", en: "+1000 per click" },
        upgrade_auto7_name: { ru: "–ü–æ—Ç–æ–∫ –ß–∏—Å—Ç–æ–π –ú–∞–≥–∏–∏", en: "Flow of Pure Magic" },
        upgrade_auto7_desc: { ru: "+5000 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+5000 per second" },
    };

    // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π ---
    const upgrades = [
        { id: 'click1', nameKey: 'upgrade_click1_name', descKey: 'upgrade_click1_desc', baseCost: 15, costMultiplier: 1.4, type: 'click', value: 1, currentLevel: 0, requiredEssence: 0 },
        { id: 'auto1', nameKey: 'upgrade_auto1_name', descKey: 'upgrade_auto1_desc', baseCost: 60, costMultiplier: 1.6, type: 'auto', value: 1, currentLevel: 0, requiredEssence: 0 },
        { id: 'click2', nameKey: 'upgrade_click2_name', descKey: 'upgrade_click2_desc', baseCost: 300, costMultiplier: 1.5, type: 'click', value: 5, currentLevel: 0, requiredEssence: 500 },
        { id: 'auto2', nameKey: 'upgrade_auto2_name', descKey: 'upgrade_auto2_desc', baseCost: 750, costMultiplier: 1.7, type: 'auto', value: 4, currentLevel: 0, requiredEssence: 700 },
        { id: 'click3', nameKey: 'upgrade_click3_name', descKey: 'upgrade_click3_desc', baseCost: 5000, costMultiplier: 1.6, type: 'click', value: 25, currentLevel: 0, requiredEssence: 10000 },
        { id: 'auto3', nameKey: 'upgrade_auto3_name', descKey: 'upgrade_auto3_desc', baseCost: 12000, costMultiplier: 1.8, type: 'auto', value: 20, currentLevel: 0, requiredEssence: 15000 },
        { id: 'auto4', nameKey: 'upgrade_auto4_name', descKey: 'upgrade_auto4_desc', baseCost: 30000, costMultiplier: 1.9, type: 'auto', value: 50, currentLevel: 0, requiredEssence: 40000 },
        { id: 'click4', nameKey: 'upgrade_click4_name', descKey: 'upgrade_click4_desc', baseCost: 250000, costMultiplier: 1.7, type: 'click', value: 150, currentLevel: 0, requiredEssence: 500000 },
        { id: 'auto5', nameKey: 'upgrade_auto5_name', descKey: 'upgrade_auto5_desc', baseCost: 1000000, costMultiplier: 2.0, type: 'auto', value: 250, currentLevel: 0, requiredEssence: 1200000 },
        { id: 'auto6', nameKey: 'upgrade_auto6_name', descKey: 'upgrade_auto6_desc', baseCost: 5000000, costMultiplier: 2.2, type: 'auto', value: 1000, currentLevel: 0, requiredEssence: 6000000 },
        { id: 'click5', nameKey: 'upgrade_click5_name', descKey: 'upgrade_click5_desc', baseCost: 10000000, costMultiplier: 1.8, type: 'click', value: 1000, currentLevel: 0, requiredEssence: 15000000 },
        { id: 'auto7', nameKey: 'upgrade_auto7_name', descKey: 'upgrade_auto7_desc', baseCost: 50000000, costMultiplier: 2.1, type: 'auto', value: 5000, currentLevel: 0, requiredEssence: 60000000 },
    ];

    // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–∏–Ω–æ–≤ ---
    const availableSkins = [
        { id: 'default', nameKey: 'skin_default_name', cost: 0, cssClass: 'skin-default' },
        { id: 'gold', nameKey: 'skin_gold_name', cost: 15, cssClass: 'skin-gold' },
        { id: 'crystal', nameKey: 'skin_crystal_name', cost: 50, cssClass: 'skin-crystal' },
        { id: 'obsidian', nameKey: 'skin_obsidian_name', cost: 100, cssClass: 'skin-obsidian' },
    ];

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—É–∑—ã—Ä—å–∫–æ–≤ ---
    function createBubble() { if (!bubblesContainer) return; const b = document.createElement('div'); b.classList.add('bubble'); const s = Math.random() * 8 + 6; const d = Math.random() * 2.5 + 3; const l = Math.random() * 1.5; const h = Math.random() * 90 + 5; b.style.width = `${s}px`; b.style.height = `${s}px`; b.style.left = `${h}%`; b.style.animationDuration = `${d}s`; b.style.animationDelay = `${l}s`; bubblesContainer.appendChild(b); setTimeout(() => { b.remove(); }, (d + l) * 1000 + 100); }
    setInterval(createBubble, 500);

    // --- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∞ –∂–∏–¥–∫–æ—Å—Ç–∏ –∏ –ø—É–∑—ã—Ä—å–∫–æ–≤ ---
    function updateLiquidLevelVisual(percentage) { const l = Math.max(LIQUID_MIN_LEVEL, Math.min(LIQUID_MAX_LEVEL, percentage)); if (cauldronElement) { cauldronElement.style.setProperty('--liquid-level', `${l}%`); if(bubblesContainer) { bubblesContainer.style.height = `${l}%`; } } else { console.warn("–≠–ª–µ–º–µ–Ω—Ç –∫–æ–ª–±—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏."); } }

    // --- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI ---
    function updateDisplay() { if (essenceCountElement) essenceCountElement.textContent = formatNumber(Math.floor(essence)); if (essencePerSecondElement && perSecondDisplayDiv) { essencePerSecondElement.textContent = formatNumber(essencePerSecond); perSecondDisplayDiv.style.display = essencePerSecond > 0 ? 'block' : 'none'; } if (gemCountElement) gemCountElement.textContent = formatNumber(gems); if (shopPanel && !shopPanel.classList.contains('hidden') && shopGemCountElement) { shopGemCountElement.textContent = formatNumber(gems); } if (upgradesPanel && !upgradesPanel.classList.contains('hidden')) renderUpgrades(); }

    // --- –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª ---
    function formatNumber(num) { if (isNaN(num) || !Number.isFinite(num)) { console.warn("formatNumber –ø–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", num); return "ERR"; } const abbreviations = ["", "K", "M", "B", "T", "q", "Q", "s", "S", "O", "N", "d", "U"]; if (num < 1000) return num.toString(); let i = 0; while (num >= 1000 && i < abbreviations.length - 1) { num /= 1000; i++; } const formattedNum = num % 1 === 0 ? num.toString() : num.toFixed(1); return formattedNum + abbreviations[i]; }

    // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "+N" –ø—Ä–∏ –∫–ª–∏–∫–µ ---
    function showClickFeedback(amount, type = 'essence') { if (isBlocked || !clickFeedbackContainer) return; const f = document.createElement('div'); f.className = 'click-feedback'; const fmt = formatNumber(amount); if (type === 'gem') { const svgIconHtml = `<span class="gem-icon" style="display:inline-flex; vertical-align: middle; margin-left: 4px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="1em" height="1em" fill="var(--gem-color)"><path d="M12 1.68l-8 8.42L12 22.32l8-8.42L12 1.68zm0 2.1l5.95 6.27L12 18.54l-5.95-6.27L12 3.78z M6.4 10.1L12 16.1l5.6-6H6.4z"></path></svg></span>`; f.innerHTML = `+${fmt}${svgIconHtml}`; f.style.fontSize = '1.3em'; f.style.fontWeight = 'bold'; f.style.color = 'var(--gem-color)'; } else { f.textContent = `+${fmt} üß™`; f.style.color = 'var(--accent-color)'; } const ox = Math.random() * 60 - 30; const oy = (type === 'gem') ? (Math.random() * 20 + 15) : (Math.random() * 20 - 10); f.style.left = `calc(50% + ${ox}px)`; f.style.top = `calc(50% + ${oy}px)`; clickFeedbackContainer.appendChild(f); setTimeout(() => { f.remove(); }, 950); }

    // --- –õ–æ–≥–∏–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ—Ç–ª—É ---
     if (cauldronElement) {
         cauldronElement.addEventListener('click', () => {
             const currentTime = Date.now();
             if (tg?.HapticFeedback) { tg.HapticFeedback.impactOccurred('light'); }

             if (isBlocked) {
                 showTemporaryNotification(translations.autoclickerBlocked?.[currentLanguage] || "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –ö–ª–∏–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", "error");
                 return;
             }

             if (currentTime - lastClickTime >= MIN_CLICK_INTERVAL) {
                 warningCount = 0;
                 lastInteractionTime = currentTime;

                 let clickAmount = essencePerClick;
                 if (Number.isFinite(clickAmount)) {
                     essence += clickAmount;
                     if (clickFeedbackContainer) showClickFeedback(clickAmount, 'essence');
                 } else {
                     console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ essencePerClick:", essencePerClick);
                 }

                 if (Math.random() < GEM_AWARD_CHANCE) {
                     gems += GEMS_PER_AWARD;
                     console.log(`–ü–æ–ª—É—á–µ–Ω ${GEMS_PER_AWARD} –∫—Ä–∏—Å—Ç–∞–ª–ª(–æ–≤)! –í—Å–µ–≥–æ: ${gems}`);
                     if (clickFeedbackContainer) showClickFeedback(GEMS_PER_AWARD, 'gem');
                     if (tg?.HapticFeedback) { tg.HapticFeedback.impactOccurred('medium'); }
                 }

                 visualLiquidLevel += LIQUID_INCREASE_PER_CLICK;
                 visualLiquidLevel = Math.min(visualLiquidLevel, LIQUID_MAX_LEVEL);
                 updateLiquidLevelVisual(visualLiquidLevel);
                 updateDisplay();

                 // --- –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –∫–ª–∏–∫–∞ ---
                 if (clickSound && isSoundEnabled) {
                     try {
                         clickSound.volume = soundVolume;
                         clickSound.currentTime = 0;
                         const playPromise = clickSound.play();
                         if (playPromise !== undefined) {
                             playPromise.catch(error => {
                                 // –ù–µ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                                 if (error.name !== 'NotAllowedError') {
                                     console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ –∫–ª–∏–∫–∞:", error);
                                 }
                             });
                         }
                     } catch (err) {
                         console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∑–≤—É–∫–∞ –∫–ª–∏–∫–∞:", err);
                     }
                 }

                 // Visual feedback for click
                 cauldronElement.style.transform = 'scale(0.95)';
                 setTimeout(() => { if (cauldronElement) cauldronElement.style.transform = 'scale(1)'; }, 80);

                 lastClickTime = currentTime;

             } else {
                 warningCount++;
                 lastInteractionTime = currentTime;
                 console.warn(`–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–π –∫–ª–∏–∫, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ${warningCount}/${MAX_WARNINGS}`);
                 showTemporaryNotification(`${translations.tooFastClick?.[currentLanguage] || "–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!"} (${warningCount}/${MAX_WARNINGS})`, "warning");
                 if (tg?.HapticFeedback) { tg.HapticFeedback.impactOccurred('medium'); }

                 if (warningCount >= MAX_WARNINGS) {
                     isBlocked = true;
                     console.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä.");
                     showTemporaryNotification(translations.autoclickerBlocked?.[currentLanguage] || "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –ö–ª–∏–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", "error");
                     if (tg?.HapticFeedback) { tg.HapticFeedback.notificationOccurred('error'); }
                     if (cauldronElement) cauldronElement.classList.add('blocked-cauldron');
                 }
             }
         });
     } else {
         console.error("–≠–ª–µ–º–µ–Ω—Ç –∫–æ–ª–±—ã –Ω–µ –Ω–∞–π–¥–µ–Ω!");
     }

    // --- –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ-–∫–ª–∏–∫–∞ ---
    setInterval(() => { if (!isBlocked && essencePerSecond > 0 && Number.isFinite(essencePerSecond)) { const essenceToAdd = essencePerSecond / 10; if (Number.isFinite(essenceToAdd)) { essence += essenceToAdd; updateDisplay(); } else { console.warn("–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—Ä—Ü–∏—è —ç—Å—Å–µ–Ω—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥—É."); } } }, 100);

    // --- –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∂–∏–¥–∫–æ—Å—Ç–∏ ---
    setInterval(() => { const currentTime = Date.now(); if (currentTime - lastInteractionTime > IDLE_TIMEOUT && visualLiquidLevel > LIQUID_MIN_LEVEL) { visualLiquidLevel -= LIQUID_DECAY_RATE; visualLiquidLevel = Math.max(visualLiquidLevel, LIQUID_MIN_LEVEL); } updateLiquidLevelVisual(visualLiquidLevel); }, LIQUID_UPDATE_INTERVAL);

    // --- –õ–æ–≥–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π ---
    function calculateCost(upgrade) { if (!upgrade || typeof upgrade.baseCost !== 'number' || typeof upgrade.costMultiplier !== 'number' || typeof upgrade.currentLevel !== 'number') { console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:", upgrade); return Infinity; } return Math.floor(upgrade.baseCost * Math.pow(upgrade.costMultiplier, upgrade.currentLevel)); }
    function renderUpgrades() { if (!upgradesListElement) { console.error("–≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω!"); return; } upgradesListElement.innerHTML = ''; upgrades.sort((a, b) => (a.requiredEssence || 0) - (b.requiredEssence || 0)); if (upgrades.length === 0) { upgradesListElement.innerHTML = `<li><p>–£–ª—É—á—à–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.</p></li>`; return; } const currentEssenceFloored = Math.floor(essence); upgrades.forEach(upgrade => { const cost = calculateCost(upgrade); if (!Number.isFinite(cost)) { console.error("–ü—Ä–æ–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é:", upgrade.id); return; } const required = upgrade.requiredEssence || 0; const isLocked = currentEssenceFloored < required; const canAfford = currentEssenceFloored >= cost; const listItem = document.createElement('li'); if (isLocked) { listItem.classList.add('locked'); } else if (!canAfford) { listItem.classList.add('cannot-afford'); } const translatedName = translations[upgrade.nameKey]?.[currentLanguage] || upgrade.nameKey; const translatedDesc = translations[upgrade.descKey]?.[currentLanguage] || upgrade.descKey; const buyButtonText = translations.buyButton?.[currentLanguage] || "–ö—É–ø–∏—Ç—å"; const requirementPrefix = translations.requirementPrefix?.[currentLanguage] || "–ù—É–∂–Ω–æ"; const requirementInfoPrefix = translations.requirementInfoPrefix?.[currentLanguage] || "–¢—Ä–µ–±—É–µ—Ç—Å—è"; let buttonText = buyButtonText; let isButtonDisabled = false; if (isLocked) { isButtonDisabled = true; buttonText = `${requirementPrefix} ${formatNumber(required)} üß™`; } else if (!canAfford) { isButtonDisabled = true; } listItem.innerHTML = `<div class="upgrade-info"><h3>${translatedName} (–£—Ä. ${upgrade.currentLevel})</h3><p>${translatedDesc}</p><p class="upgrade-cost">–¶–µ–Ω–∞: ${formatNumber(cost)} üß™</p>${isLocked ? `<p class="requirement-info">${requirementInfoPrefix}: ${formatNumber(required)} üß™</p>` : ''}</div><button class="buy-upgrade-btn" data-upgrade-id="${upgrade.id}">${buttonText}</button>`; const buyButton = listItem.querySelector('.buy-upgrade-btn'); if (buyButton) { buyButton.disabled = isButtonDisabled; if (!isLocked) { buyButton.addEventListener('click', (event) => { event.stopPropagation(); if (!buyButton.disabled) { buyUpgrade(upgrade.id); } }); } } upgradesListElement.appendChild(listItem); }); }
    function buyUpgrade(upgradeId) { if (isBlocked) { showTemporaryNotification(translations.actionBlocked?.[currentLanguage] || "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.", "error"); return; } const upgrade = upgrades.find(up => up.id === upgradeId); if (!upgrade) { console.error("–£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:", upgradeId); return; } const required = upgrade.requiredEssence || 0; if (Math.floor(essence) < required) { showTemporaryNotification(`${translations.needMoreEssence?.[currentLanguage] || "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —ç—Å—Å–µ–Ω—Ü–∏–∏!"} ${formatNumber(required)} üß™`, "warning"); if (tg?.HapticFeedback) tg.HapticFeedback.notificationOccurred('warning'); return; } const cost = calculateCost(upgrade); if (!Number.isFinite(cost)) { showTemporaryNotification(translations.invalidCostError?.[currentLanguage] || "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è!", "error"); return; } if (essence >= cost) { essence -= cost; upgrade.currentLevel++; recalculateBonuses(); updateDisplay(); renderUpgrades(); saveGame(); if (tg?.HapticFeedback) { tg.HapticFeedback.impactOccurred('light'); } } else { showTemporaryNotification(translations.notEnoughEssence?.[currentLanguage] || "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Å—Å–µ–Ω—Ü–∏–∏!", "warning"); if (tg?.HapticFeedback) { tg.HapticFeedback.notificationOccurred('warning'); } } }
    function recalculateBonuses() { essencePerClick = 1; essencePerSecond = 0; upgrades.forEach(upgrade => { if (upgrade.currentLevel > 0 && Number.isFinite(upgrade.value) && typeof upgrade.type === 'string') { if (upgrade.type === 'click') { essencePerClick += upgrade.value * upgrade.currentLevel; } else if (upgrade.type === 'auto') { essencePerSecond += upgrade.value * upgrade.currentLevel; } } else if (upgrade.currentLevel > 0) { console.warn("–£–ª—É—á—à–µ–Ω–∏–µ –∏–º–µ–µ—Ç —É—Ä–æ–≤–µ–Ω—å > 0, –Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å–∞:", upgrade); } }); if (!Number.isFinite(essencePerClick) || essencePerClick < 1) { console.error("–ü–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–∏–≤–µ–ª –∫ –Ω–µ–≤–µ—Ä–Ω–æ–º—É essencePerClick:", essencePerClick); essencePerClick = 1; } if (!Number.isFinite(essencePerSecond) || essencePerSecond < 0) { console.error("–ü–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–∏–≤–µ–ª –∫ –Ω–µ–≤–µ—Ä–Ω–æ–º—É essencePerSecond:", essencePerSecond); essencePerSecond = 0; } }

    // --- –û—Ç–∫—Ä—ã—Ç–∏–µ/–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–µ–π ---
    function closeSettings() { if (settingsPanel) settingsPanel.classList.add('hidden'); }
    function closeUpgrades() { if (upgradesPanel) upgradesPanel.classList.add('hidden'); }
    function closeShop() { if (shopPanel) shopPanel.classList.add('hidden'); }
    if (openUpgradesBtn && upgradesPanel) { openUpgradesBtn.addEventListener('click', () => { renderUpgrades(); upgradesPanel.classList.remove('hidden'); closeSettings(); closeShop(); }); } else { console.error("–ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —É–ª—É—á—à–µ–Ω–∏–π –∏–ª–∏ –ø–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }
    if (closeUpgradesBtn && upgradesPanel) { closeUpgradesBtn.addEventListener('click', closeUpgrades); } else { console.error("–ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —É–ª—É—á—à–µ–Ω–∏–π –∏–ª–∏ –ø–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }
    if (settingsBtn && settingsPanel) { settingsBtn.addEventListener('click', () => { applySoundSettingsToUI(); updateActiveLangButton(); settingsPanel.classList.remove('hidden'); closeUpgrades(); closeShop(); }); } else { console.error("–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }
    if (closeSettingsBtn && settingsPanel) { closeSettingsBtn.addEventListener('click', closeSettings); } else { console.error("–ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }
    if (settingsPanel) { settingsPanel.addEventListener('click', (e) => { if (e.target === settingsPanel) closeSettings(); }); }
    if (shopBtn && shopPanel) { shopBtn.addEventListener('click', () => { if (shopGemCountElement) shopGemCountElement.textContent = formatNumber(gems); renderSkins(); shopPanel.classList.remove('hidden'); closeUpgrades(); closeSettings(); if (tg?.HapticFeedback) tg.HapticFeedback.impactOccurred('light'); }); } else { console.error("–ö–Ω–æ–ø–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–ª–∏ –ø–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }
    if (closeShopBtn && shopPanel) { closeShopBtn.addEventListener('click', closeShop); } else { console.error("–ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏–ª–∏ –ø–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }

    // --- –õ–æ–≥–∏–∫–∞ –ù–∞—Å—Ç—Ä–æ–µ–∫ ---
    function setLanguage(lang) { if (translations.greetingBase[lang]) { currentLanguage = lang; console.log(`–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${currentLanguage}`); applyTranslations(); updateActiveLangButton(); saveGame(); if (upgradesPanel && !upgradesPanel.classList.contains('hidden')) { renderUpgrades(); } if (shopPanel && !shopPanel.classList.contains('hidden')) { renderSkins(); } } else { console.warn(`–Ø–∑—ã–∫ "${lang}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö.`); } }
    function applyTranslations() { if (userGreetingElement) { let greeting = translations.greetingBase[currentLanguage] || "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è"; if (userName) { greeting += ` ${userName}`; } userGreetingElement.textContent = greeting; } document.querySelectorAll('[data-translate]').forEach(element => { const key = element.dataset.translate; if (!element.closest('.setting-item')) { const translation = translations[key]?.[currentLanguage]; if (translation) { element.textContent = translation; } else { console.warn(`–ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —è–∑—ã–∫–∞ "${currentLanguage}".`); } } }); const perSecTextNode = perSecondDisplayDiv?.lastChild; if (perSecTextNode && perSecTextNode.nodeType === Node.TEXT_NODE) { perSecTextNode.textContent = ` ${translations.perSec?.[currentLanguage] || '–≤ —Å–µ–∫'}`; } document.querySelectorAll('.setting-item label[data-translate]').forEach(element => { const key = element.dataset.translate; const translation = translations[key]?.[currentLanguage]; if (translation) { element.textContent = translation; } else { console.warn(`–ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ (label) "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —è–∑—ã–∫–∞ "${currentLanguage}".`); } }); document.querySelectorAll('.settings-content h3[data-translate]').forEach(element => { const key = element.dataset.translate; const translation = translations[key]?.[currentLanguage]; if (translation) { element.textContent = translation; } else { console.warn(`–ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ (h3) "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —è–∑—ã–∫–∞ "${currentLanguage}".`); } }); }
    function updateActiveLangButton() { if (!languageOptionsContainer) return; languageOptionsContainer.querySelectorAll('.lang-btn').forEach(button => { button.classList.toggle('active', button.dataset.lang === currentLanguage); }); }
    if (languageOptionsContainer) { languageOptionsContainer.addEventListener('click', (event) => { if (event.target.classList.contains('lang-btn')) { const lang = event.target.dataset.lang; if (lang && lang !== currentLanguage) { setLanguage(lang); } } }); } else { console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."); }

    // --- –õ–æ–≥–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞ ---
    function applySoundSettingsToUI() { if (soundToggleCheckbox && volumeSlider && volumeValueDisplay) { soundToggleCheckbox.checked = isSoundEnabled; volumeSlider.value = Math.round(soundVolume * 100); volumeValueDisplay.textContent = `${volumeSlider.value}%`; volumeSlider.disabled = !isSoundEnabled; volumeValueDisplay.classList.toggle('disabled', !isSoundEnabled); } else { console.warn("–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–≤—É–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DOM."); } }
    if (soundToggleCheckbox) { soundToggleCheckbox.addEventListener('change', () => { isSoundEnabled = soundToggleCheckbox.checked; console.log(`–ó–≤—É–∫ ${isSoundEnabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`); applySoundSettingsToUI(); saveGame(); if(tg?.HapticFeedback) tg.HapticFeedback.impactOccurred('light'); }); }
    if (volumeSlider) { volumeSlider.addEventListener('input', () => { const volumeValue = parseInt(volumeSlider.value, 10); soundVolume = volumeValue / 100; if (volumeValueDisplay) { volumeValueDisplay.textContent = `${volumeValue}%`; } }); volumeSlider.addEventListener('change', () => { console.log(`–ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: ${Math.round(soundVolume * 100)}%`); saveGame(); if (clickSound && isSoundEnabled) { try { clickSound.volume = soundVolume; clickSound.currentTime = 0; clickSound.play().catch(e => {}); } catch (err) {} } }); }

    // --- –õ–æ–≥–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ ---
    function renderSkins() { if (!skinsListElement) { console.error("–≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ —Å–∫–∏–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!"); return; } skinsListElement.innerHTML = ''; availableSkins.forEach(skin => { const isOwned = ownedSkins.includes(skin.id); const isActive = activeSkinId === skin.id; const canAfford = gems >= skin.cost; const listItem = document.createElement('li'); listItem.dataset.skinId = skin.id; if (isActive) { listItem.classList.add('active-skin'); } const translatedName = translations[skin.nameKey]?.[currentLanguage] || skin.nameKey; const buyButtonText = translations.buyButton?.[currentLanguage] || "–ö—É–ø–∏—Ç—å"; const selectButtonText = translations.selectButton?.[currentLanguage] || "–í—ã–±—Ä–∞—Ç—å"; const selectedButtonText = translations.selectedButton?.[currentLanguage] || "–í—ã–±—Ä–∞–Ω–æ"; const gemIconSvg = `<span class="gem-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="1em" height="1em"><path d="M12 1.68l-8 8.42L12 22.32l8-8.42L12 1.68zm0 2.1l5.95 6.27L12 18.54l-5.95-6.27L12 3.78z M6.4 10.1L12 16.1l5.6-6H6.4z"/></svg></span>`; let actionButtonHtml = ''; if (isActive) { actionButtonHtml = `<button class="skin-action-btn selected-btn" disabled>${selectedButtonText}</button>`; } else if (isOwned) { actionButtonHtml = `<button class="skin-action-btn select-btn">${selectButtonText}</button>`; } else { actionButtonHtml = `<button class="skin-action-btn buy-btn" ${!canAfford ? 'disabled' : ''}>${buyButtonText}</button>`; } listItem.innerHTML = `<div class="skin-preview ${skin.cssClass || ''}"></div><div class="skin-info"><h3>${translatedName}</h3>${skin.cost > 0 ? `<p class="skin-cost">${gemIconSvg} ${formatNumber(skin.cost)}</p>` : ''}</div>${actionButtonHtml}`; const actionButton = listItem.querySelector('.skin-action-btn'); if (actionButton && !actionButton.classList.contains('selected-btn')) { actionButton.addEventListener('click', () => { if (!actionButton.disabled) { handleSkinAction(skin.id); } }); } skinsListElement.appendChild(listItem); }); }
    function handleSkinAction(skinId) { if (isBlocked) { showTemporaryNotification(translations.actionBlocked?.[currentLanguage] || "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.", "error"); return; } const skin = availableSkins.find(s => s.id === skinId); if (!skin) return; const isOwned = ownedSkins.includes(skinId); if (isOwned) { if (activeSkinId !== skinId) { setActiveSkin(skinId); } } else { buySkin(skinId); } }
    function buySkin(skinId) { const skin = availableSkins.find(s => s.id === skinId); if (!skin || ownedSkins.includes(skinId) || skin.cost <= 0) return; if (gems >= skin.cost) { gems -= skin.cost; ownedSkins.push(skinId); console.log(`–°–∫–∏–Ω –∫—É–ø–ª–µ–Ω: ${skinId}. –û—Å—Ç–∞–ª–æ—Å—å –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤: ${gems}`); showTemporaryNotification(translations.skinPurchaseSuccess?.[currentLanguage] || "–°–∫–∏–Ω –∫—É–ø–ª–µ–Ω!", "success"); if (tg?.HapticFeedback) tg.HapticFeedback.notificationOccurred('success'); updateDisplay(); renderSkins(); setActiveSkin(skinId); } else { console.log(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–∫–∏–Ω–∞: ${skinId}. –ù—É–∂–Ω–æ: ${skin.cost}, –ï—Å—Ç—å: ${gems}`); showTemporaryNotification(translations.notEnoughGems?.[currentLanguage] || "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!", "warning"); if (tg?.HapticFeedback) tg.HapticFeedback.notificationOccurred('warning'); } }
    function setActiveSkin(skinId) { if (!ownedSkins.includes(skinId)) { console.error(`–ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –∫—É–ø–ª–µ–Ω–Ω—ã–π —Å–∫–∏–Ω: ${skinId}`); return; } if (activeSkinId !== skinId) { activeSkinId = skinId; console.log(`–ê–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${skinId}`); applyCauldronSkin(); if (shopPanel && !shopPanel.classList.contains('hidden')) { renderSkins(); } saveGame(); showTemporaryNotification(translations.skinSelected?.[currentLanguage] || "–°–∫–∏–Ω –≤—ã–±—Ä–∞–Ω!", "info"); if (tg?.HapticFeedback) tg.HapticFeedback.impactOccurred('light'); } }
    function applyCauldronSkin() { if (!cauldronElement) return; const activeSkinDefinition = availableSkins.find(s => s.id === activeSkinId); const skinClass = activeSkinDefinition?.cssClass; availableSkins.forEach(skin => { if (skin.cssClass) { cauldronElement.classList.remove(skin.cssClass); } }); if (skinClass) { cauldronElement.classList.add(skinClass); console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω –∫–ª–∞—Å—Å —Å–∫–∏–Ω–∞: ${skinClass} –∫ –∫–æ–ª–±–µ.`); } else { console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω CSS –∫–ª–∞—Å—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∏–Ω–∞ ID: ${activeSkinId}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–∏–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.`); } }

    // --- –õ–æ–≥–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã ---
    function checkReferralAndBonus() { const startParam = tg.initDataUnsafe?.start_param; const urlParams = new URLSearchParams(window.location.search); const claimBonusParam = urlParams.get('claimBonus'); console.log("Start Param:", startParam, "Claim Bonus Param:", claimBonusParam); if (claimBonusParam) { handleBonusClaim(claimBonusParam); } else if (startParam && !isNaN(parseInt(startParam))) { handleNewReferral(startParam); } }
    function handleNewReferral(inviterId) { tg.CloudStorage.getItem('gameState', (error, value) => { if (error) { console.error("–û—à–∏–±–∫–∞ CloudStorage –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:", error); return; } let isConsideredNew = true; if (value) { try { const savedState = JSON.parse(value); const thresholdEssence = 100; const significantUpgrades = savedState.upgrades?.some(u => u.level > 0 && u.id !== 'click1' && u.id !== 'auto1'); if ((savedState.essence && savedState.essence > thresholdEssence) || significantUpgrades || (savedState.gems && savedState.gems > 0)) { isConsideredNew = false; console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É."); } else { console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º (–∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º)."); } } catch (parseError) { console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ gameState –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞", parseError); } } else { console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: gameState –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π."); } if (isConsideredNew) { console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π –∏–ª–∏ —Å –º–∏–Ω. –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º. ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ: ${inviterId}. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç—É...`); if (tg.sendData) { const dataToSend = JSON.stringify({ type: 'referral_registered', inviter_id: inviterId, referred_user_id: tg.initDataUnsafe?.user?.id }); try { tg.sendData(dataToSend); console.log("–î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", dataToSend); showTemporaryNotification(translations.welcomeReferral?.[currentLanguage] || "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –±–æ–Ω—É—Å.", "success"); saveGame(); } catch (sendError) { console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —á–µ—Ä–µ–∑ tg.sendData:", sendError); showTemporaryNotification(translations.referralRegErrorBot?.[currentLanguage] || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–æ—à–∏–±–∫–∞ –±–æ—Ç–∞).", "error"); } } else { console.error("tg.sendData –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ."); showTemporaryNotification(translations.referralRegErrorFunc?.[currentLanguage] || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞).", "error"); } } else { console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–æ–≤—ã–π, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞."); } }); }
    function handleBonusClaim(referralId) { console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –∑–∞ ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${referralId}`); if (!referralId || typeof referralId !== 'string' || referralId.trim() === '') { console.warn("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞."); cleanBonusUrlParam(); return; } tg.CloudStorage.getItem('claimed_bonuses', (error, value) => { if (error) { console.error("–û—à–∏–±–∫–∞ CloudStorage –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤:", error); showTemporaryNotification(translations.bonusCheckError?.[currentLanguage] || "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–Ω—É—Å–∞!", "error"); cleanBonusUrlParam(); return; } let claimedBonuses = []; if (value) { try { claimedBonuses = JSON.parse(value); if (!Array.isArray(claimedBonuses)) { console.warn("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –Ω–µ –º–∞—Å—Å–∏–≤, —Å–±—Ä–æ—Å."); claimedBonuses = []; } } catch (parseError) { console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ claimed_bonuses:", parseError); claimedBonuses = []; } } if (claimedBonuses.includes(referralId)) { console.log(`–ë–æ–Ω—É—Å –∑–∞ ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ${referralId} —É–∂–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω.`); showTemporaryNotification(translations.bonusAlreadyClaimed?.[currentLanguage] || "–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω.", "warning"); } else { const bonusAmount = 50000; if (Number.isFinite(essence)) { essence += bonusAmount; console.log(`–ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∑–∞ ${referralId}! –î–æ–±–∞–≤–ª–µ–Ω–æ ${bonusAmount} —ç—Å—Å–µ–Ω—Ü–∏–∏.`); const reasonText = translations.bonusReasonFriend?.[currentLanguage] || "–∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!"; showTemporaryNotification(`+${formatNumber(bonusAmount)} üß™ ${reasonText}`, "success"); updateDisplay(); claimedBonuses.push(referralId); tg.CloudStorage.setItem('claimed_bonuses', JSON.stringify(claimedBonuses), (setError) => { if (setError) { console.error("–û—à–∏–±–∫–∞ CloudStorage –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤:", setError); } else { console.log("–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ CloudStorage."); saveGame(); } }); } else { console.error("–ù–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å, —Ç–µ–∫—É—â–∞—è —ç—Å—Å–µ–Ω—Ü–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º:", essence); showTemporaryNotification(translations.bonusAddError?.[currentLanguage] || "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!", "error"); } } cleanBonusUrlParam(); }); }
    function cleanBonusUrlParam() { try { const currentUrl = new URL(window.location); if (currentUrl.searchParams.has('claimBonus')) { currentUrl.searchParams.delete('claimBonus'); window.history.replaceState({}, document.title, currentUrl.toString()); console.log("–ü–∞—Ä–∞–º–µ—Ç—Ä URL claimBonus –æ—á–∏—â–µ–Ω."); } } catch (urlError) { console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä URL claimBonus:", urlError); } }
    if (inviteFriendBtn) { inviteFriendBtn.addEventListener('click', () => { if (tg?.initDataUnsafe?.user?.id) { const botUsername = 'AlchimLaboratory_Bot'; const appName = 'AlchimLab'; const userId = tg.initDataUnsafe.user.id; const referralLink = `https://t.me/${botUsername}/${appName}?start=${userId}`; const shareText = translations.shareText?.[currentLanguage] || '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –º–æ–µ–π –ê–ª—Ö–∏–º–∏—á–µ—Å–∫–æ–π –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –≤ Telegram! üß™‚öóÔ∏è –ö–ª–∏–∫–∞–π –∏ —Å–æ–∑–¥–∞–≤–∞–π —ç–ª–∏–∫—Å–∏—Ä—ã!'; const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(shareText)}`; tg.openTelegramLink(shareUrl); console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞:', referralLink); if (tg?.HapticFeedback) tg.HapticFeedback.impactOccurred('light'); } else { console.error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'); showTemporaryNotification(translations.inviteLinkError?.[currentLanguage] || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.', 'error'); if (tg?.HapticFeedback) tg.HapticFeedback.notificationOccurred('error'); } }); } else { console.error("–ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }

    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–ó–∞–≥—Ä—É–∑–∫–∞ (–° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú –∏ –ü–†–û–í–ï–†–ö–û–ô CloudStorage) ---
    function saveGame() {
        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ CloudStorage ---
        if (!tg?.CloudStorage || !tg.CloudStorage.setItem) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–∞–º –æ–±—ä–µ–∫—Ç, –∏ –º–µ—Ç–æ–¥
            // console.log("[Save] CloudStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è."); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return; // –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–µ–∫—É–¥–∞
        }
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

        console.log("[Save] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...");
        // --- –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ---
        let isValid = true;
        if (!Number.isFinite(essence) || essence < 0) { console.warn(`[Save Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —ç—Å—Å–µ–Ω—Ü–∏—è (${essence}). –°–±—Ä–æ—Å –Ω–∞ 0.`); essence = 0; isValid = false; }
        if (!Number.isFinite(gems) || gems < 0) { console.warn(`[Save Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã (${gems}). –°–±—Ä–æ—Å –Ω–∞ 0.`); gems = 0; isValid = false; }
        if (typeof isSoundEnabled !== 'boolean') { console.warn(`[Save Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–ª–∞–≥ –∑–≤—É–∫–∞ (${isSoundEnabled}). –£—Å—Ç–∞–Ω–æ–≤–∫–∞ true.`); isSoundEnabled = true; isValid = false; }
        if (!Number.isFinite(soundVolume) || soundVolume < 0 || soundVolume > 1) { console.warn(`[Save Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å (${soundVolume}). –°–±—Ä–æ—Å –Ω–∞ 0.5.`); soundVolume = 0.5; isValid = false; }
        if (!Array.isArray(ownedSkins) || !ownedSkins.includes('default')) { console.warn(`[Save Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤ (${JSON.stringify(ownedSkins)}). –°–±—Ä–æ—Å.`); ownedSkins = ['default']; if (activeSkinId !== 'default') activeSkinId = 'default'; isValid = false; }
        if (typeof activeSkinId !== 'string' || !ownedSkins.includes(activeSkinId)) { console.warn(`[Save Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω (${activeSkinId}). –°–±—Ä–æ—Å –Ω–∞ default.`); activeSkinId = 'default'; isValid = false; }
        upgrades.forEach(upg => { if (!Number.isFinite(upg.currentLevel) || upg.currentLevel < 0) { console.warn(`[Save Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞ ${upg.id} (${upg.currentLevel}). –°–±—Ä–æ—Å –Ω–∞ 0.`); upg.currentLevel = 0; isValid = false; } });
        if (!isValid) { console.warn("[Save] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∑–Ω–∞—á–µ–Ω–∏—è –±—ã–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º."); }
        // --- –ö–æ–Ω–µ—Ü –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ---

        const gameState = {
            essence: essence, gems: gems, upgrades: upgrades.map(u => ({ id: u.id, level: u.currentLevel })),
            language: currentLanguage, ownedSkins: ownedSkins, activeSkinId: activeSkinId,
            isSoundEnabled: isSoundEnabled, soundVolume: soundVolume
        };

        try {
            const gameStateString = JSON.stringify(gameState);
            console.log(`[Save] –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (JSON ${gameStateString.length} –±–∞–π—Ç):`, gameState);

            tg.CloudStorage.setItem('gameState', gameStateString, (error, success) => {
                if (error) { console.error("[Save Callback] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ CloudStorage:", error);
                } else if (success) { console.log("[Save Callback] –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ CloudStorage.");
                } else { console.warn("[Save Callback] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –±–µ–∑ –æ—à–∏–±–∫–∏, –Ω–æ –∏ –±–µ–∑ —Ñ–ª–∞–≥–∞ —É—Å–ø–µ—Ö–∞."); }
            });
        } catch (stringifyError) {
             console.error("[Save] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ JSON.stringify:", stringifyError, "–û–±—ä–µ–∫—Ç gameState:", gameState);
             showTemporaryNotification(translations.saveCritError?.[currentLanguage] || "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", "error");
        }
    }

    function loadGame() {
        console.log("[Load] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏...");
        isBlocked = false; warningCount = 0;
        if (cauldronElement) cauldronElement.classList.remove('blocked-cauldron');

        // --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ CloudStorage ---
        if (!tg?.CloudStorage || !tg.CloudStorage.getItem) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–∞–º –æ–±—ä–µ–∫—Ç, –∏ –º–µ—Ç–æ–¥
            console.warn("[Load] CloudStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏.");
            resetGameData(); // –°–±—Ä–æ—Å –∫ –¥–µ—Ñ–æ–ª—Ç—É
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UI
            applyTranslations();
            updateDisplay();
            applyCauldronSkin(); // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∫–∏–Ω
            applySoundSettingsToUI(); // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞
            updateLiquidLevelVisual(LIQUID_MIN_LEVEL);
             showTemporaryNotification("–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Telegram.", "warning");
            return; // –í—ã—Ö–æ–¥–∏–º, —Ç.–∫. –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–µ—á–µ–≥–æ/–Ω–µ–∫—É–¥–∞
        }
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

        tg.CloudStorage.getItem('gameState', (error, value) => {
            console.log("[Load Callback] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç CloudStorage.getItem.");
            let loadedSuccessfully = false;
            if (error) {
                console.error("[Load Callback] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CloudStorage:", error);
                showTemporaryNotification(translations.loadError?.[currentLanguage] || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!", "error");
                resetGameData();
            } else if (value) {
                console.log(`[Load Callback] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ CloudStorage (${value.length} –±–∞–π—Ç). –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...`);
                try {
                    const savedState = JSON.parse(value);
                    console.log("[Load Parse] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã:", savedState);
                    // --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π ---
                    essence = Number(savedState.essence) || 0; if (!Number.isFinite(essence) || essence < 0) { console.warn("[Load Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —ç—Å—Å–µ–Ω—Ü–∏—è, —Å–±—Ä–æ—Å."); essence = 0; }
                    gems = Number(savedState.gems) || 0; if (!Number.isFinite(gems) || gems < 0) { console.warn("[Load Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã, —Å–±—Ä–æ—Å."); gems = 0; }
                    currentLanguage = savedState.language || 'ru'; if (!translations.greetingBase[currentLanguage]) { console.warn(`[Load Validation] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫ "${currentLanguage}", —Å–±—Ä–æ—Å –Ω–∞ 'ru'.`); currentLanguage = 'ru'; }
                    if (Array.isArray(savedState.upgrades)) { upgrades.forEach(upgrade => { const savedUpgrade = savedState.upgrades.find(su => su.id === upgrade.id); const loadedLevel = Number(savedUpgrade?.level); upgrade.currentLevel = (Number.isFinite(loadedLevel) && loadedLevel >= 0) ? loadedLevel : 0; if (upgrade.currentLevel !== 0 && !(Number.isFinite(loadedLevel) && loadedLevel >= 0)) { console.warn(`[Load Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–ø–≥—Ä–µ–π–¥–∞ ${upgrade.id}, —Å–±—Ä–æ—Å.`);}}); } else { console.warn("[Load Validation] –î–∞–Ω–Ω—ã–µ –∞–ø–≥—Ä–µ–π–¥–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, —Å–±—Ä–æ—Å —É—Ä–æ–≤–Ω–µ–π."); upgrades.forEach(upgrade => upgrade.currentLevel = 0); }
                    ownedSkins = Array.isArray(savedState.ownedSkins) ? savedState.ownedSkins : ['default']; if (!ownedSkins.includes('default')) { ownedSkins.push('default'); console.warn("[Load Validation] –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª —Å–∫–∏–Ω 'default', –¥–æ–±–∞–≤–ª–µ–Ω."); }
                    activeSkinId = (typeof savedState.activeSkinId === 'string' && ownedSkins.includes(savedState.activeSkinId)) ? savedState.activeSkinId : 'default'; if (savedState.activeSkinId && !ownedSkins.includes(savedState.activeSkinId)) { console.warn(`[Load Validation] –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω '${savedState.activeSkinId}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö, —Å–±—Ä–æ—Å.`); }
                    isSoundEnabled = typeof savedState.isSoundEnabled === 'boolean' ? savedState.isSoundEnabled : true;
                    let loadedVolume = Number(savedState.soundVolume); soundVolume = (Number.isFinite(loadedVolume) && loadedVolume >= 0 && loadedVolume <= 1) ? loadedVolume : 0.5; if (!(Number.isFinite(loadedVolume) && loadedVolume >= 0 && loadedVolume <= 1)) { console.warn(`[Load Validation] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å ${savedState.soundVolume}, —Å–±—Ä–æ—Å.`);}
                    // --- –ö–æ–Ω–µ—Ü –∑–∞–≥—Ä—É–∑–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π ---
                    recalculateBonuses();
                    console.log("[Load] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ.");
                    loadedSuccessfully = true;
                } catch (parseError) {
                    console.error("[Load Parse] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –∏–∑ CloudStorage:", parseError, "–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", value);
                    showTemporaryNotification(translations.readError?.[currentLanguage] || "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", "error");
                    resetGameData();
                }
            } else {
                console.log("[Load Callback] –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ CloudStorage. –ù–æ–≤–∞—è –∏–≥—Ä–∞.");
                resetGameData();
            }
            // --- –ü–æ—Å—Ç-–∑–∞–≥—Ä—É–∑–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
            checkReferralAndBonus(); applyTranslations(); updateDisplay(); applyCauldronSkin(); applySoundSettingsToUI();
            visualLiquidLevel = LIQUID_MIN_LEVEL; lastInteractionTime = Date.now(); updateLiquidLevelVisual(visualLiquidLevel);
            console.log(`[Load] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. Essence: ${essence}, Gems: ${gems}, Active Skin: ${activeSkinId}, Sound: ${isSoundEnabled}, Volume: ${soundVolume}`);
            if (!loadedSuccessfully && !error && !value) { console.log("[Load] –≠—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫."); }
        });
    }

    function resetGameData() {
        console.log("–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
        isBlocked = false; warningCount = 0;
        if (cauldronElement) cauldronElement.classList.remove('blocked-cauldron');
        essence = 0; gems = 0;
        upgrades.forEach(upgrade => upgrade.currentLevel = 0);
        currentLanguage = 'ru';
        ownedSkins = ['default']; activeSkinId = 'default';
        isSoundEnabled = true; soundVolume = 0.5;
        recalculateBonuses();
        visualLiquidLevel = LIQUID_MIN_LEVEL; lastInteractionTime = Date.now();
    }

    // --- –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
    function showTemporaryNotification(message, type = "info") { const notification = document.createElement('div'); notification.className = `notification ${type}`; notification.textContent = message; document.body.appendChild(notification); void notification.offsetWidth; requestAnimationFrame(() => { notification.style.opacity = '1'; notification.style.bottom = '80px'; }); setTimeout(() => { notification.style.opacity = '0'; notification.style.bottom = '70px'; setTimeout(() => { if (notification.parentNode) { notification.remove(); } }, 500); }, 2500); }

    // --- –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    loadGame(); // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã

    // --- –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
    const autoSaveInterval = setInterval(saveGame, 15000); // –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    window.addEventListener('beforeunload', saveGame); // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    document.addEventListener('visibilitychange', () => { if (document.visibilityState === 'hidden') { saveGame(); } }); // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏
    if (tg?.onEvent) { tg.onEvent('viewportChanged', (event) => { if (event.isStateStable) { console.log("Viewport stable, triggering save."); saveGame(); } }); }

}); // –ö–æ–Ω–µ—Ü DOMContentLoaded