document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    const tg = window.Telegram.WebApp;
    tg.ready(); // –°–æ–æ–±—â–∞–µ–º Telegram, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
    tg.expand(); // –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç—å Mini App –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω

    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã DOM
    const essenceCountElement = document.getElementById('essence-count');
    const essencePerSecondElement = document.getElementById('essence-per-second');
    const cauldronElement = document.getElementById('cauldron');
    const clickFeedbackContainer = document.getElementById('click-feedback-container');
    const openUpgradesBtn = document.getElementById('open-upgrades-btn');
    const closeUpgradesBtn = document.getElementById('close-upgrades-btn');
    const upgradesPanel = document.getElementById('upgrades-panel');
    const upgradesListElement = document.getElementById('upgrades-list');
    const userGreetingElement = document.getElementById('user-greeting');
    const inviteFriendBtn = document.getElementById('invite-friend-btn');

    // –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    let essence = 0;
    let essencePerClick = 1;
    let essencePerSecond = 0;

    // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
    if (tg.initDataUnsafe && tg.initDataUnsafe.user && tg.initDataUnsafe.user.first_name) {
        userGreetingElement.textContent = `–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è ${tg.initDataUnsafe.user.first_name}`;
    }

    // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π ---
    const upgrades = [
        // --- –ù–∞—á–∞–ª—å–Ω—ã–π –¢–∏—Ä (–î–æ—Å—Ç—É–ø–Ω—ã —Å—Ä–∞–∑—É) ---
        { id: 'click1', name: '–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç', description: '+1 –∫ –∫–ª–∏–∫—É', baseCost: 15, costMultiplier: 1.4, type: 'click', value: 1, currentLevel: 0, requiredEssence: 0 },
        { id: 'auto1', name: '–ì–æ–º—É–Ω–∫—É–ª-–ü–æ–º–æ—â–Ω–∏–∫', description: '+1 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 60, costMultiplier: 1.6, type: 'auto', value: 1, currentLevel: 0, requiredEssence: 0 },

        // --- –¢–∏—Ä 2 (–¢—Ä–µ–±—É–µ—Ç—Å—è ~500+ –≠—Å—Å–µ–Ω—Ü–∏–∏) ---
        { id: 'click2', name: '–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—É–ø–∫–∞', description: '+5 –∫ –∫–ª–∏–∫—É', baseCost: 300, costMultiplier: 1.5, type: 'click', value: 5, currentLevel: 0, requiredEssence: 500 },
        { id: 'auto2', name: '–ü—É–∑—ã—Ä—è—â–∏–π—Å—è –∫–æ—Ç–µ–ª', description: '+4 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 750, costMultiplier: 1.7, type: 'auto', value: 4, currentLevel: 0, requiredEssence: 700 },

        // --- –¢–∏—Ä 3 (–¢—Ä–µ–±—É–µ—Ç—Å—è ~10,000+ –≠—Å—Å–µ–Ω—Ü–∏–∏) ---
        { id: 'click3', name: '–ê–ª–µ–º–±–∏–∫ –ú–∞—Å—Ç–µ—Ä–∞', description: '+25 –∫ –∫–ª–∏–∫—É', baseCost: 5000, costMultiplier: 1.6, type: 'click', value: 25, currentLevel: 0, requiredEssence: 10000 },
        { id: 'auto3', name: '–ü—Ä–∏–∑–≤–∞–Ω–Ω—ã–π –ò—Ñ—Ä–∏—Ç', description: '+20 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 12000, costMultiplier: 1.8, type: 'auto', value: 20, currentLevel: 0, requiredEssence: 15000 },
        { id: 'auto4', name: '–°–∞–¥ –ê–ª—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –†–∞—Å—Ç–µ–Ω–∏–π', description: '+50 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 30000, costMultiplier: 1.9, type: 'auto', value: 50, currentLevel: 0, requiredEssence: 40000 },


        // --- –¢–∏—Ä 4 (–¢—Ä–µ–±—É–µ—Ç—Å—è ~500,000+ –≠—Å—Å–µ–Ω—Ü–∏–∏) ---
         { id: 'click4', name: '–°–∏–ª–∞ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–≥–æ –ö–∞–º–Ω—è (–æ—Å–∫–æ–ª–æ–∫)', description: '+150 –∫ –∫–ª–∏–∫—É', baseCost: 250000, costMultiplier: 1.7, type: 'click', value: 150, currentLevel: 0, requiredEssence: 500000 },
         { id: 'auto5', name: '–≠—Ñ–∏—Ä–Ω—ã–π –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä', description: '+250 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 1000000, costMultiplier: 2.0, type: 'auto', value: 250, currentLevel: 0, requiredEssence: 1200000 },
         { id: 'auto6', name: '–ü–æ—Ä—Ç–∞–ª –≤ –º–∏—Ä –≠—Å—Å–µ–Ω—Ü–∏–∏', description: '+1000 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 5000000, costMultiplier: 2.2, type: 'auto', value: 1000, currentLevel: 0, requiredEssence: 6000000 },

        // --- –¢–∏—Ä 5 (–û—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ–π, –¥–ª—è —ç–Ω–¥–≥–µ–π–º–∞) ---
         { id: 'click5', name: '–ü—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ –¢–≤–æ—Ä—Ü–∞', description: '+1000 –∫ –∫–ª–∏–∫—É', baseCost: 10000000, costMultiplier: 1.8, type: 'click', value: 1000, currentLevel: 0, requiredEssence: 15000000 },
         { id: 'auto7', name: '–ü–æ—Ç–æ–∫ –ß–∏—Å—Ç–æ–π –ú–∞–≥–∏–∏', description: '+5000 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 50000000, costMultiplier: 2.1, type: 'auto', value: 5000, currentLevel: 0, requiredEssence: 60000000 },
    ];


    // --- –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI ---
    function updateEssenceDisplay() {
        if (essenceCountElement) {
            essenceCountElement.textContent = formatNumber(Math.floor(essence));
        }
        if (essencePerSecondElement) {
            essencePerSecondElement.textContent = formatNumber(essencePerSecond);
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª (–¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏)
    function formatNumber(num) {
        if (isNaN(num) || !Number.isFinite(num)) {
             console.warn("formatNumber received invalid input:", num);
             return "ERR";
        }
        if (num < 1000) return num.toString();
        if (num < 1000000) return (num / 1000).toFixed(1).replace('.0', '') + 'K';
        if (num < 1000000000) return (num / 1000000).toFixed(1).replace('.0', '') + 'M';
        return (num / 1000000000).toFixed(1).replace('.0', '') + 'B';
    }

    // --- –õ–æ–≥–∏–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ—Ç–ª—É ---
    if (cauldronElement) {
        cauldronElement.addEventListener('click', () => {
            if (Number.isFinite(essencePerClick)) {
                essence += essencePerClick;
                updateEssenceDisplay();
                if (clickFeedbackContainer) {
                     showClickFeedback(`+${formatNumber(essencePerClick)}`);
                }
                cauldronElement.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    cauldronElement.style.transform = 'scale(1)';
                }, 80);
            } else {
                 console.error("Invalid essencePerClick value:", essencePerClick);
            }
        });
    } else {
        console.error("Cauldron element not found!");
    }


    // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "+1" –ø—Ä–∏ –∫–ª–∏–∫–µ ---
    function showClickFeedback(text) {
        if (!clickFeedbackContainer) return;
        const feedback = document.createElement('div');
        feedback.className = 'click-feedback';
        feedback.textContent = text;
        const offsetX = Math.random() * 40 - 20;
        const offsetY = Math.random() * 20 - 10;
        feedback.style.left = `calc(50% + ${offsetX}px)`;
        feedback.style.top = `calc(50% + ${offsetY}px)`;
        clickFeedbackContainer.appendChild(feedback);
        setTimeout(() => {
            feedback.remove();
        }, 950);
    }

    // --- –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ-–∫–ª–∏–∫–∞ (–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥) ---
    setInterval(() => {
        if (essencePerSecond > 0 && Number.isFinite(essencePerSecond)) {
            const essenceToAdd = essencePerSecond / 10;
            if (Number.isFinite(essenceToAdd)) {
                essence += essenceToAdd;
                updateEssenceDisplay();
            } else {
                 console.warn("Skipping auto-click: essenceToAdd resulted in invalid number", essenceToAdd);
            }
        }
    }, 100);

    // --- –õ–æ–≥–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π ---
    function calculateCost(upgrade) {
        if (!upgrade || typeof upgrade.baseCost !== 'number' || typeof upgrade.costMultiplier !== 'number' || typeof upgrade.currentLevel !== 'number') {
             console.error("Invalid upgrade data in calculateCost:", upgrade);
             return Infinity;
        }
        return Math.floor(upgrade.baseCost * Math.pow(upgrade.costMultiplier, upgrade.currentLevel));
    }

    // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø RENDERUPGRADES (—Å –ø–æ–∫–∞–∑–æ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
    function renderUpgrades() {
        if (!upgradesListElement) {
             console.error("Upgrades list element not found!");
             return;
        }
        upgradesListElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —Ç—Ä–µ–±—É–µ–º–æ–π —ç—Å—Å–µ–Ω—Ü–∏–∏
        upgrades.sort((a, b) => (a.requiredEssence || 0) - (b.requiredEssence || 0));

        if (upgrades.length === 0) {
             upgradesListElement.innerHTML = '<li><p>–£–ª—É—á—à–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.</p></li>';
             return;
        }

        upgrades.forEach(upgrade => {
            const cost = calculateCost(upgrade);
            if (!Number.isFinite(cost)) {
                 console.error("Skipping render for upgrade with invalid cost:", upgrade.id);
                 return;
            }

            const requirement = upgrade.requiredEssence || 0;
            const isLocked = Math.floor(essence) < requirement; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
            const canAfford = essence >= cost; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ —Ü–µ–Ω–µ

            const li = document.createElement('li');
            if (isLocked) {
                li.classList.add('locked'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            }

            let buttonText = '–ö—É–ø–∏—Ç—å';
            let buttonDisabled = '';

            if (isLocked) {
                buttonDisabled = 'disabled';
                buttonText = `–ù—É–∂–Ω–æ ${formatNumber(requirement)} üß™`; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ
            } else if (!canAfford) {
                buttonDisabled = 'disabled'; // –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç—Å—Å–µ–Ω—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            }

            // !!! --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ --- !!!
            li.innerHTML = `
                <div class="upgrade-info">
                    <h3>${upgrade.name} (–£—Ä. ${upgrade.currentLevel})</h3>
                    <p>${upgrade.description}</p>
                    <p class="upgrade-cost">–°—Ç–æ–∏–º–æ—Å—Ç—å: ${formatNumber(cost)} üß™</p>
                    ${isLocked ? `<p class="requirement-info">–¢—Ä–µ–±—É–µ—Ç—Å—è: ${formatNumber(requirement)} üß™</p>` : ''}
                </div>
                <button class="buy-upgrade-btn" data-upgrade-id="${upgrade.id}" ${buttonDisabled}>
                    ${buttonText}
                </button>
            `;
            // !!! --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø --- !!!

            const buyButton = li.querySelector('.buy-upgrade-btn');
            if (buyButton) {
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ–≥–¥–∞, –Ω–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ 'disabled'
                buyButton.addEventListener('click', () => {
                    buyUpgrade(upgrade.id);
                });
            }

            upgradesListElement.appendChild(li);
        });
    }


    function buyUpgrade(upgradeId) {
        const upgrade = upgrades.find(u => u.id === upgradeId);
        if (!upgrade) {
             console.error("Upgrade not found:", upgradeId);
             return;
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –∫—É–ø–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ?
        const requirement = upgrade.requiredEssence || 0;
        if (Math.floor(essence) < requirement) {
            console.log("Attempted to buy a locked upgrade:", upgradeId);
            showTemporaryNotification(`–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ ${formatNumber(requirement)} —ç—Å—Å–µ–Ω—Ü–∏–∏!`, "error");
            return; // –í—ã—Ö–æ–¥–∏–º, –Ω–µ –¥–∞–µ–º –∫—É–ø–∏—Ç—å
        }

        const cost = calculateCost(upgrade);
         if (!Number.isFinite(cost)) {
             console.error("Cannot buy upgrade with invalid cost:", upgradeId);
             showTemporaryNotification("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è!", "error");
             return;
         }

        if (essence >= cost) {
            essence -= cost;
            upgrade.currentLevel++;
            recalculateBonuses();
            updateEssenceDisplay();
            renderUpgrades(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ª—É—á—à–µ–Ω–∏–π
        } else {
            console.log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Å—Å–µ–Ω—Ü–∏–∏!");
            showTemporaryNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Å—Å–µ–Ω—Ü–∏–∏!", "error");
        }
    }

    function recalculateBonuses() {
        essencePerClick = 1;
        essencePerSecond = 0;

        upgrades.forEach(upgrade => {
            if (upgrade.currentLevel > 0 && Number.isFinite(upgrade.value) && typeof upgrade.type === 'string') {
                if (upgrade.type === 'click') {
                    essencePerClick += upgrade.value * upgrade.currentLevel;
                } else if (upgrade.type === 'auto') {
                    essencePerSecond += upgrade.value * upgrade.currentLevel;
                }
            } else if (upgrade.currentLevel > 0) {
                 console.warn("Invalid upgrade data in recalculateBonuses:", upgrade);
            }
        });

        if (!Number.isFinite(essencePerClick)) {
             console.error("recalculateBonuses resulted in invalid essencePerClick:", essencePerClick);
             essencePerClick = 1;
        }
         if (!Number.isFinite(essencePerSecond)) {
             console.error("recalculateBonuses resulted in invalid essencePerSecond:", essencePerSecond);
             essencePerSecond = 0;
        }
    }

    // --- –û—Ç–∫—Ä—ã—Ç–∏–µ/–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ª—É—á—à–µ–Ω–∏–π ---
     if (openUpgradesBtn && upgradesPanel) {
        openUpgradesBtn.addEventListener('click', () => {
            renderUpgrades(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
            upgradesPanel.classList.remove('hidden');
        });
     } else {
         console.error("Open upgrades button or panel not found!");
     }

     if (closeUpgradesBtn && upgradesPanel) {
        closeUpgradesBtn.addEventListener('click', () => {
            upgradesPanel.classList.add('hidden');
        });
     } else {
         console.error("Close upgrades button or panel not found!");
     }

    // --- –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–∑—å—è" (–∑–∞–≥–ª—É—à–∫–∞) ---
    if (inviteFriendBtn) {
        inviteFriendBtn.addEventListener('click', () => {
            console.log('–ö–Ω–æ–ø–∫–∞ "–î—Ä—É–∑—å—è" –Ω–∞–∂–∞—Ç–∞. –ù—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram API.');
            if (tg && tg.showPopup) {
                tg.showPopup({
                    title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π',
                    message: '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã!',
                    buttons: [{ type: 'ok' }]
                });
            } else {
                 alert('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.');
            }
        });
    } else {
         console.error("Invite friend button not found!");
    }


    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–ó–∞–≥—Ä—É–∑–∫–∞ ---
    function saveGame() {
        if (!Number.isFinite(essence)) {
             console.error("Attempting to save invalid essence value:", essence);
             essence = 0;
        }
        const gameState = {
            essence: essence,
            upgrades: upgrades.map(u => ({ id: u.id, level: u.currentLevel }))
        };
        try {
            localStorage.setItem('alchemistClickerSave', JSON.stringify(gameState));
             console.log("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:", e);
            showTemporaryNotification("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!", "error");
        }
    }

    function loadGame() {
        const savedState = localStorage.getItem('alchemistClickerSave');
        if (savedState) {
            try {
                const gameState = JSON.parse(savedState);
                essence = Number(gameState.essence) || 0;
                 if (!Number.isFinite(essence)) essence = 0;

                upgrades.forEach(upgrade => {
                    const savedUpgrade = gameState.upgrades.find(su => su.id === upgrade.id);
                    upgrade.currentLevel = savedUpgrade ? (Number(savedUpgrade.level) || 0) : 0;
                    if (!Number.isFinite(upgrade.currentLevel)) upgrade.currentLevel = 0;
                });

                recalculateBonuses();
                console.log("–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞");

            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", e);
                localStorage.removeItem('alchemistClickerSave');
                resetGameData();
            }
        } else {
             console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.");
             resetGameData();
        }
    }

    function resetGameData() {
        essence = 0;
        upgrades.forEach(u => u.currentLevel = 0);
        recalculateBonuses();
    }

    // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
    function showTemporaryNotification(message, type = "info") {
         const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        notification.style.position = 'fixed';
        notification.style.bottom = '70px';
        notification.style.left = '50%';
        notification.style.transform = 'translateX(-50%)';
        notification.style.padding = '10px 20px';
        notification.style.borderRadius = '8px';
        notification.style.backgroundColor = type === 'error' ? '#e74c3c' : '#3498db';
        notification.style.color = 'white';
        notification.style.zIndex = '1000';
        notification.style.opacity = '0';
        notification.style.transition = 'opacity 0.5s ease';
        document.body.appendChild(notification);
        setTimeout(() => { notification.style.opacity = '1'; }, 10);
        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => { notification.remove(); }, 500);
        }, 2500);
    }


    // --- –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    loadGame(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—É (–ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å—ã)
    updateEssenceDisplay(); // –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—á–µ—Ç–∞ –∏ –¥–æ—Ö–æ–¥–∞ –≤ —Å–µ–∫

    // --- –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ ---
    setInterval(saveGame, 30000); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    window.addEventListener('beforeunload', saveGame); // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
     document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'hidden') {
            saveGame(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏/–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–æ–∫
        }
    });


}); // –ö–æ–Ω–µ—Ü DOMContentLoaded