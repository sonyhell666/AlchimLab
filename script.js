document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    const tg = window.Telegram.WebApp;
    tg.ready();
    tg.expand();

    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã DOM
    const essenceCountElement = document.getElementById('essence-count');
    const essencePerSecondElement = document.getElementById('essence-per-second');
    // --- –ù–û–í–´–ô –≠–õ–ï–ú–ï–ù–¢ ---
    const gemCountElement = document.getElementById('gem-count'); // –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
    // --- ---
    const cauldronElement = document.getElementById('cauldron');
    const clickFeedbackContainer = document.getElementById('click-feedback-container');
    const openUpgradesBtn = document.getElementById('open-upgrades-btn');
    const closeUpgradesBtn = document.getElementById('close-upgrades-btn');
    const upgradesPanel = document.getElementById('upgrades-panel');
    const upgradesListElement = document.getElementById('upgrades-list');
    const userGreetingElement = document.getElementById('user-greeting');
    const inviteFriendBtn = document.getElementById('invite-friend-btn');
    const bubblesContainer = document.getElementById('bubbles-container');
    const perSecondDisplayDiv = document.getElementById('per-second-display'); // –í–µ—Å—å –±–ª–æ–∫ /—Å–µ–∫

    // –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    let essence = 0;
    let essencePerClick = 1;
    let essencePerSecond = 0;
    // --- –ù–û–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
    let gems = 0; // –ù–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ - –ö—Ä–∏—Å—Ç–∞–ª–ª—ã
    const GEM_AWARD_CHANCE = 0.03; // 3% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª –∑–∞ –∫–ª–∏–∫
    const GEMS_PER_AWARD = 1;      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –∑–∞ —É—Å–ø–µ—à–Ω—ã–π —à–∞–Ω—Å
    // --- ---

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
    let lastClickTime = 0;
    const MIN_CLICK_INTERVAL = 67; // ~15 clicks per second max allowed
    const MAX_WARNINGS = 3;
    let warningCount = 0;
    let isBlocked = false;

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (tg.initDataUnsafe?.user?.first_name) {
        userGreetingElement.textContent = `–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è ${tg.initDataUnsafe.user.first_name}`;
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const upgrades = [
        { id: 'click1', name: '–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç', description: '+1 –∫ –∫–ª–∏–∫—É', baseCost: 15, costMultiplier: 1.4, type: 'click', value: 1, currentLevel: 0, requiredEssence: 0 },
        { id: 'auto1', name: '–ì–æ–º—É–Ω–∫—É–ª-–ü–æ–º–æ—â–Ω–∏–∫', description: '+1 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 60, costMultiplier: 1.6, type: 'auto', value: 1, currentLevel: 0, requiredEssence: 0 },
        { id: 'click2', name: '–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—É–ø–∫–∞', description: '+5 –∫ –∫–ª–∏–∫—É', baseCost: 300, costMultiplier: 1.5, type: 'click', value: 5, currentLevel: 0, requiredEssence: 500 },
        { id: 'auto2', name: '–ü—É–∑—ã—Ä—è—â–∏–π—Å—è –∫–æ—Ç–µ–ª', description: '+4 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 750, costMultiplier: 1.7, type: 'auto', value: 4, currentLevel: 0, requiredEssence: 700 },
        { id: 'click3', name: '–ê–ª–µ–º–±–∏–∫ –ú–∞—Å—Ç–µ—Ä–∞', description: '+25 –∫ –∫–ª–∏–∫—É', baseCost: 5000, costMultiplier: 1.6, type: 'click', value: 25, currentLevel: 0, requiredEssence: 10000 },
        { id: 'auto3', name: '–ü—Ä–∏–∑–≤–∞–Ω–Ω—ã–π –ò—Ñ—Ä–∏—Ç', description: '+20 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 12000, costMultiplier: 1.8, type: 'auto', value: 20, currentLevel: 0, requiredEssence: 15000 },
        { id: 'auto4', name: '–°–∞–¥ –ê–ª—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –†–∞—Å—Ç–µ–Ω–∏–π', description: '+50 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 30000, costMultiplier: 1.9, type: 'auto', value: 50, currentLevel: 0, requiredEssence: 40000 },
        { id: 'click4', name: '–°–∏–ª–∞ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–≥–æ –ö–∞–º–Ω—è (–æ—Å–∫–æ–ª–æ–∫)', description: '+150 –∫ –∫–ª–∏–∫—É', baseCost: 250000, costMultiplier: 1.7, type: 'click', value: 150, currentLevel: 0, requiredEssence: 500000 },
        { id: 'auto5', name: '–≠—Ñ–∏—Ä–Ω—ã–π –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä', description: '+250 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 1000000, costMultiplier: 2.0, type: 'auto', value: 250, currentLevel: 0, requiredEssence: 1200000 },
        { id: 'auto6', name: '–ü–æ—Ä—Ç–∞–ª –≤ –º–∏—Ä –≠—Å—Å–µ–Ω—Ü–∏–∏', description: '+1000 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 5000000, costMultiplier: 2.2, type: 'auto', value: 1000, currentLevel: 0, requiredEssence: 6000000 },
        { id: 'click5', name: '–ü—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ –¢–≤–æ—Ä—Ü–∞', description: '+1000 –∫ –∫–ª–∏–∫—É', baseCost: 10000000, costMultiplier: 1.8, type: 'click', value: 1000, currentLevel: 0, requiredEssence: 15000000 },
        { id: 'auto7', name: '–ü–æ—Ç–æ–∫ –ß–∏—Å—Ç–æ–π –ú–∞–≥–∏–∏', description: '+5000 –≤ —Å–µ–∫—É–Ω–¥—É', baseCost: 50000000, costMultiplier: 2.1, type: 'auto', value: 5000, currentLevel: 0, requiredEssence: 60000000 },
    ];

    // === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—É–∑—ã—Ä—å–∫–æ–≤ –∏ –∂–∏–¥–∫–æ—Å—Ç–∏ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
    function createBubble() {
        if (!bubblesContainer) return;
        const bubble = document.createElement('div');
        bubble.classList.add('bubble');
        const size = Math.random() * 8 + 6;
        const duration = Math.random() * 2.5 + 3;
        const delay = Math.random() * 1.5;
        const horizontalPosition = Math.random() * 90 + 5;
        bubble.style.width = `${size}px`;
        bubble.style.height = `${size}px`;
        bubble.style.left = `${horizontalPosition}%`;
        bubble.style.animationDuration = `${duration}s`;
        bubble.style.animationDelay = `${delay}s`;
        bubblesContainer.appendChild(bubble);
        setTimeout(() => { bubble.remove(); }, (duration + delay) * 1000 + 100);
    }

    function updateLiquidLevel(percentage) {
        const level = Math.max(0, Math.min(100, percentage));
        if (cauldronElement) {
            cauldronElement.style.setProperty('--liquid-level', `${level}%`);
        } else {
            console.warn("Cauldron element not found when trying to update liquid level.");
        }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—É–∑—ã—Ä—å–∫–æ–≤
    setInterval(createBubble, 500);

    // --- –ò–ó–ú–ï–ù–ï–ù–û: –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI (—Ç–µ–ø–µ—Ä—å –æ–¥–Ω–∞ –æ–±—â–∞—è) ---
    function updateDisplay() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Å—Å–µ–Ω—Ü–∏–∏
        if (essenceCountElement) {
            essenceCountElement.textContent = formatNumber(Math.floor(essence));
        }
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Å—Å–µ–Ω—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥—É
        if (essencePerSecondElement && perSecondDisplayDiv) {
             essencePerSecondElement.textContent = formatNumber(essencePerSecond);
             // –°–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ "/—Å–µ–∫", –µ—Å–ª–∏ –¥–æ—Ö–æ–¥ —Ä–∞–≤–µ–Ω 0
             perSecondDisplayDiv.style.display = essencePerSecond > 0 ? 'block' : 'none';
        }
        // --- –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ ---
        if (gemCountElement) {
            gemCountElement.textContent = formatNumber(gems);
        }
        // --- ---

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∂–∏–¥–∫–æ—Å—Ç–∏
        const maxEssenceForFullLiquid = 50000; // –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
        const currentLiquidLevel = Math.min(100, (essence / maxEssenceForFullLiquid) * 90 + 10);
        updateLiquidLevel(currentLiquidLevel);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Ä–µ–∂–µ, –Ω–æ –∑–¥–µ—Å—å –ø—Ä–æ—â–µ)
        if (!upgradesPanel.classList.contains('hidden')) {
            renderUpgrades();
        }
    }

    // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    function formatNumber(num) {
        if (isNaN(num) || !Number.isFinite(num)) { console.warn("formatNumber received invalid input:", num); return "ERR"; }
        if (num < 1000) return num.toString();
        if (num < 1000000) return (num / 1000).toFixed(1).replace('.0', '') + 'K';
        if (num < 1000000000) return (num / 1000000).toFixed(1).replace('.0', '') + 'M';
        return (num / 1000000000).toFixed(1).replace('.0', '') + 'B';
    }

    // --- –õ–æ–≥–∏–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ—Ç–ª—É (—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —à–∞–Ω—Å–∞ –Ω–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª) ---
    if (cauldronElement) {
        cauldronElement.addEventListener('click', () => {
            if (tg && tg.HapticFeedback) tg.HapticFeedback.impactOccurred('light');
            if (isBlocked) { showTemporaryNotification("–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–ª–∏–∫–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.", "error"); return; }

            const currentTime = Date.now();
            if (currentTime - lastClickTime >= MIN_CLICK_INTERVAL) {
                warningCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∫–ª–∏–∫–µ

                // 1. –î–æ–±–∞–≤–ª—è–µ–º —ç—Å—Å–µ–Ω—Ü–∏—é –∑–∞ –∫–ª–∏–∫
                if (Number.isFinite(essencePerClick)) {
                    essence += essencePerClick;
                    if (clickFeedbackContainer) showClickFeedback(`+${formatNumber(essencePerClick)}`, 'essence'); // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø —Ñ–∏–¥–±–µ–∫–∞
                } else { console.error("Invalid essencePerClick value:", essencePerClick); }

                // --- –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–Ω—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ ---
                if (Math.random() < GEM_AWARD_CHANCE) {
                    gems += GEMS_PER_AWARD;
                    console.log(`–ü–æ–ª—É—á–µ–Ω –∫—Ä–∏—Å—Ç–∞–ª–ª! –í—Å–µ–≥–æ: ${gems}`); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if (clickFeedbackContainer) showClickFeedback(`+${formatNumber(GEMS_PER_AWARD)} üíé`, 'gem'); // –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫ –¥–ª—è –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
                     // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è —Ä–µ–¥–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                     if (tg && tg.HapticFeedback) tg.HapticFeedback.impactOccurred('medium');
                }
                // --- ---

                // 3. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –í–°–ï–ì–û (—ç—Å—Å–µ–Ω—Ü–∏–∏, –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤, –∂–∏–¥–∫–æ—Å—Ç–∏)
                updateDisplay();

                // 4. –ê–Ω–∏–º–∞—Ü–∏—è –∫–ª–∏–∫–∞
                cauldronElement.style.transform = 'scale(0.95)';
                setTimeout(() => { cauldronElement.style.transform = 'scale(1)'; }, 80);

                lastClickTime = currentTime; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ *—É—Å–ø–µ—à–Ω–æ–≥–æ* –∫–ª–∏–∫–∞
            } else {
                // –õ–æ–≥–∏–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–µ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                warningCount++;
                console.warn(`Autoclicker warning ${warningCount}/${MAX_WARNINGS}`);
                showTemporaryNotification(`–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π –∫–ª–∏–∫! –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ${warningCount}/${MAX_WARNINGS}`, "warning");
                if (tg && tg.HapticFeedback) tg.HapticFeedback.impactOccurred('medium');
                if (warningCount >= MAX_WARNINGS) {
                    isBlocked = true;
                    console.error("Player blocked due to suspected autoclicker.");
                    showTemporaryNotification("–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–ª–∏–∫–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.", "error");
                    if (tg && tg.HapticFeedback) tg.HapticFeedback.notificationOccurred('error');
                    if(cauldronElement) { cauldronElement.classList.add('blocked-cauldron'); cauldronElement.style.cursor = 'not-allowed'; }
                }
                 // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º lastClickTime –ø—Ä–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–º –∫–ª–∏–∫–µ
            }
        });
    } else { console.error("Cauldron element not found!"); }

    // --- –ò–ó–ú–ï–ù–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "+N" –ø—Ä–∏ –∫–ª–∏–∫–µ (–¥–æ–±–∞–≤–ª–µ–Ω —Ç–∏–ø) ---
    function showClickFeedback(text, type = 'essence') { // type –º–æ–∂–µ—Ç –±—ã—Ç—å 'essence' –∏–ª–∏ 'gem'
        if (isBlocked || !clickFeedbackContainer) return;

        const feedback = document.createElement('div');
        feedback.className = 'click-feedback'; // –û–±—â–∏–π –∫–ª–∞—Å—Å
        feedback.textContent = text;

        // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if (type === 'gem') {
            feedback.style.color = '#f1c40f'; // –ó–æ–ª–æ—Ç–æ–π –¥–ª—è –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
            feedback.style.fontSize = '1.3em'; // –ß—É—Ç—å –∫—Ä—É–ø–Ω–µ–µ
            feedback.style.fontWeight = 'bold';
        } else {
            feedback.style.color = 'var(--accent-color)'; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —ç—Å—Å–µ–Ω—Ü–∏–∏
        }

        const offsetX = Math.random() * 60 - 30; // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ (-30px –¥–æ +30px)
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ: –¥–ª—è –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ —á—É—Ç—å –Ω–∏–∂–µ –∏ –ø—Ä–∞–≤–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å
        const offsetY = (type === 'gem') ? (Math.random() * 20 + 15) : (Math.random() * 20 - 10);

        feedback.style.left = `calc(50% + ${offsetX}px)`;
        feedback.style.top = `calc(50% + ${offsetY}px)`;

        clickFeedbackContainer.appendChild(feedback);
        setTimeout(() => { feedback.remove(); }, 950); // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
    }


    // --- –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ-–∫–ª–∏–∫–∞ (–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥) - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô, –ö–†–ò–°–¢–ê–õ–õ–´ –ù–ï –¢–†–û–ì–ê–ï–¢ ---
    setInterval(() => {
        if (!isBlocked && essencePerSecond > 0 && Number.isFinite(essencePerSecond)) {
            const essenceToAdd = essencePerSecond / 10;
            if (Number.isFinite(essenceToAdd)) {
                essence += essenceToAdd;
                // --- –ù–ï–¢ –õ–û–ì–ò–ö–ò –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ö–†–ò–°–¢–ê–õ–õ–û–í –ó–î–ï–°–¨ ---
                updateDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º –í–°–ï –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–≤–∫–ª—é—á–∞—è –∫—Ä–∏—Å—Ç–∞–ª–ª—ã, –Ω–æ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
            } else { console.warn("Skipping auto-click: essenceToAdd resulted in invalid number", essenceToAdd); }
        }
    }, 100);

    // --- –õ–æ–≥–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    function calculateCost(upgrade) {
        if (!upgrade || typeof upgrade.baseCost !== 'number' || typeof upgrade.costMultiplier !== 'number' || typeof upgrade.currentLevel !== 'number') { console.error("Invalid upgrade data in calculateCost:", upgrade); return Infinity; }
        return Math.floor(upgrade.baseCost * Math.pow(upgrade.costMultiplier, upgrade.currentLevel));
    }

    function renderUpgrades() {
        if (!upgradesListElement) { console.error("Upgrades list element not found!"); return; }
        upgradesListElement.innerHTML = '';
        upgrades.sort((a, b) => (a.requiredEssence || 0) - (b.requiredEssence || 0));
        if (upgrades.length === 0) { upgradesListElement.innerHTML = '<li><p>–£–ª—É—á—à–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.</p></li>'; return; }
        upgrades.forEach(upgrade => {
            const cost = calculateCost(upgrade);
            if (!Number.isFinite(cost)) { console.error("Skipping render for upgrade with invalid cost:", upgrade.id); return; }
            const requirement = upgrade.requiredEssence || 0;
            const currentEssenceFloored = Math.floor(essence); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
            const isLocked = currentEssenceFloored < requirement;
            const canAfford = currentEssenceFloored >= cost;
            const li = document.createElement('li');

            if (isLocked) li.classList.add('locked');
            else if (!canAfford) li.classList.add('cannot-afford'); // –î–æ–±–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å

            let buttonText = '–ö—É–ø–∏—Ç—å';
            let buttonDisabled = false; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ

            if (isLocked) {
                buttonDisabled = true;
                buttonText = `–ù—É–∂–Ω–æ ${formatNumber(requirement)} üß™`;
            } else if (!canAfford) {
                buttonDisabled = true;
                // buttonText –æ—Å—Ç–∞–µ—Ç—Å—è '–ö—É–ø–∏—Ç—å'
            }

            li.innerHTML = `
                <div class="upgrade-info">
                    <h3>${upgrade.name} (–£—Ä. ${upgrade.currentLevel})</h3>
                    <p>${upgrade.description}</p>
                    <p class="upgrade-cost">–°—Ç–æ–∏–º–æ—Å—Ç—å: ${formatNumber(cost)} üß™</p>
                    ${isLocked ? `<p class="requirement-info">–¢—Ä–µ–±—É–µ—Ç—Å—è: ${formatNumber(requirement)} üß™</p>` : ''}
                </div>
                <button class="buy-upgrade-btn" data-upgrade-id="${upgrade.id}">
                    ${buttonText}
                </button>
            `;
            const buyButton = li.querySelector('.buy-upgrade-btn');
            if (buyButton) {
                buyButton.disabled = buttonDisabled; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–æ disabled
                if (!isLocked) { // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
                     buyButton.addEventListener('click', () => { if (!buyButton.disabled) { buyUpgrade(upgrade.id); } });
                }
            }
            upgradesListElement.appendChild(li);
        });
    }


    function buyUpgrade(upgradeId) {
        if (isBlocked) { showTemporaryNotification("–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–π.", "error"); return; }
        const upgrade = upgrades.find(u => u.id === upgradeId);
        if (!upgrade) { console.error("Upgrade not found:", upgradeId); return; }
        const requirement = upgrade.requiredEssence || 0;
        if (Math.floor(essence) < requirement) { showTemporaryNotification(`–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ ${formatNumber(requirement)} —ç—Å—Å–µ–Ω—Ü–∏–∏!`, "error"); return; }
        const cost = calculateCost(upgrade);
        if (!Number.isFinite(cost)) { showTemporaryNotification("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è!", "error"); return; }
        if (essence >= cost) {
            essence -= cost;
            upgrade.currentLevel++;
            recalculateBonuses();
            updateDisplay(); // –û–±–Ω–æ–≤–∏—Ç –≤—Å–µ, –≤–∫–ª—é—á–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ renderUpgrades
            // renderUpgrades(); // –£–ñ–ï –í–´–ó–´–í–ê–ï–¢–°–Ø –í–ù–£–¢–†–ò updateDisplay, –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞
            if (tg && tg.HapticFeedback) tg.HapticFeedback.impactOccurred('light');
        } else {
            showTemporaryNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Å—Å–µ–Ω—Ü–∏–∏!", "error");
            if (tg && tg.HapticFeedback) tg.HapticFeedback.notificationOccurred('warning');
        }
    }

    function recalculateBonuses() {
        essencePerClick = 1; essencePerSecond = 0;
        upgrades.forEach(upgrade => {
            if (upgrade.currentLevel > 0 && Number.isFinite(upgrade.value) && typeof upgrade.type === 'string') {
                if (upgrade.type === 'click') essencePerClick += upgrade.value * upgrade.currentLevel;
                else if (upgrade.type === 'auto') essencePerSecond += upgrade.value * upgrade.currentLevel;
            } else if (upgrade.currentLevel > 0) { console.warn("Invalid upgrade data in recalculateBonuses for active upgrade:", upgrade); }
        });
        if (!Number.isFinite(essencePerClick)) { console.error("recalculateBonuses resulted in invalid essencePerClick"); essencePerClick = 1; }
        if (!Number.isFinite(essencePerSecond)) { console.error("recalculateBonuses resulted in invalid essencePerSecond"); essencePerSecond = 0; }
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ—Ö–æ–¥–∞ –≤ —Å–µ–∫—É–Ω–¥—É –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ updateDisplay()
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ª—É—á—à–µ–Ω–∏–π
    if (openUpgradesBtn && upgradesPanel) {
        openUpgradesBtn.addEventListener('click', () => {
             renderUpgrades(); // –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
             upgradesPanel.classList.remove('hidden');
         });
    } else { console.error("Open upgrades button or panel not found!"); }
    if (closeUpgradesBtn && upgradesPanel) {
        closeUpgradesBtn.addEventListener('click', () => { upgradesPanel.classList.add('hidden'); });
    } else { console.error("Close upgrades button or panel not found!"); }

    // --- –ë–õ–û–ö: –õ–æ–≥–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    function checkReferralAndBonus() { /* ... –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */ }
    function handleNewReferral(inviterId) { /* ... –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */ }
    function handleBonusClaim(referralId) { /* ... –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */ }
    if (inviteFriendBtn) { inviteFriendBtn.addEventListener('click', () => { /* ... –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */ }); }
    else { console.error("Invite friend button not found!"); }

    // --- –ò–ó–ú–ï–ù–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ CloudStorage (–¥–æ–±–∞–≤–ª–µ–Ω—ã gems) ---
    function saveGame() {
        if (!tg || !tg.CloudStorage) { console.error("CloudStorage unavailable for saving."); return; }
        if (!Number.isFinite(essence)) { console.error("Invalid essence value:", essence); essence = 0; }
        // --- –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º gems –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ---
        if (!Number.isFinite(gems)) { console.error("Invalid gems value:", gems); gems = 0; }

        const gameState = {
            essence: essence,
            gems: gems, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
            upgrades: upgrades.map(u => ({ id: u.id, level: u.currentLevel }))
        };
        // --- ---
        try {
            const gameStateString = JSON.stringify(gameState);
            tg.CloudStorage.setItem('gameState', gameStateString, (error) => {
                if (error) console.error("CloudStorage save error:", error);
                // else console.log("Game saved."); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            });
        }
        catch (e) { console.error("Error stringifying game state:", e); showTemporaryNotification("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", "error"); }
    }

    function loadGame() {
        isBlocked = false; warningCount = 0;
        if(cauldronElement) { cauldronElement.classList.remove('blocked-cauldron'); cauldronElement.style.cursor = 'pointer'; }
        if (!tg || !tg.CloudStorage) { console.error("CloudStorage unavailable for loading."); resetGameData(); updateDisplay(); showTemporaryNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.", "warning"); return; }

        console.log("Loading from CloudStorage...");
        tg.CloudStorage.getItem('gameState', (error, value) => {
            let loadedSuccessfully = false;
            if (error) { console.error("CloudStorage load error:", error); showTemporaryNotification("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!", "error"); resetGameData(); }
            else if (value) {
                console.log("Data received:", value.length + " bytes");
                try {
                    const gameState = JSON.parse(value);
                    // –ó–∞–≥—Ä—É–∑–∫–∞ —ç—Å—Å–µ–Ω—Ü–∏–∏
                    essence = Number(gameState.essence) || 0; if (!Number.isFinite(essence)) essence = 0;
                    // --- –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ ---
                    gems = Number(gameState.gems) || 0; if (!Number.isFinite(gems)) gems = 0;
                    // --- ---
                    // –ó–∞–≥—Ä—É–∑–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
                    upgrades.forEach(upgrade => {
                        const saved = gameState.upgrades?.find(su => su.id === upgrade.id);
                        upgrade.currentLevel = (saved && Number.isFinite(Number(saved.level))) ? Number(saved.level) : 0;
                    });
                    recalculateBonuses();
                    console.log("Game loaded successfully.");
                    loadedSuccessfully = true;
                } catch (e) { console.error("Error parsing loaded data:", e); showTemporaryNotification("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!", "error"); resetGameData(); }
            } else {
                 console.log("No save data found.");
                 resetGameData();
             }

            checkReferralAndBonus(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏/—Å–±—Ä–æ—Å–∞
            updateDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º –í–°–ï –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–≤–∫–ª—é—á–∞—è —É—Ä–æ–≤–µ–Ω—å –∂–∏–¥–∫–æ—Å—Ç–∏ –∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã)
        });
    }

    // --- –ò–ó–ú–ï–ù–ï–ù–û: –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö (–¥–æ–±–∞–≤–ª–µ–Ω —Å–±—Ä–æ—Å gems) ---
    function resetGameData() {
        isBlocked = false; warningCount = 0;
        if(cauldronElement) { cauldronElement.classList.remove('blocked-cauldron'); cauldronElement.style.cursor = 'pointer'; }
        essence = 0;
        gems = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
        upgrades.forEach(u => u.currentLevel = 0);
        recalculateBonuses();
        console.log("Game data reset.");
        updateLiquidLevel(10); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∂–∏–¥–∫–æ—Å—Ç–∏
        // updateDisplay() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –ø–æ—Å–ª–µ –≤ loadGame
    }

    // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    function showTemporaryNotification(message, type = "info") {
         const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        document.body.appendChild(notification);
        setTimeout(() => {
             notification.style.opacity = '1';
             notification.style.bottom = '80px';
         }, 10);
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.bottom = '70px';
            setTimeout(() => { notification.remove(); }, 500);
        }, 2500);
    }

    // --- –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    loadGame(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—É (–≤—ã–∑–æ–≤–µ—Ç updateDisplay)

    // --- –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤–∏–¥–∏–º–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–∏—è (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    setInterval(saveGame, 15000);
    window.addEventListener('beforeunload', saveGame);
    document.addEventListener('visibilitychange', () => { if (document.visibilityState === 'hidden') saveGame(); });
    if (tg && tg.onEvent) { tg.onEvent('viewportChanged', (event) => { if (!event.isStateStable) saveGame(); }); }

}); // –ö–æ–Ω–µ—Ü DOMContentLoaded