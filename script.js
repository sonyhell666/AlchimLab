// –§–∞–π–ª: script.js
// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞
document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    const tg = window.Telegram.WebApp;
    tg.ready();
    tg.expand();

    // --- –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã DOM ---
    const essenceCountElement = document.getElementById('essence-count');
    const cauldronElement = document.getElementById('cauldron');
    const openUpgradesBtn = document.getElementById('open-upgrades-btn');
    const essencePerSecondElement = document.getElementById('essence-per-second');
    const gemCountElement = document.getElementById('gem-count');
    const clickFeedbackContainer = document.getElementById('click-feedback-container');
    const closeUpgradesBtn = document.getElementById('close-upgrades-btn');
    const upgradesPanel = document.getElementById('upgrades-panel');
    const upgradesListElement = document.getElementById('upgrades-list');
    const userGreetingElement = document.getElementById('user-greeting');
    const inviteFriendBtn = document.getElementById('invite-friend-btn');
    const bubblesContainer = document.getElementById('bubbles-container');
    const perSecondDisplayDiv = document.getElementById('per-second-display');
    const settingsBtn = document.getElementById('settings-btn');
    const settingsPanel = document.getElementById('settings-panel');
    const closeSettingsBtn = document.getElementById('close-settings-btn');
    const languageOptionsContainer = settingsPanel ? settingsPanel.querySelector('.language-options') : null;
    const shopBtn = document.getElementById('shop-btn');
    const shopPanel = document.getElementById('shop-panel');
    const closeShopBtn = document.getElementById('close-shop-btn');
    const skinsListElement = document.getElementById('skins-list');
    const shopGemCountElement = document.getElementById('shop-gem-count');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (!essenceCountElement || !cauldronElement || !openUpgradesBtn || !upgradesPanel || !settingsPanel || !shopPanel || !inviteFriendBtn) {
        console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM. –†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.");
        return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
    }

    // --- –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ) ---
    let essence = 0;
    let essencePerClick = 1;
    let essencePerSecond = 0;
    let gems = 0;
    let ownedSkins = ['default'];
    let activeSkinId = 'default';
    const GEM_AWARD_CHANCE = 0.03; // 3% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª
    const GEMS_PER_AWARD = 1;
    let currentLanguage = 'ru'; // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let userName = tg.initDataUnsafe?.user?.first_name || null;

    // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞ ---
    let lastClickTime = 0;
    const MIN_CLICK_INTERVAL = 60; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏ –≤ –º—Å (—á—É—Ç—å —É–≤–µ–ª–∏—á–µ–Ω)
    const MAX_WARNINGS = 5; // –ë–æ–ª—å—à–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    let warningCount = 0;
    let isBlocked = false;

    // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∂–∏–¥–∫–æ—Å—Ç–∏ ---
    let visualLiquidLevel = 10; // –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ %
    const LIQUID_MIN_LEVEL = 10;
    const LIQUID_MAX_LEVEL = 95;
    const LIQUID_INCREASE_PER_CLICK = 1.0; // –ù–∞ —Å–∫–æ–ª—å–∫–æ % –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –∑–∞ –∫–ª–∏–∫
    const LIQUID_DECAY_RATE = 0.15; // –ù–∞ —Å–∫–æ–ª—å–∫–æ % –ø–∞–¥–∞–µ—Ç –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
    const LIQUID_UPDATE_INTERVAL = 100; // –ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å/–æ–±–Ω–æ–≤–ª—è—Ç—å —É—Ä–æ–≤–µ–Ω—å (–º—Å)
    const IDLE_TIMEOUT = 500; // –í—Ä–µ–º—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–ø–∞–¥–∞ —É—Ä–æ–≤–Ω—è (–º—Å)
    let lastInteractionTime = Date.now();

    // --- –û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ ---
    const translations = {
        greetingBase: { ru: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", en: "Laboratory" },
        perSec: { ru: "–≤ —Å–µ–∫", en: "/ sec" },
        upgradesButton: { ru: "–£–ª—É—á—à–µ–Ω–∏—è", en: "Upgrades" },
        inviteFriendsButton: { ru: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", en: "Invite Friends" },
        upgradesTitle: { ru: "–£–ª—É—á—à–µ–Ω–∏—è", en: "Upgrades" },
        settingsTitle: { ru: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", en: "Settings" },
        languageTitle: { ru: "–Ø–∑—ã–∫", en: "Language" },
        buyButton: { ru: "–ö—É–ø–∏—Ç—å", en: "Buy" },
        requirementPrefix: { ru: "–ù—É–∂–Ω–æ", en: "Need" },
        requirementInfoPrefix: { ru: "–¢—Ä–µ–±—É–µ—Ç—Å—è", en: "Requires" },
        tooFastClick: { ru: "–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!", en: "Clicking too fast!" },
        autoclickerBlocked: { ru: "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –ö–ª–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", en: "Autoclicker detected! Clicking temporarily blocked." },
        actionBlocked: { ru: "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.", en: "Action blocked." },
        needMoreEssence: { ru: "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —ç—Å—Å–µ–Ω—Ü–∏–∏!", en: "Need more essence!" },
        invalidCostError: { ru: "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è!", en: "Error: Invalid upgrade cost!" },
        notEnoughEssence: { ru: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Å—Å–µ–Ω—Ü–∏–∏!", en: "Not enough essence!" },
        loadErrorStartNew: { ru: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.", en: "Failed to load progress. Starting new game." },
        loadError: { ru: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!", en: "Error loading progress!" },
        readError: { ru: "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", en: "Error reading save data!" },
        saveCritError: { ru: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", en: "Critical save error!" },
        saveSuccess: { ru: "–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω", en: "Progress saved" }, // –î–æ–±–∞–≤–ª–µ–Ω–æ
        welcomeReferral: { ru: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –±–æ–Ω—É—Å.", en: "Welcome! Your inviter gets a bonus." },
        referralRegErrorBot: { ru: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–æ—à–∏–±–∫–∞ –±–æ—Ç–∞).", en: "Could not register invite (bot error)." },
        referralRegErrorFunc: { ru: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞).", en: "Could not register invite (feature unavailable)." },
        bonusCheckError: { ru: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–Ω—É—Å–∞!", en: "Bonus check error!" },
        bonusAlreadyClaimed: { ru: "–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω.", en: "Bonus already claimed." },
        bonusReasonFriend: { ru: "–∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!", en: "for invited friend!" },
        bonusAddError: { ru: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!", en: "Bonus add error!" },
        inviteLinkError: { ru: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", en: "Failed to create invite link." },
        shareText: { ru: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –º–æ–µ–π –ê–ª—Ö–∏–º–∏—á–µ—Å–∫–æ–π –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –≤ Telegram! üß™‚öóÔ∏è –ö–ª–∏–∫–∞–π –∏ —Å–æ–∑–¥–∞–≤–∞–π —ç–ª–∏–∫—Å–∏—Ä—ã!', en: 'Join my Alchemy Lab in Telegram! üß™‚öóÔ∏è Click and create elixirs!' },
        shopTitle: { ru: "–ú–∞–≥–∞–∑–∏–Ω", en: "Shop" },
        yourGems: { ru: "–í–∞—à–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã:", en: "Your Gems:" },
        selectButton: { ru: "–í—ã–±—Ä–∞—Ç—å", en: "Select" },
        selectedButton: { ru: "–í—ã–±—Ä–∞–Ω–æ", en: "Selected" },
        notEnoughGems: { ru: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!", en: "Not enough gems!" },
        skinPurchaseSuccess: { ru: "–°–∫–∏–Ω –∫—É–ø–ª–µ–Ω!", en: "Skin purchased!" },
        skinSelected: { ru: "–°–∫–∏–Ω –≤—ã–±—Ä–∞–Ω!", en: "Skin selected!" },
        skin_default_name: { ru: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–ª–±–∞", en: "Standard Flask" },
        skin_gold_name: { ru: "–ó–æ–ª–æ—Ç–∞—è –∫–æ–ª–±–∞", en: "Golden Flask" },
        skin_crystal_name: { ru: "–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —Å–æ—Å—É–¥", en: "Crystal Vial" },
        skin_obsidian_name: { ru: "–û–±—Å–∏–¥–∏–∞–Ω–æ–≤–∞—è —Ä–µ—Ç–æ—Ä—Ç–∞", en: "Obsidian Retort" },
        upgrade_click1_name: { ru: "–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", en: "Improved Recipe" },
        upgrade_click1_desc: { ru: "+1 –∫ –∫–ª–∏–∫—É", en: "+1 per click" },
        upgrade_auto1_name: { ru: "–ì–æ–º—É–Ω–∫—É–ª-–ü–æ–º–æ—â–Ω–∏–∫", en: "Homunculus Helper" },
        upgrade_auto1_desc: { ru: "+1 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+1 per second" },
        upgrade_click2_name: { ru: "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—É–ø–∫–∞", en: "Enchanted Mortar" },
        upgrade_click2_desc: { ru: "+5 –∫ –∫–ª–∏–∫—É", en: "+5 per click" },
        upgrade_auto2_name: { ru: "–ü—É–∑—ã—Ä—è—â–∏–π—Å—è –∫–æ—Ç–µ–ª", en: "Bubbling Cauldron" },
        upgrade_auto2_desc: { ru: "+4 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+4 per second" },
        upgrade_click3_name: { ru: "–ê–ª–µ–º–±–∏–∫ –ú–∞—Å—Ç–µ—Ä–∞", en: "Master's Alembic" },
        upgrade_click3_desc: { ru: "+25 –∫ –∫–ª–∏–∫—É", en: "+25 per click" },
        upgrade_auto3_name: { ru: "–ü—Ä–∏–∑–≤–∞–Ω–Ω—ã–π –ò—Ñ—Ä–∏—Ç", en: "Summoned Ifrit" },
        upgrade_auto3_desc: { ru: "+20 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+20 per second" },
        upgrade_auto4_name: { ru: "–°–∞–¥ –ê–ª—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –†–∞—Å—Ç–µ–Ω–∏–π", en: "Garden of Alchemical Plants" },
        upgrade_auto4_desc: { ru: "+50 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+50 per second" },
        upgrade_click4_name: { ru: "–°–∏–ª–∞ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–≥–æ –ö–∞–º–Ω—è (–æ—Å–∫–æ–ª–æ–∫)", en: "Power of the Philosopher's Stone (Shard)" },
        upgrade_click4_desc: { ru: "+150 –∫ –∫–ª–∏–∫—É", en: "+150 per click" },
        upgrade_auto5_name: { ru: "–≠—Ñ–∏—Ä–Ω—ã–π –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä", en: "Aether Concentrator" },
        upgrade_auto5_desc: { ru: "+250 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+250 per second" },
        upgrade_auto6_name: { ru: "–ü–æ—Ä—Ç–∞–ª –≤ –º–∏—Ä –≠—Å—Å–µ–Ω—Ü–∏–∏", en: "Portal to the Essence Realm" },
        upgrade_auto6_desc: { ru: "+1000 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+1000 per second" },
        upgrade_click5_name: { ru: "–ü—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ –¢–≤–æ—Ä—Ü–∞", en: "Creator's Touch" },
        upgrade_click5_desc: { ru: "+1000 –∫ –∫–ª–∏–∫—É", en: "+1000 per click" },
        upgrade_auto7_name: { ru: "–ü–æ—Ç–æ–∫ –ß–∏—Å—Ç–æ–π –ú–∞–≥–∏–∏", en: "Flow of Pure Magic" },
        upgrade_auto7_desc: { ru: "+5000 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+5000 per second" },
    };

    // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π ---
    const upgrades = [
        { id: 'click1', nameKey: 'upgrade_click1_name', descKey: 'upgrade_click1_desc', baseCost: 15, costMultiplier: 1.4, type: 'click', value: 1, currentLevel: 0, requiredEssence: 0 },
        { id: 'auto1', nameKey: 'upgrade_auto1_name', descKey: 'upgrade_auto1_desc', baseCost: 60, costMultiplier: 1.6, type: 'auto', value: 1, currentLevel: 0, requiredEssence: 0 },
        { id: 'click2', nameKey: 'upgrade_click2_name', descKey: 'upgrade_click2_desc', baseCost: 300, costMultiplier: 1.5, type: 'click', value: 5, currentLevel: 0, requiredEssence: 500 },
        { id: 'auto2', nameKey: 'upgrade_auto2_name', descKey: 'upgrade_auto2_desc', baseCost: 750, costMultiplier: 1.7, type: 'auto', value: 4, currentLevel: 0, requiredEssence: 700 },
        { id: 'click3', nameKey: 'upgrade_click3_name', descKey: 'upgrade_click3_desc', baseCost: 5000, costMultiplier: 1.6, type: 'click', value: 25, currentLevel: 0, requiredEssence: 10000 },
        { id: 'auto3', nameKey: 'upgrade_auto3_name', descKey: 'upgrade_auto3_desc', baseCost: 12000, costMultiplier: 1.8, type: 'auto', value: 20, currentLevel: 0, requiredEssence: 15000 },
        { id: 'auto4', nameKey: 'upgrade_auto4_name', descKey: 'upgrade_auto4_desc', baseCost: 30000, costMultiplier: 1.9, type: 'auto', value: 50, currentLevel: 0, requiredEssence: 40000 },
        { id: 'click4', nameKey: 'upgrade_click4_name', descKey: 'upgrade_click4_desc', baseCost: 250000, costMultiplier: 1.7, type: 'click', value: 150, currentLevel: 0, requiredEssence: 500000 },
        { id: 'auto5', nameKey: 'upgrade_auto5_name', descKey: 'upgrade_auto5_desc', baseCost: 1000000, costMultiplier: 2.0, type: 'auto', value: 250, currentLevel: 0, requiredEssence: 1200000 },
        { id: 'auto6', nameKey: 'upgrade_auto6_name', descKey: 'upgrade_auto6_desc', baseCost: 5000000, costMultiplier: 2.2, type: 'auto', value: 1000, currentLevel: 0, requiredEssence: 6000000 },
        { id: 'click5', nameKey: 'upgrade_click5_name', descKey: 'upgrade_click5_desc', baseCost: 10000000, costMultiplier: 1.8, type: 'click', value: 1000, currentLevel: 0, requiredEssence: 15000000 },
        { id: 'auto7', nameKey: 'upgrade_auto7_name', descKey: 'upgrade_auto7_desc', baseCost: 50000000, costMultiplier: 2.1, type: 'auto', value: 5000, currentLevel: 0, requiredEssence: 60000000 },
    ];

    // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–∏–Ω–æ–≤ ---
    const availableSkins = [
        { id: 'default', nameKey: 'skin_default_name', cost: 0, cssClass: 'skin-default' },
        { id: 'gold', nameKey: 'skin_gold_name', cost: 15, cssClass: 'skin-gold' },
        { id: 'crystal', nameKey: 'skin_crystal_name', cost: 50, cssClass: 'skin-crystal' },
        { id: 'obsidian', nameKey: 'skin_obsidian_name', cost: 100, cssClass: 'skin-obsidian' },
    ];

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—É–∑—ã—Ä—å–∫–æ–≤ ---
    function createBubble() { if (!bubblesContainer) return; const b = document.createElement('div'); b.classList.add('bubble'); const s = Math.random() * 8 + 6; const d = Math.random() * 2.5 + 3; const l = Math.random() * 1.5; const h = Math.random() * 90 + 5; b.style.width = `${s}px`; b.style.height = `${s}px`; b.style.left = `${h}%`; b.style.animationDuration = `${d}s`; b.style.animationDelay = `${l}s`; bubblesContainer.appendChild(b); setTimeout(() => { b.remove(); }, (d + l) * 1000 + 100); }
    if (bubblesContainer) { setInterval(createBubble, 500); } else { console.warn("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—É–∑—ã—Ä—å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω."); }

    // --- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∞ –∂–∏–¥–∫–æ—Å—Ç–∏ ---
    function updateLiquidLevelVisual(percentage) {
        const l = Math.max(LIQUID_MIN_LEVEL, Math.min(LIQUID_MAX_LEVEL, percentage));
        cauldronElement.style.setProperty('--liquid-level', `${l}%`);
        if(bubblesContainer) {
            bubblesContainer.style.height = `${l}%`;
        }
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –∂–∏–¥–∫–æ—Å—Ç–∏ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ –õ–æ–Ω–¥–æ–Ω–∞/UTC) ---
    function getLondonHour() {
        const now = new Date();
        return now.getUTCHours(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC
    }

    function getLiquidColorByLondonTime() {
        const hour = getLondonHour();
        const alpha = 0.35; // –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å

        if (hour >= 22 || hour < 5) return `rgba(40, 40, 100, ${alpha})`; // –ù–æ—á—å
        if (hour >= 5 && hour < 7)  return `rgba(255, 150, 100, ${alpha})`; // –†–∞—Å—Å–≤–µ—Ç
        if (hour >= 7 && hour < 11) return `rgba(100, 180, 220, ${alpha})`; // –£—Ç—Ä–æ
        if (hour >= 11 && hour < 17) return `rgba(220, 220, 100, ${alpha})`; // –î–µ–Ω—å
        if (hour >= 17 && hour < 20) return `rgba(255, 120, 50, ${alpha})`; // –ó–∞–∫–∞—Ç
        return `rgba(70, 70, 150, ${alpha})`; // –í–µ—á–µ—Ä (20:00 - 21:59 UTC)
    }

    function updateLiquidColor() {
        const color = getLiquidColorByLondonTime();
        cauldronElement.style.setProperty('--liquid-color', color);
    }
    // --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –∂–∏–¥–∫–æ—Å—Ç–∏ ---

    // --- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI ---
    function updateDisplay() {
        essenceCountElement.textContent = formatNumber(Math.floor(essence));
        if (essencePerSecondElement && perSecondDisplayDiv) {
            essencePerSecondElement.textContent = formatNumber(essencePerSecond);
            perSecondDisplayDiv.style.display = essencePerSecond > 0 ? 'block' : 'none';
        }
        if (gemCountElement) gemCountElement.textContent = formatNumber(gems);

        updateLiquidLevelVisual(visualLiquidLevel);

        if (!upgradesPanel.classList.contains('hidden')) {
            updateUpgradeButtonStates();
        }
        if (!shopPanel.classList.contains('hidden')) {
            updateSkinButtonStates();
        }
    }

    // --- –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª ---
    function formatNumber(num) {
        if (isNaN(num) || !Number.isFinite(num)) { console.warn("formatNumber –ø–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", num); return "ERR"; }
        if (num < 1000) return num.toString();
        const abbreviations = ["", "K", "M", "B", "T", "q", "Q", "s", "S", "O", "N", "d", "U"]; // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
        let i = 0;
        let tempNum = num; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        while (tempNum >= 1000 && i < abbreviations.length - 1) {
            tempNum /= 1000;
            i++;
        }
        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å
        const formattedNum = tempNum % 1 === 0 ? tempNum.toString() : tempNum.toFixed(1);
        return formattedNum + abbreviations[i];
    }


    // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "+N" –ø—Ä–∏ –∫–ª–∏–∫–µ ---
    function showClickFeedback(amount, type = 'essence') {
        if (isBlocked || !clickFeedbackContainer) return;
        const feedbackElement = document.createElement('div');
        feedbackElement.className = 'click-feedback';
        const formattedAmount = formatNumber(amount);
        if (type === 'gem') {
            const svgIconHtml = `<span class="gem-icon" style="display:inline-flex; vertical-align: middle; margin-left: 4px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="1em" height="1em" fill="var(--gem-color)"><path d="M12 1.68l-8 8.42L12 22.32l8-8.42L12 1.68zm0 2.1l5.95 6.27L12 18.54l-5.95-6.27L12 3.78z M6.4 10.1L12 16.1l5.6-6H6.4z"></path></svg></span>`;
            feedbackElement.innerHTML = `+${formattedAmount}${svgIconHtml}`;
            feedbackElement.style.fontSize = '1.3em';
            feedbackElement.style.fontWeight = 'bold';
            feedbackElement.style.color = 'var(--gem-color)';
        } else {
            feedbackElement.textContent = `+${formattedAmount} üß™`;
            feedbackElement.style.color = 'var(--accent-color)'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –∞–∫—Ü–µ–Ω—Ç–∞ –¥–ª—è —ç—Å—Å–µ–Ω—Ü–∏–∏
        }
        // –°–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ä–∞–∑–ª–µ—Ç–∞–Ω–∏—è
        const offsetX = Math.random() * 60 - 30;
        const offsetY = (type === 'gem') ? (Math.random() * 20 + 15) : (Math.random() * 20 - 10); // –ì–µ–º—ã —á—É—Ç—å –≤—ã—à–µ
        feedbackElement.style.left = `calc(50% + ${offsetX}px)`;
        feedbackElement.style.top = `calc(50% + ${offsetY}px)`; // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

        clickFeedbackContainer.appendChild(feedbackElement);
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => { feedbackElement.remove(); }, 950); // –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∞–Ω–∏–º–∞—Ü–∏–∏ fadeUp
    }


    // --- –õ–æ–≥–∏–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ—Ç–ª—É ---
    cauldronElement.addEventListener('click', () => {
        const currentTime = Date.now();
        // Haptic feedback
        tg.HapticFeedback?.impactOccurred('light');

        if (isBlocked) {
            showTemporaryNotification(translations.autoclickerBlocked[currentLanguage], "error");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–ª–∏–∫–∞
        if (currentTime - lastClickTime >= MIN_CLICK_INTERVAL) {
            warningCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∫–ª–∏–∫–µ
            lastInteractionTime = currentTime; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è

            // –î–æ–±–∞–≤–ª—è–µ–º —ç—Å—Å–µ–Ω—Ü–∏—é
            const clickAmount = essencePerClick;
            if (Number.isFinite(clickAmount) && clickAmount > 0) {
                essence += clickAmount;
                if (clickFeedbackContainer) showClickFeedback(clickAmount, 'essence');
            } else {
                console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ essencePerClick:", essencePerClick);
            }

            // –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª
            if (Math.random() < GEM_AWARD_CHANCE) {
                gems += GEMS_PER_AWARD;
                console.log(`+${GEMS_PER_AWARD} –∫—Ä–∏—Å—Ç–∞–ª–ª! –í—Å–µ–≥–æ: ${gems}`);
                if (clickFeedbackContainer) showClickFeedback(GEMS_PER_AWARD, 'gem');
                tg.HapticFeedback?.impactOccurred('medium'); // –ë–æ–ª–µ–µ —Å–∏–ª—å–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –∑–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª
            }

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∂–∏–¥–∫–æ—Å—Ç–∏
            visualLiquidLevel = Math.min(visualLiquidLevel + LIQUID_INCREASE_PER_CLICK, LIQUID_MAX_LEVEL);

            updateDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º UI (–≤–∫–ª—é—á–∞—è —Å—á–µ—Ç—á–∏–∫–∏ –∏ —É—Ä–æ–≤–µ–Ω—å –∂–∏–¥–∫–æ—Å—Ç–∏)

            // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
            cauldronElement.style.transform = 'scale(0.95)';
            setTimeout(() => { cauldronElement.style.transform = 'scale(1)'; }, 80);

            lastClickTime = currentTime;
        } else {
            // –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π –∫–ª–∏–∫
            warningCount++;
            lastInteractionTime = currentTime; // –í—Å–µ —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º, —á—Ç–æ–±—ã –∂–∏–¥–∫–æ—Å—Ç—å –Ω–µ –ø–∞–¥–∞–ª–∞
            console.warn(`–ë—ã—Å—Ç—Ä—ã–π –∫–ª–∏–∫ ${warningCount}/${MAX_WARNINGS}`);
            showTemporaryNotification(`${translations.tooFastClick[currentLanguage]} (${warningCount}/${MAX_WARNINGS})`, "warning");
            tg.HapticFeedback?.impactOccurred('medium');

            // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            if (warningCount >= MAX_WARNINGS) {
                isBlocked = true;
                console.error("–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.");
                showTemporaryNotification(translations.autoclickerBlocked[currentLanguage], "error");
                tg.HapticFeedback?.notificationOccurred('error');
                cauldronElement.classList.add('blocked-cauldron');
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                // setTimeout(() => {
                //     isBlocked = false;
                //     warningCount = 0;
                //     cauldronElement.classList.remove('blocked-cauldron');
                //     showTemporaryNotification("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞.", "info");
                // }, 30000); // –ù–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
            }
        }
    });


    // --- –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ-–∫–ª–∏–∫–∞ ---
    try {
        setInterval(() => {
            if (!isBlocked && essencePerSecond > 0 && Number.isFinite(essencePerSecond)) {
                const essenceToAdd = essencePerSecond / 10; // –î–æ–±–∞–≤–ª—è–µ–º 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                if (Number.isFinite(essenceToAdd) && essenceToAdd > 0) {
                    essence += essenceToAdd;
                    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π —Ä–µ–∂–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª updateDisplay –∏–ª–∏ –∫–ª–∏–∫–∏
                } else if (essenceToAdd !== 0) { // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ 0
                    console.warn("–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—Ä—Ü–∏—è —ç—Å—Å–µ–Ω—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–∫–ª–∏–∫–∞:", essenceToAdd);
                }
            }
        }, 100); // –ò–Ω—Ç–µ—Ä–≤–∞–ª 100–º—Å = 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
    } catch(e) { console.error("–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –∞–≤—Ç–æ–∫–ª–∏–∫–∞:", e); }

    // --- –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∂–∏–¥–∫–æ—Å—Ç–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI ---
    try {
        setInterval(() => {
            const currentTime = Date.now();
            // –£–º–µ–Ω—å—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∂–∏–¥–∫–æ—Å—Ç–∏ –ø—Ä–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏
            if (!isBlocked && currentTime - lastInteractionTime > IDLE_TIMEOUT && visualLiquidLevel > LIQUID_MIN_LEVEL) {
                visualLiquidLevel = Math.max(visualLiquidLevel - LIQUID_DECAY_RATE, LIQUID_MIN_LEVEL);
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏—Å–ø–ª–µ–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ
            updateDisplay();
        }, LIQUID_UPDATE_INTERVAL);
    } catch(e) { console.error("–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI/–∂–∏–¥–∫–æ—Å—Ç–∏:", e); }


    // --- –õ–æ–≥–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π ---
    function calculateCost(upgrade) {
        if (!upgrade || typeof upgrade.baseCost !== 'number' || typeof upgrade.costMultiplier !== 'number' || typeof upgrade.currentLevel !== 'number') {
            console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:", upgrade);
            return Infinity; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –ø–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
        }
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º BigInt –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –µ—Å–ª–∏ —É—Ä–æ–≤–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º–∏
        // –ù–æ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –∏ —Ü–µ–Ω Number –¥–æ–ª–∂–µ–Ω —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è
        return Math.floor(upgrade.baseCost * Math.pow(upgrade.costMultiplier, upgrade.currentLevel));
    }


    function renderUpgrades() {
        if (!upgradesListElement) { console.error("–≠–ª–µ–º–µ–Ω—Ç #upgrades-list –Ω–µ –Ω–∞–π–¥–µ–Ω!"); return; }
        upgradesListElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ª–æ–≥–∏—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ)
        upgrades.sort((a, b) => (a.requiredEssence || 0) - (b.requiredEssence || 0));

        if (upgrades.length === 0) { upgradesListElement.innerHTML = `<li><p>–£–ª—É—á—à–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.</p></li>`; return; }

        const currentEssenceFloored = Math.floor(essence);

        upgrades.forEach(upgrade => {
            const cost = calculateCost(upgrade);
            if (!Number.isFinite(cost)) {
                console.error("–ü—Ä–æ–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é:", upgrade.id, cost);
                return;
            }

            const required = upgrade.requiredEssence || 0;
            const isLocked = currentEssenceFloored < required; // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é —ç—Å—Å–µ–Ω—Ü–∏–∏
            const canAfford = currentEssenceFloored >= cost; // –•–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤

            const listItem = document.createElement('li');
            listItem.dataset.upgradeId = upgrade.id; // –î–ª—è –ª–µ–≥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏

            listItem.classList.toggle('locked', isLocked);
            listItem.classList.toggle('cannot-afford', !isLocked && !canAfford); // –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤, –Ω–æ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ

            const translatedName = translations[upgrade.nameKey]?.[currentLanguage] || upgrade.nameKey;
            const translatedDesc = translations[upgrade.descKey]?.[currentLanguage] || upgrade.descKey;
            const buyButtonText = translations.buyButton?.[currentLanguage] || "–ö—É–ø–∏—Ç—å";
            const requirementPrefix = translations.requirementPrefix?.[currentLanguage] || "–ù—É–∂–Ω–æ";
            const requirementInfoPrefix = translations.requirementInfoPrefix?.[currentLanguage] || "–¢—Ä–µ–±—É–µ—Ç—Å—è";

            let buttonText = buyButtonText;
            let isButtonDisabled = isLocked || !canAfford; // –ö–Ω–æ–ø–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –µ—Å–ª–∏ –∑–∞–ª–æ—á–µ–Ω–æ –∏–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤

            if (isLocked) {
                buttonText = `${requirementPrefix} ${formatNumber(required)} üß™`;
            }

            // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
            listItem.innerHTML = `
                <div class="upgrade-info">
                    <h3>${translatedName} (–£—Ä. ${upgrade.currentLevel})</h3>
                    <p>${translatedDesc}</p>
                    <p class="upgrade-cost">–¶–µ–Ω–∞: ${formatNumber(cost)} üß™</p>
                    <p class="requirement-info" style="display: ${isLocked ? 'block' : 'none'};">
                        ${requirementInfoPrefix}: ${formatNumber(required)} üß™
                    </p>
                </div>
                <button class="buy-upgrade-btn" data-upgrade-id="${upgrade.id}">${buttonText}</button>
            `;

            const buyButton = listItem.querySelector('.buy-upgrade-btn');
            if (buyButton) {
                buyButton.disabled = isButtonDisabled;
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞ –í–°–ï–ì–î–ê, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º disabled –≤–Ω—É—Ç—Ä–∏
                buyButton.addEventListener('click', (event) => {
                    event.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
                    if (!buyButton.disabled) { // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
                        buyUpgrade(upgrade.id);
                    } else {
                         console.log("–ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ —É–ª—É—á—à–µ–Ω–∏—è:", upgrade.id);
                         tg.HapticFeedback?.notificationOccurred('warning'); // –õ–µ–≥–∫–∏–π —Ñ–∏–¥–±–µ–∫ –æ –Ω–µ—É–¥–∞—á–µ
                         // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?
                         if (isLocked) {
                             showTemporaryNotification(`${translations.requirementInfoPrefix[currentLanguage]}: ${formatNumber(required)} üß™`, "warning");
                         } else if (!canAfford) {
                            showTemporaryNotification(translations.notEnoughEssence[currentLanguage], "warning");
                         }
                    }
                });
            }
            upgradesListElement.appendChild(listItem);
        });
    }


    function buyUpgrade(upgradeId) {
        if (isBlocked) { showTemporaryNotification(translations.actionBlocked[currentLanguage], "error"); return; }
        const upgrade = upgrades.find(up => up.id === upgradeId);
        if (!upgrade) { console.error("–£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:", upgradeId); return; }

        const required = upgrade.requiredEssence || 0;
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if (Math.floor(essence) < required) {
            showTemporaryNotification(`${translations.requirementInfoPrefix[currentLanguage]}: ${formatNumber(required)} üß™`, "warning");
            tg.HapticFeedback?.notificationOccurred('warning');
            return;
        }

        const cost = calculateCost(upgrade);
        if (!Number.isFinite(cost)) {
            showTemporaryNotification(translations.invalidCostError[currentLanguage], "error");
            console.error("–ü–æ–ø—ã—Ç–∫–∞ –∫—É–ø–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é:", upgradeId, cost);
            return;
        }

        if (essence >= cost) {
            essence -= cost;
            upgrade.currentLevel++;
            recalculateBonuses(); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            // –ù–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å updateDisplay() –∑–¥–µ—Å—å, —Ç.–∫. renderUpgrades –µ–≥–æ –≤—ã–∑–æ–≤–µ—Ç —á–µ—Ä–µ–∑ updateUpgradeButtonStates
            renderUpgrades(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å, —Ü–µ–Ω—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
            saveGame(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            tg.HapticFeedback?.impactOccurred('light'); // –§–∏–¥–±–µ–∫ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        } else {
            // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É canAfford, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            showTemporaryNotification(translations.notEnoughEssence[currentLanguage], "warning");
            tg.HapticFeedback?.notificationOccurred('warning');
        }
    }


    function recalculateBonuses() {
        let clickBonus = 0;
        let autoBonus = 0;
        upgrades.forEach(upgrade => {
            if (upgrade.currentLevel > 0 && Number.isFinite(upgrade.value) && typeof upgrade.type === 'string') {
                const bonusFromUpgrade = upgrade.value * upgrade.currentLevel;
                if (upgrade.type === 'click') {
                    clickBonus += bonusFromUpgrade;
                } else if (upgrade.type === 'auto') {
                    autoBonus += bonusFromUpgrade;
                }
            } else if (upgrade.currentLevel > 0) { // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å > 0, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã
                console.warn("–£–ª—É—á—à–µ–Ω–∏–µ —Å —É—Ä–æ–≤–Ω–µ–º > 0 –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–∞:", upgrade);
            }
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ + –±–æ–Ω—É—Å—ã
        essencePerClick = 1 + clickBonus;
        essencePerSecond = autoBonus;

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏—Ç–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (!Number.isFinite(essencePerClick) || essencePerClick < 1) {
            console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ essencePerClick –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:", essencePerClick, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ 1.");
            essencePerClick = 1;
        }
        if (!Number.isFinite(essencePerSecond) || essencePerSecond < 0) {
             console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ essencePerSecond –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—á–µ—Ç–∞:", essencePerSecond, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ 0.");
            essencePerSecond = 0;
        }
        // console.log(`–ë–æ–Ω—É—Å—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã: Click=${essencePerClick}, Auto=${essencePerSecond}`); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    }


    // --- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π ---
    function updateUpgradeButtonStates() {
        if (!upgradesListElement || upgradesPanel.classList.contains('hidden')) {
            return; // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å —Å–∫—Ä—ã—Ç–∞
        }

        const currentEssenceFloored = Math.floor(essence);
        const upgradeListItems = upgradesListElement.querySelectorAll('li[data-upgrade-id]');

        upgradesListItems.forEach(listItem => {
            const button = listItem.querySelector('.buy-upgrade-btn');
            const upgradeId = listItem.dataset.upgradeId;
            if (!button || !upgradeId) return;

            const upgrade = upgrades.find(up => up.id === upgradeId);
            if (!upgrade) return;

            const cost = calculateCost(upgrade);
            const required = upgrade.requiredEssence || 0;
            const isLocked = currentEssenceFloored < required;
            const canAfford = currentEssenceFloored >= cost;
            const isButtonDisabled = isLocked || !canAfford;

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            listItem.classList.toggle('locked', isLocked);
            listItem.classList.toggle('cannot-afford', !isLocked && !canAfford);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ disabled –∫–Ω–æ–ø–∫–∏
            if (button.disabled !== isButtonDisabled) {
                button.disabled = isButtonDisabled;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å "–ö—É–ø–∏—Ç—å" –Ω–∞ "–ù—É–∂–Ω–æ N")
            let buttonText = translations.buyButton[currentLanguage];
            if (isLocked) {
                 buttonText = `${translations.requirementPrefix[currentLanguage]} ${formatNumber(required)} üß™`;
            }
             // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–æ–∫
            if (button.textContent !== buttonText && !isButtonDisabled) { // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ç–µ–∫—Å—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                button.textContent = buttonText;
            } else if (isLocked && button.textContent !== buttonText) { // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
                 button.textContent = buttonText;
            }


            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ü–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
            const costElement = listItem.querySelector('.upgrade-cost');
            if (costElement) {
                 const costText = `–¶–µ–Ω–∞: ${formatNumber(cost)} üß™`;
                 if (costElement.textContent !== costText) {
                     costElement.textContent = costText;
                 }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
            const requirementInfoElement = listItem.querySelector('.requirement-info');
            if (requirementInfoElement) {
                const requirementText = `${translations.requirementInfoPrefix[currentLanguage]}: ${formatNumber(required)} üß™`;
                if (requirementInfoElement.textContent !== requirementText) {
                     requirementInfoElement.textContent = requirementText;
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                const shouldBeVisible = isLocked;
                if ((requirementInfoElement.style.display === 'none') === shouldBeVisible) {
                    requirementInfoElement.style.display = shouldBeVisible ? 'block' : 'none';
                }
            }
        });
    }


    // --- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å–∫–∏–Ω–æ–≤ ---
    function updateSkinButtonStates() {
        if (!skinsListElement || shopPanel.classList.contains('hidden')) {
            return; // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å —Å–∫—Ä—ã—Ç–∞
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–µ–º–æ–≤ –≤ —à–∞–ø–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞
        if (shopGemCountElement) {
            const formattedGems = formatNumber(gems);
            if (shopGemCountElement.textContent !== formattedGems) {
                shopGemCountElement.textContent = formattedGems;
            }
        }

        const skinListItems = skinsListElement.querySelectorAll('li[data-skin-id]');

        skinListItems.forEach(listItem => {
            const skinId = listItem.dataset.skinId;
            if (!skinId) return;
            const skin = availableSkins.find(s => s.id === skinId);
            if (!skin) return;

            const buyButton = listItem.querySelector('.skin-action-btn.buy-btn');
            const selectButton = listItem.querySelector('.skin-action-btn.select-btn');
            const selectedButton = listItem.querySelector('.skin-action-btn.selected-btn');

            const isOwned = ownedSkins.includes(skinId);
            const isActive = activeSkinId === skinId;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
            listItem.classList.toggle('active-skin', isActive);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å", –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if (buyButton && !isOwned) {
                const canAfford = gems >= skin.cost;
                if (buyButton.disabled === canAfford) { // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                     buyButton.disabled = !canAfford;
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è –∫–Ω–æ–ø–∫–∞ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (–∫—É–ø–ª–µ–Ω/–Ω–µ –∫—É–ø–ª–µ–Ω/–∞–∫—Ç–∏–≤–µ–Ω)
            // –≠—Ç–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞, —á–µ–º –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ disabled, —Ç.–∫. —Ç–∏–ø –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—è–µ—Ç—Å—è.
            // –ü—Ä–æ—â–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ/–≤—ã–±–æ—Ä–µ, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ —Å–µ–π—á–∞—Å –≤ buySkin/setActiveSkin.
            // –ü–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ disabled –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å".
        });
    }


    // --- –û—Ç–∫—Ä—ã—Ç–∏–µ/–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–µ–π ---
    function closeAllPanels() {
        if (settingsPanel && !settingsPanel.classList.contains('hidden')) settingsPanel.classList.add('hidden');
        if (upgradesPanel && !upgradesPanel.classList.contains('hidden')) upgradesPanel.classList.add('hidden');
        if (shopPanel && !shopPanel.classList.contains('hidden')) shopPanel.classList.add('hidden');
    }

    function openPanel(panelElement) {
        if (!panelElement) return;
        closeAllPanels(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –Ω–æ–≤–æ–π
        panelElement.classList.remove('hidden');
        tg.HapticFeedback?.impactOccurred('light');
    }

    // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–µ–π
    openUpgradesBtn.addEventListener('click', () => {
        renderUpgrades(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
        openPanel(upgradesPanel);
    });

    settingsBtn.addEventListener('click', () => {
        updateActiveLangButton(); // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —è–∑—ã–∫–∞
        openPanel(settingsPanel);
    });

    shopBtn.addEventListener('click', () => {
        renderSkins(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–∫–∏–Ω—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
        openPanel(shopPanel);
    });

    // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–µ–π
    if (closeUpgradesBtn) closeUpgradesBtn.addEventListener('click', closeAllPanels);
    if (closeSettingsBtn) closeSettingsBtn.addEventListener('click', closeAllPanels);
    if (closeShopBtn) closeShopBtn.addEventListener('click', closeAllPanels);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    if (settingsPanel) {
        settingsPanel.addEventListener('click', (e) => {
            if (e.target === settingsPanel) { // –ö–ª–∏–∫ –∏–º–µ–Ω–Ω–æ –ø–æ —Ñ–æ–Ω—É, –∞ –Ω–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                closeAllPanels();
            }
        });
    }


    // --- –õ–æ–≥–∏–∫–∞ –ù–∞—Å—Ç—Ä–æ–µ–∫ (—Ç–æ–ª—å–∫–æ —è–∑—ã–∫) ---
    function setLanguage(lang) {
        if (translations.greetingBase[lang] && lang !== currentLanguage) {
            currentLanguage = lang;
            console.log(`–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${currentLanguage}`);
            applyTranslations();
            updateActiveLangButton();
            saveGame();
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–∞–Ω–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (upgradesPanel && !upgradesPanel.classList.contains('hidden')) renderUpgrades();
            if (shopPanel && !shopPanel.classList.contains('hidden')) renderSkins();
        } else if (!translations.greetingBase[lang]) {
             console.warn(`–Ø–∑—ã–∫ "${lang}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö.`);
        }
    }

    function applyTranslations() {
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if (userGreetingElement) {
            let greeting = translations.greetingBase[currentLanguage] || "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è";
            if (userName) {
                greeting += ` ${userName}`;
            }
            userGreetingElement.textContent = greeting;
        }
        // –≠–ª–µ–º–µ–Ω—Ç—ã —Å data-translate
        document.querySelectorAll('[data-translate]').forEach(element => {
            const key = element.dataset.translate;
            const translation = translations[key]?.[currentLanguage];
            if (translation && element.textContent !== translation) {
                element.textContent = translation;
            } else if (!translation) {
                 console.warn(`–ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —è–∑—ã–∫–∞ "${currentLanguage}".`);
            }
        });
        // –¢–µ–∫—Å—Ç "–≤ —Å–µ–∫"
        const perSecSpan = perSecondDisplayDiv?.querySelector('span[data-translate="perSec"]');
        if(perSecSpan) {
            const perSecText = translations.perSec?.[currentLanguage] || '/ sec';
            if (perSecSpan.textContent !== perSecText) {
                perSecSpan.textContent = perSecText;
            }
        }
    }


    function updateActiveLangButton() {
        if (!languageOptionsContainer) return;
        languageOptionsContainer.querySelectorAll('.lang-btn').forEach(button => {
            button.classList.toggle('active', button.dataset.lang === currentLanguage);
        });
    }

    if (languageOptionsContainer) {
        languageOptionsContainer.addEventListener('click', (event) => {
            if (event.target.classList.contains('lang-btn')) {
                const lang = event.target.dataset.lang;
                if (lang) {
                    setLanguage(lang);
                }
            }
        });
    } else { console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ '.language-options' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–Ω—É—Ç—Ä–∏ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."); }


    // --- –õ–æ–≥–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ ---
    function renderSkins() {
        if (!skinsListElement) { console.error("–≠–ª–µ–º–µ–Ω—Ç #skins-list –Ω–µ –Ω–∞–π–¥–µ–Ω!"); return; }
        skinsListElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–µ–º–æ–≤ –≤ —à–∞–ø–∫–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ
        if (shopGemCountElement) { shopGemCountElement.textContent = formatNumber(gems); }

        availableSkins.forEach(skin => {
            const isOwned = ownedSkins.includes(skin.id);
            const isActive = activeSkinId === skin.id;
            const canAfford = gems >= skin.cost;

            const listItem = document.createElement('li');
            listItem.dataset.skinId = skin.id;
            listItem.classList.toggle('active-skin', isActive); // –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

            const translatedName = translations[skin.nameKey]?.[currentLanguage] || skin.nameKey;
            const buyButtonText = translations.buyButton?.[currentLanguage] || "–ö—É–ø–∏—Ç—å";
            const selectButtonText = translations.selectButton?.[currentLanguage] || "–í—ã–±—Ä–∞—Ç—å";
            const selectedButtonText = translations.selectedButton?.[currentLanguage] || "–í—ã–±—Ä–∞–Ω–æ";
            const gemIconSvg = `<span class="gem-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="1em" height="1em"><path d="M12 1.68l-8 8.42L12 22.32l8-8.42L12 1.68zm0 2.1l5.95 6.27L12 18.54l-5.95-6.27L12 3.78z M6.4 10.1L12 16.1l5.6-6H6.4z"/></svg></span>`;

            let actionButtonHtml = '';
            if (isActive) {
                actionButtonHtml = `<button class="skin-action-btn selected-btn" disabled>${selectedButtonText}</button>`;
            } else if (isOwned) {
                actionButtonHtml = `<button class="skin-action-btn select-btn" data-skin-id="${skin.id}">${selectButtonText}</button>`; // –î–æ–±–∞–≤–ª–µ–Ω data-skin-id
            } else {
                // –ö–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å"
                actionButtonHtml = `<button class="skin-action-btn buy-btn" data-skin-id="${skin.id}" ${!canAfford ? 'disabled' : ''}>${buyButtonText}</button>`; // –î–æ–±–∞–≤–ª–µ–Ω data-skin-id
            }

            listItem.innerHTML = `
                <div class="skin-preview ${skin.cssClass || ''}"></div>
                <div class="skin-info">
                    <h3>${translatedName}</h3>
                    ${skin.cost > 0 ? `<p class="skin-cost">${gemIconSvg} ${formatNumber(skin.cost)}</p>` : '<p class="skin-cost">¬†</p>'} <!-- Placeholder –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è -->
                </div>
                ${actionButtonHtml}
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –¥–µ–π—Å—Ç–≤–∏—è (–ö—É–ø–∏—Ç—å/–í—ã–±—Ä–∞—Ç—å)
             const actionButton = listItem.querySelector('.skin-action-btn:not(.selected-btn)');
             if (actionButton) {
                 actionButton.addEventListener('click', (event) => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º disabled –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
                    if (!event.currentTarget.disabled) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º currentTarget
                         handleSkinAction(skin.id);
                    } else {
                        console.log("–ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ —Å–∫–∏–Ω–∞:", skin.id);
                        tg.HapticFeedback?.notificationOccurred('warning');
                        if (!isOwned && !canAfford) {
                            showTemporaryNotification(translations.notEnoughGems[currentLanguage], "warning");
                        }
                    }
                 });
             }
            skinsListElement.appendChild(listItem);
        });
    }


    function handleSkinAction(skinId) {
        if (isBlocked) { showTemporaryNotification(translations.actionBlocked[currentLanguage], "error"); return; }
        const skin = availableSkins.find(s => s.id === skinId);
        if (!skin) { console.error("–°–∫–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω:", skinId); return; }

        const isOwned = ownedSkins.includes(skinId);

        if (isOwned) {
            // –ï—Å–ª–∏ —Å–∫–∏–Ω —É–∂–µ –∫—É–ø–ª–µ–Ω, –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ (–µ—Å–ª–∏ –æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω)
            if (activeSkinId !== skinId) {
                setActiveSkin(skinId);
            }
        } else {
            // –ï—Å–ª–∏ —Å–∫–∏–Ω –Ω–µ –∫—É–ø–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∫—É–ø–∏—Ç—å
            buySkin(skinId);
        }
    }


    function buySkin(skinId) {
        const skin = availableSkins.find(s => s.id === skinId);
        // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
        if (!skin || ownedSkins.includes(skinId) || skin.cost <= 0) {
            console.warn("–ü–æ–∫—É–ø–∫–∞ —Å–∫–∏–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω, —É–∂–µ –∫—É–ø–ª–µ–Ω –∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–µ–Ω):", skinId);
            return;
        }

        if (gems >= skin.cost) {
            gems -= skin.cost;
            ownedSkins.push(skinId); // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö
            console.log(`–°–∫–∏–Ω –∫—É–ø–ª–µ–Ω: ${skinId}. –û—Å—Ç–∞–ª–æ—Å—å –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤: ${gems}`);
            showTemporaryNotification(translations.skinPurchaseSuccess[currentLanguage], "success");
            tg.HapticFeedback?.notificationOccurred('success');

            // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º updateDisplay() –Ω–∞–ø—Ä—è–º—É—é, —Ç.–∫. renderSkins –µ–≥–æ –≤—ã–∑–æ–≤–µ—Ç —á–µ—Ä–µ–∑ updateSkinButtonStates

            renderSkins(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω, –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω–∏—Ç—Å—è –Ω–∞ "–í—ã–±—Ä–∞—Ç—å"
            setActiveSkin(skinId); // –°—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–π —Å–∫–∏–Ω (setActiveSkin –≤—ã–∑–æ–≤–µ—Ç saveGame)
        } else {
            console.log(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–∫–∏–Ω–∞: ${skinId}. –ù—É–∂–Ω–æ: ${skin.cost}, –ï—Å—Ç—å: ${gems}`);
            showTemporaryNotification(translations.notEnoughGems[currentLanguage], "warning");
            tg.HapticFeedback?.notificationOccurred('warning');
        }
    }


    function setActiveSkin(skinId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—É–ø–ª–µ–Ω –ª–∏ —Å–∫–∏–Ω –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π
        if (!ownedSkins.includes(skinId)) {
            console.error(`–ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –∫—É–ø–ª–µ–Ω–Ω—ã–π —Å–∫–∏–Ω: ${skinId}`);
            return;
        }
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
        if (activeSkinId !== skinId) {
            activeSkinId = skinId;
            console.log(`–ê–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${skinId}`);
            applyCauldronSkin(); // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –∫–ª–∞—Å—Å –∫ –∫–æ–ª–±–µ

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
            if (shopPanel && !shopPanel.classList.contains('hidden')) {
                renderSkins();
            }

            saveGame(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∏–Ω–∞
            showTemporaryNotification(translations.skinSelected[currentLanguage], "info");
            tg.HapticFeedback?.impactOccurred('light');
        }
    }

    function applyCauldronSkin() {
        const activeSkinDefinition = availableSkins.find(s => s.id === activeSkinId);
        const skinClass = activeSkinDefinition?.cssClass;

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å–∫–∏–Ω–æ–≤ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω—É–∂–Ω–æ–≥–æ
        availableSkins.forEach(skin => {
            if (skin.cssClass) {
                cauldronElement.classList.remove(skin.cssClass);
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∏–Ω–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (skinClass) {
            cauldronElement.classList.add(skinClass);
            console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω CSS –∫–ª–∞—Å—Å —Å–∫–∏–Ω–∞: ${skinClass}`);
        } else {
            // –ï—Å–ª–∏ —É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∏–Ω–∞ –Ω–µ—Ç –∫–ª–∞—Å—Å–∞ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ),
            // —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫–ª–∞—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –±–∞–∑–æ–≤—ã–π –≤–∏–¥
            cauldronElement.classList.add('skin-default'); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
            console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω CSS –∫–ª–∞—Å—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∏–Ω–∞: ${activeSkinId}. –ü—Ä–∏–º–µ–Ω–µ–Ω 'skin-default'.`);
        }
    }


    // --- –õ–æ–≥–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–ó–∞–≥–ª—É—à–∫–∏ –∏ –∫–Ω–æ–ø–∫–∞) ---
    function checkReferralAndBonus() {
        try {
            const startParam = tg.initDataUnsafe?.start_param;
            const urlParams = new URLSearchParams(window.location.search);
            const claimBonusParam = urlParams.get('claimBonus');
            console.log("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:", { startParam, claimBonusParam });

            if (claimBonusParam) {
                handleBonusClaim(claimBonusParam);
                cleanBonusUrlParam(); // –û—á–∏—â–∞–µ–º URL –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            } else if (startParam && !isNaN(parseInt(startParam))) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ startParam ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const currentUserId = tg.initDataUnsafe?.user?.id?.toString();
                if (startParam !== currentUserId) {
                     handleNewReferral(startParam);
                } else {
                    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.");
                }
            }
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:", e);
        }
    }

    function handleNewReferral(inviterId) {
        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${inviterId}.`);
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞:
        // 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω—å—à–µ.
        // 2. –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ (inviterId) –≥–¥–µ-—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ CloudStorage –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –±—ç–∫–µ–Ω–¥).
        // 3. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã–¥–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        // 4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –±—ç–∫–µ–Ω–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–¥–∞–ª –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É.
        // –ü—Ä–∏–º–µ—Ä:
        // if (!localStorage.getItem('inviterId')) { // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CloudStorage
        //     localStorage.setItem('inviterId', inviterId);
        //     showTemporaryNotification(translations.welcomeReferral[currentLanguage], "success");
        //     // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –±–æ–Ω—É—Å–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
        //     // fetch('/api/register-referral', { method: 'POST', body: JSON.stringify({ inviter: inviterId, referee: tg.initDataUnsafe?.user?.id }) });
        // }
    }

    function handleBonusClaim(referralId) {
        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ${referralId}.`);
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–∞ –±—ç–∫–µ–Ω–¥–µ):
        // 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –±—ç–∫–µ–Ω–¥–µ, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `tg.initDataUnsafe?.user?.id`
        //    –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `referralId`.
        // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –±—ã–ª –ª–∏ –±–æ–Ω—É—Å –∑–∞ —ç—Ç–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —É–∂–µ –≤—ã–¥–∞–Ω.
        // 3. –ï—Å–ª–∏ –≤—Å–µ –æ–∫, –≤—ã–¥–∞—Ç—å –±–æ–Ω—É—Å (–∫—Ä–∏—Å—Ç–∞–ª–ª—ã?) —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ—Ç–º–µ—Ç–∏—Ç—å –±–æ–Ω—É—Å –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω—ã–π.
        // –ü—Ä–∏–º–µ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω–æ):
        // fetch(`/api/claim-bonus?refereeId=${referralId}`, { headers: { 'Authorization': `Bearer ${tg.initData}` }})
        // .then(res => res.json())
        // .then(data => {
        //      if(data.success) {
        //          gems += data.bonusAmount || 5; // –ü—Ä–∏–º–µ—Ä –±–æ–Ω—É—Å–∞
        //          showTemporaryNotification(`+${data.bonusAmount || 5} ${translations.bonusReasonFriend[currentLanguage]}`, "success");
        //          updateDisplay();
        //          saveGame();
        //      } else {
        //          showTemporaryNotification(data.message || translations.bonusCheckError[currentLanguage], "warning");
        //      }
        // })
        // .catch(err => {
        //      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–æ–Ω—É—Å–∞:", err);
        //      showTemporaryNotification(translations.bonusCheckError[currentLanguage], "error");
        // });
    }

    function cleanBonusUrlParam() {
        try {
            const url = new URL(window.location);
            if (url.searchParams.has('claimBonus')) {
                url.searchParams.delete('claimBonus');
                // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                window.history.replaceState({}, document.title, url);
                console.log("–ü–∞—Ä–∞–º–µ—Ç—Ä claimBonus —É–¥–∞–ª–µ–Ω –∏–∑ URL.");
            }
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ URL:", e);
        }
    }

    // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π"
    inviteFriendBtn.addEventListener('click', () => {
        if (isBlocked) { showTemporaryNotification(translations.actionBlocked[currentLanguage], "error"); return; }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞ WebApp API
        if (tg.isVersionAtLeast('6.1') && tg.CloudStorage) { // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tg.share –ø—Ä–æ—Å—Ç–æ
            const userId = tg.initDataUnsafe?.user?.id;
            const botUsername = tg.initDataUnsafe?.bot?.username; // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –±–æ—Ç–∞

            if (!userId || !botUsername) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–º—è –±–æ—Ç–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.");
                showTemporaryNotification(translations.inviteLinkError[currentLanguage], "error");
                return;
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ Telegram
            // –§–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è, —É—Ç–æ—á–Ω–∏—Ç–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram
            const shareUrl = `https://t.me/${botUsername}/${tg.WebApp.name}?startapp=${userId}`;

            const textToShare = translations.shareText?.[currentLanguage] || '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –º–æ–µ–π –ê–ª—Ö–∏–º–∏—á–µ—Å–∫–æ–π –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏!';

            console.log("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:", { url: shareUrl, text: textToShare });

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ share –æ–∫–Ω–∞ Telegram
            tg.openTelegramLink(
                `https://t.me/share/url?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(textToShare)}`
            );

            tg.HapticFeedback?.impactOccurred('light');

        } else {
            console.warn("–ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.");
            showTemporaryNotification(translations.referralRegErrorFunc[currentLanguage], "warning");
        }
    });


    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–ó–∞–≥—Ä—É–∑–∫–∞ ---
    let saveTimeout = null; // –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
    function saveGame(immediate = false) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CloudStorage
        if (!tg?.CloudStorage || typeof tg.CloudStorage.setItem !== 'function') {
            // console.log("[Save] CloudStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."); // –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return;
        }

        const saveData = () => {
            console.log("[Save] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...");
            let isValid = true;
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            if (!Number.isFinite(essence) || essence < 0) { console.warn(`[Save Valid] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —ç—Å—Å–µ–Ω—Ü–∏—è ${essence}. –°–±—Ä–æ—Å –≤ 0.`); essence = 0; isValid = false; }
            if (!Number.isFinite(gems) || gems < 0) { console.warn(`[Save Valid] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã ${gems}. –°–±—Ä–æ—Å –≤ 0.`); gems = 0; isValid = false; }
            if (!Array.isArray(ownedSkins) || !ownedSkins.includes('default')) { console.warn(`[Save Valid] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–∫–∏–Ω–æ–≤ ${ownedSkins}. –°–±—Ä–æ—Å –≤ ['default'].`); ownedSkins = ['default']; if (activeSkinId !== 'default') activeSkinId = 'default'; isValid = false; }
            if (typeof activeSkinId !== 'string' || !ownedSkins.includes(activeSkinId)) { console.warn(`[Save Valid] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω ${activeSkinId}. –°–±—Ä–æ—Å –≤ 'default'.`); activeSkinId = 'default'; isValid = false; }
            upgrades.forEach(upg => { if (!Number.isFinite(upg.currentLevel) || upg.currentLevel < 0) { console.warn(`[Save Valid] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–ø–≥—Ä–µ–π–¥–∞ ${upg.id}: ${upg.currentLevel}. –°–±—Ä–æ—Å –≤ 0.`); upg.currentLevel = 0; isValid = false; } });
            if (!isValid) { console.warn("[Save] –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º."); }

            const gameState = {
                essence: essence,
                gems: gems,
                upgrades: upgrades.map(u => ({ id: u.id, level: u.currentLevel })),
                language: currentLanguage,
                ownedSkins: ownedSkins,
                activeSkinId: activeSkinId,
                // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–∏—Ö –º–∏–≥—Ä–∞—Ü–∏–π, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
                saveVersion: 1
            };

            try {
                const gameStateString = JSON.stringify(gameState);
                // console.log(`[Save] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (${gameStateString.length} –±–∞–π—Ç)...`); // –û—Ç–ª–∞–¥–∫–∞
                tg.CloudStorage.setItem('gameState', gameStateString, (error, success) => {
                    if (error) {
                        console.error("[Save Callback] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error);
                        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                    } else if (success) {
                         console.log("[Save Callback] –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.");
                         // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –ø—Ä–∏ —Ä—É—á–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ (–µ—Å–ª–∏ –±—É–¥–µ—Ç)
                         // if (immediate) showTemporaryNotification(translations.saveSuccess[currentLanguage], "success");
                    } else {
                        console.warn("[Save Callback] –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (success=false, –Ω–æ –Ω–µ—Ç –æ—à–∏–±–∫–∏).");
                    }
                });
            } catch (stringifyError) {
                console.error("[Save] –û—à–∏–±–∫–∞ JSON.stringify –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", stringifyError);
                showTemporaryNotification(translations.saveCritError[currentLanguage], "error");
            }
            saveTimeout = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        };

        // –õ–æ–≥–∏–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (debounce)
        if (saveTimeout) {
            clearTimeout(saveTimeout); // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        }
        if (immediate) {
            saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏)
        } else {
             // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
            saveTimeout = setTimeout(saveData, 1000);
        }
    }


    function loadGame() {
        console.log("[Load] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...");
        isBlocked = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        warningCount = 0;
        if (cauldronElement) cauldronElement.classList.remove('blocked-cauldron');

        let postSetupDone = false;
        const performPostLoadSetup = (isNewGame = false) => {
            if (postSetupDone) return;
            console.log("[Load] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç-–∑–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...");
            if (isNewGame) {
                console.log("[Load] –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞.");
                resetGameData(); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
            }
            recalculateBonuses(); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö/—Å–±—Ä–æ—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            applyTranslations(); // –ü—Ä–∏–º–µ–Ω—è–µ–º —è–∑—ã–∫
            updateLiquidColor(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∂–∏–¥–∫–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            visualLiquidLevel = LIQUID_MIN_LEVEL; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∂–∏–¥–∫–æ—Å—Ç–∏
            lastInteractionTime = Date.now(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
            applyCauldronSkin(); // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–Ω
            updateDisplay(); // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ UI
            checkReferralAndBonus(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            console.log(`[Load] –ü–æ—Å—Ç-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –°–æ—Å—Ç–æ—è–Ω–∏–µ: E:${formatNumber(essence)}, G:${gems}, Lng:${currentLanguage}, Skin:${activeSkinId}`);
            postSetupDone = true;
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CloudStorage
        if (!tg?.CloudStorage || typeof tg.CloudStorage.getItem !== 'function') {
            console.warn("[Load] CloudStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.");
            performPostLoadSetup(true); // –ù–æ–≤–∞—è –∏–≥—Ä–∞
            showTemporaryNotification("–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", "warning");
            return;
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        try {
            tg.CloudStorage.getItem('gameState', (error, value) => {
                console.log("[Load Callback] –û—Ç–≤–µ—Ç –æ—Ç CloudStorage.getItem.");
                let needsReset = false;
                if (error) {
                    console.error("[Load Callback] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ CloudStorage:", error);
                    if (error.message && error.message.includes("STORAGE_KEY_CLOUD_NOT_FOUND")) {
                        console.log("[Load Callback] –ö–ª—é—á 'gameState' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–æ–≤–∞—è –∏–≥—Ä–∞.");
                    } else if (error.message && error.message.includes("Unsupported")) {
                         console.warn("[Load Callback] CloudStorage.getItem –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º Telegram.");
                         showTemporaryNotification("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Telegram.", "warning");
                    } else {
                         showTemporaryNotification(translations.loadError[currentLanguage], "error");
                    }
                    needsReset = true;
                } else if (value) {
                    console.log(`[Load Callback] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã (${value.length} –±–∞–π—Ç). –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...`);
                    try {
                        const savedState = JSON.parse(value);
                        console.log("[Load Parse] –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ:", savedState);

                        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
                        essence = Number(savedState.essence) || 0; if (!Number.isFinite(essence) || essence < 0) { console.warn("[Load Valid] –≠—Å—Å–µ–Ω—Ü–∏—è -> 0"); essence = 0; }
                        gems = Number(savedState.gems) || 0; if (!Number.isFinite(gems) || gems < 0) { console.warn("[Load Valid] –ö—Ä–∏—Å—Ç–∞–ª–ª—ã -> 0"); gems = 0; }
                        currentLanguage = savedState.language || 'ru'; if (!translations.greetingBase[currentLanguage]) { console.warn(`[Load Valid] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫ '${savedState.language}' -> ru`); currentLanguage = 'ru'; }

                        // –ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω–µ–π —É–ª—É—á—à–µ–Ω–∏–π
                        if (Array.isArray(savedState.upgrades)) {
                            upgrades.forEach(u => {
                                const savedUpgrade = savedState.upgrades.find(su => su.id === u.id);
                                const savedLevel = Number(savedUpgrade?.level);
                                u.currentLevel = (Number.isFinite(savedLevel) && savedLevel >= 0) ? savedLevel : 0;
                                if (u.currentLevel !== 0 && !(Number.isFinite(savedLevel) && savedLevel >= 0)) {
                                    console.warn(`[Load Valid] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å ${savedLevel} –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞ ${u.id} -> 0`);
                                }
                            });
                        } else {
                            console.warn("[Load Valid] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –º–∞—Å—Å–∏–≤ –∞–ø–≥—Ä–µ–π–¥–æ–≤ -> –≤—Å–µ —É—Ä–æ–≤–Ω–∏ 0");
                            upgrades.forEach(u => u.currentLevel = 0);
                        }

                        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫–∏–Ω–æ–≤
                        ownedSkins = Array.isArray(savedState.ownedSkins) ? savedState.ownedSkins : ['default'];
                        if (!ownedSkins.includes('default')) {
                            ownedSkins.push('default'); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Å–∫–∏–Ω–∞
                            console.warn("[Load Valid] –°–∫–∏–Ω 'default' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö.");
                        }
                        activeSkinId = (typeof savedState.activeSkinId === 'string' && ownedSkins.includes(savedState.activeSkinId)) ? savedState.activeSkinId : 'default';
                        if (savedState.activeSkinId && !ownedSkins.includes(savedState.activeSkinId)) {
                            console.warn(`[Load Valid] –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω '${savedState.activeSkinId}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö -> 'default'`);
                        }

                        console.log("[Load] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.");

                    } catch (parseError) {
                        console.error("[Load Parse] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", parseError, "–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", value);
                        showTemporaryNotification(translations.readError[currentLanguage], "error");
                        needsReset = true;
                    }
                } else {
                    // –ó–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ (null –∏–ª–∏ ''), —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤–æ–π –∏–≥—Ä–æ–π
                    console.log("[Load Callback] –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ CloudStorage. –ù–æ–≤–∞—è –∏–≥—Ä–∞.");
                    needsReset = true;
                }

                // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å—Ç-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
                performPostLoadSetup(needsReset);

            });
        } catch (storageError) {
            // –û—à–∏–±–∫–∞ —Å–∞–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ CloudStorage.getItem
            console.error("[Load Try] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ CloudStorage.getItem:", storageError);
            showTemporaryNotification("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É.", "error");
            performPostLoadSetup(true); // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–æ—Å—Ç—É–ø–∞
        }
    }

    function resetGameData() {
        console.warn("–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!");
        essence = 0;
        gems = 0;
        upgrades.forEach(upgrade => upgrade.currentLevel = 0);
        ownedSkins = ['default'];
        activeSkinId = 'default';
        isBlocked = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        warningCount = 0;
        // –ù–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å recalculateBonuses –∑–¥–µ—Å—å, —Ç.–∫. performPostLoadSetup –µ–≥–æ –≤—ã–∑–æ–≤–µ—Ç
    }

    // --- –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
    function showTemporaryNotification(message, type = "info", duration = 2500) {
        const existingNotification = document.querySelector('.notification');
        if (existingNotification) {
            existingNotification.remove(); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        }

        const notification = document.createElement('div');
        notification.className = `notification ${type}`; // info, error, warning, success
        notification.textContent = message;
        document.body.appendChild(notification);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        requestAnimationFrame(() => {
            notification.style.opacity = '1';
            notification.style.transform = 'translate(-50%, 0)'; // –ü–æ–¥–Ω–∏–º–∞–µ–º –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
        });

        // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transform = 'translate(-50%, 10px)'; // –°–¥–≤–∏–≥–∞–µ–º –≤–Ω–∏–∑ –ø—Ä–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–∏
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 500); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        }, duration);
    }


    // --- –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    loadGame(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ


    // --- –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π
    setInterval(() => saveGame(false), 15000); // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫ (—Å debounce)

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', () => saveGame(true));
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'hidden') {
            saveGame(true); // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏
        }
    });
    if (tg?.onEvent) {
        tg.onEvent('viewportChanged', (event) => {
            if (event && event.isStateStable) {
                console.log("Viewport stable, triggering save.");
                saveGame(false); // –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ viewport
            }
        });
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è Mini App, –µ—Å–ª–∏ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ API
        // tg.onEvent('close', () => saveGame(true));
    }

    // --- –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∂–∏–¥–∫–æ—Å—Ç–∏ ---
    setInterval(updateLiquidColor, 5 * 60 * 1000); // –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

}); // --- –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê DOMContentLoaded ---