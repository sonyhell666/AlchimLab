// –§–∞–π–ª: script.js
// –í–µ—Ä—Å–∏—è –ë–ï–ó –ó–í–£–ö–ê, –ë–ï–ó –û–ë–í–û–î–ö–ò, —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—à–∏–±–∫–∏ CloudStorage
// –î–æ–±–∞–≤–ª–µ–Ω–æ: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ü–≤–µ—Ç –∂–∏–¥–∫–æ—Å—Ç–∏, –û–±–≤–æ–¥–∫–∞ –∫–æ–ª–±—ã, –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ú–∏–≥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
// –£–ø—Ä–æ—â–µ–Ω –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ SyntaxError
document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    const tg = window.Telegram.WebApp;
    tg.ready();
    tg.expand();

    // --- –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã DOM ---
    const essenceCountElement = document.getElementById('essence-count');
    const cauldronElement = document.getElementById('cauldron');
    const openUpgradesBtn = document.getElementById('open-upgrades-btn');

    // !!! –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ !!!
    console.log('DOMContentLoaded fired.');
    console.log('cauldronElement:', cauldronElement);
    console.log('essenceCountElement:', essenceCountElement);
    console.log('openUpgradesBtn:', openUpgradesBtn);
    // !!! –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ !!!

    const essencePerSecondElement = document.getElementById('essence-per-second');
    const gemCountElement = document.getElementById('gem-count');
    const clickFeedbackContainer = document.getElementById('click-feedback-container');
    const closeUpgradesBtn = document.getElementById('close-upgrades-btn');
    const upgradesPanel = document.getElementById('upgrades-panel');
    const upgradesListElement = document.getElementById('upgrades-list');
    const userGreetingElement = document.getElementById('user-greeting');
    const inviteFriendBtn = document.getElementById('invite-friend-btn');
    const bubblesContainer = document.getElementById('bubbles-container');
    const perSecondDisplayDiv = document.getElementById('per-second-display');
    const settingsBtn = document.getElementById('settings-btn');
    const settingsPanel = document.getElementById('settings-panel');
    const closeSettingsBtn = document.getElementById('close-settings-btn');
    const languageOptionsContainer = settingsPanel ? settingsPanel.querySelector('.language-options') : null;
    const shopBtn = document.getElementById('shop-btn');
    const shopPanel = document.getElementById('shop-panel');
    const closeShopBtn = document.getElementById('close-shop-btn');
    const skinsListElement = document.getElementById('skins-list');
    const shopGemCountElement = document.getElementById('shop-gem-count');

    // --- –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ) ---
    let essence = 0;
    let essencePerClick = 1;
    let essencePerSecond = 0;
    let gems = 0;
    let ownedSkins = ['default'];
    let activeSkinId = 'default';
    const GEM_AWARD_CHANCE = 0.03;
    const GEMS_PER_AWARD = 1;
    let currentLanguage = 'ru';
    let userName = tg.initDataUnsafe?.user?.first_name || null;

    // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞ ---
    let lastClickTime = 0;
    const MIN_CLICK_INTERVAL = 67;
    const MAX_WARNINGS = 3;
    let warningCount = 0;
    let isBlocked = false;

    // --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∂–∏–¥–∫–æ—Å—Ç–∏ ---
    let visualLiquidLevel = 10;
    const LIQUID_MIN_LEVEL = 10;
    const LIQUID_MAX_LEVEL = 95;
    const LIQUID_INCREASE_PER_CLICK = 1.0;
    const LIQUID_DECAY_RATE = 0.15;
    const LIQUID_UPDATE_INTERVAL = 100;
    const IDLE_TIMEOUT = 500;
    let lastInteractionTime = 0;

    // --- –û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ ---
    const translations = {
        greetingBase: { ru: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", en: "Laboratory" },
        perSec: { ru: "–≤ —Å–µ–∫", en: "/ sec" },
        upgradesButton: { ru: "–£–ª—É—á—à–µ–Ω–∏—è", en: "Upgrades" },
        inviteFriendsButton: { ru: "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", en: "Invite Friends" },
        upgradesTitle: { ru: "–£–ª—É—á—à–µ–Ω–∏—è", en: "Upgrades" },
        settingsTitle: { ru: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", en: "Settings" },
        languageTitle: { ru: "–Ø–∑—ã–∫", en: "Language" },
        buyButton: { ru: "–ö—É–ø–∏—Ç—å", en: "Buy" },
        requirementPrefix: { ru: "–ù—É–∂–Ω–æ", en: "Need" },
        requirementInfoPrefix: { ru: "–¢—Ä–µ–±—É–µ—Ç—Å—è", en: "Requires" },
        tooFastClick: { ru: "–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!", en: "Clicking too fast!" },
        autoclickerBlocked: { ru: "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –ö–ª–∏–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", en: "Autoclicker detected! Clicking blocked." },
        actionBlocked: { ru: "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.", en: "Action blocked." },
        needMoreEssence: { ru: "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —ç—Å—Å–µ–Ω—Ü–∏–∏!", en: "Need more essence!" },
        invalidCostError: { ru: "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è!", en: "Error: Invalid upgrade cost!" },
        notEnoughEssence: { ru: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Å—Å–µ–Ω—Ü–∏–∏!", en: "Not enough essence!" },
        loadErrorStartNew: { ru: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.", en: "Failed to load progress. Starting new game." },
        loadError: { ru: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!", en: "Error loading progress!" },
        readError: { ru: "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", en: "Error reading save data!" },
        saveCritError: { ru: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", en: "Critical save error!" },
        welcomeReferral: { ru: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –±–æ–Ω—É—Å.", en: "Welcome! Your inviter gets a bonus." },
        referralRegErrorBot: { ru: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–æ—à–∏–±–∫–∞ –±–æ—Ç–∞).", en: "Could not register invite (bot error)." },
        referralRegErrorFunc: { ru: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (—Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞).", en: "Could not register invite (feature unavailable)." },
        bonusCheckError: { ru: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–Ω—É—Å–∞!", en: "Bonus check error!" },
        bonusAlreadyClaimed: { ru: "–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω.", en: "Bonus already claimed." },
        bonusReasonFriend: { ru: "–∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!", en: "for invited friend!" },
        bonusAddError: { ru: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!", en: "Bonus add error!" },
        inviteLinkError: { ru: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", en: "Failed to create invite link." },
        shareText: { ru: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –º–æ–µ–π –ê–ª—Ö–∏–º–∏—á–µ—Å–∫–æ–π –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –≤ Telegram! üß™‚öóÔ∏è –ö–ª–∏–∫–∞–π –∏ —Å–æ–∑–¥–∞–≤–∞–π —ç–ª–∏–∫—Å–∏—Ä—ã!', en: 'Join my Alchemy Lab in Telegram! üß™‚öóÔ∏è Click and create elixirs!' },
        shopTitle: { ru: "–ú–∞–≥–∞–∑–∏–Ω", en: "Shop" },
        yourGems: { ru: "–í–∞—à–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã:", en: "Your Gems:" },
        selectButton: { ru: "–í—ã–±—Ä–∞—Ç—å", en: "Select" },
        selectedButton: { ru: "–í—ã–±—Ä–∞–Ω–æ", en: "Selected" },
        notEnoughGems: { ru: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!", en: "Not enough gems!" },
        skinPurchaseSuccess: { ru: "–°–∫–∏–Ω –∫—É–ø–ª–µ–Ω!", en: "Skin purchased!" },
        skinSelected: { ru: "–°–∫–∏–Ω –≤—ã–±—Ä–∞–Ω!", en: "Skin selected!" },
        skin_default_name: { ru: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–ª–±–∞", en: "Standard Flask" },
        skin_gold_name: { ru: "–ó–æ–ª–æ—Ç–∞—è –∫–æ–ª–±–∞", en: "Golden Flask" },
        skin_crystal_name: { ru: "–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —Å–æ—Å—É–¥", en: "Crystal Vial" },
        skin_obsidian_name: { ru: "–û–±—Å–∏–¥–∏–∞–Ω–æ–≤–∞—è —Ä–µ—Ç–æ—Ä—Ç–∞", en: "Obsidian Retort" },
        upgrade_click1_name: { ru: "–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", en: "Improved Recipe" },
        upgrade_click1_desc: { ru: "+1 –∫ –∫–ª–∏–∫—É", en: "+1 per click" },
        upgrade_auto1_name: { ru: "–ì–æ–º—É–Ω–∫—É–ª-–ü–æ–º–æ—â–Ω–∏–∫", en: "Homunculus Helper" },
        upgrade_auto1_desc: { ru: "+1 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+1 per second" },
        upgrade_click2_name: { ru: "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—É–ø–∫–∞", en: "Enchanted Mortar" },
        upgrade_click2_desc: { ru: "+5 –∫ –∫–ª–∏–∫—É", en: "+5 per click" },
        upgrade_auto2_name: { ru: "–ü—É–∑—ã—Ä—è—â–∏–π—Å—è –∫–æ—Ç–µ–ª", en: "Bubbling Cauldron" },
        upgrade_auto2_desc: { ru: "+4 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+4 per second" },
        upgrade_click3_name: { ru: "–ê–ª–µ–º–±–∏–∫ –ú–∞—Å—Ç–µ—Ä–∞", en: "Master's Alembic" },
        upgrade_click3_desc: { ru: "+25 –∫ –∫–ª–∏–∫—É", en: "+25 per click" },
        upgrade_auto3_name: { ru: "–ü—Ä–∏–∑–≤–∞–Ω–Ω—ã–π –ò—Ñ—Ä–∏—Ç", en: "Summoned Ifrit" },
        upgrade_auto3_desc: { ru: "+20 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+20 per second" },
        upgrade_auto4_name: { ru: "–°–∞–¥ –ê–ª—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –†–∞—Å—Ç–µ–Ω–∏–π", en: "Garden of Alchemical Plants" },
        upgrade_auto4_desc: { ru: "+50 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+50 per second" },
        upgrade_click4_name: { ru: "–°–∏–ª–∞ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–≥–æ –ö–∞–º–Ω—è (–æ—Å–∫–æ–ª–æ–∫)", en: "Power of the Philosopher's Stone (Shard)" },
        upgrade_click4_desc: { ru: "+150 –∫ –∫–ª–∏–∫—É", en: "+150 per click" },
        upgrade_auto5_name: { ru: "–≠—Ñ–∏—Ä–Ω—ã–π –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä", en: "Aether Concentrator" },
        upgrade_auto5_desc: { ru: "+250 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+250 per second" },
        upgrade_auto6_name: { ru: "–ü–æ—Ä—Ç–∞–ª –≤ –º–∏—Ä –≠—Å—Å–µ–Ω—Ü–∏–∏", en: "Portal to the Essence Realm" },
        upgrade_auto6_desc: { ru: "+1000 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+1000 per second" },
        upgrade_click5_name: { ru: "–ü—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ –¢–≤–æ—Ä—Ü–∞", en: "Creator's Touch" },
        upgrade_click5_desc: { ru: "+1000 –∫ –∫–ª–∏–∫—É", en: "+1000 per click" },
        upgrade_auto7_name: { ru: "–ü–æ—Ç–æ–∫ –ß–∏—Å—Ç–æ–π –ú–∞–≥–∏–∏", en: "Flow of Pure Magic" },
        upgrade_auto7_desc: { ru: "+5000 –≤ —Å–µ–∫—É–Ω–¥—É", en: "+5000 per second" },
    };

    // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π ---
    const upgrades = [
        { id: 'click1', nameKey: 'upgrade_click1_name', descKey: 'upgrade_click1_desc', baseCost: 15, costMultiplier: 1.4, type: 'click', value: 1, currentLevel: 0, requiredEssence: 0 },
        { id: 'auto1', nameKey: 'upgrade_auto1_name', descKey: 'upgrade_auto1_desc', baseCost: 60, costMultiplier: 1.6, type: 'auto', value: 1, currentLevel: 0, requiredEssence: 0 },
        { id: 'click2', nameKey: 'upgrade_click2_name', descKey: 'upgrade_click2_desc', baseCost: 300, costMultiplier: 1.5, type: 'click', value: 5, currentLevel: 0, requiredEssence: 500 },
        { id: 'auto2', nameKey: 'upgrade_auto2_name', descKey: 'upgrade_auto2_desc', baseCost: 750, costMultiplier: 1.7, type: 'auto', value: 4, currentLevel: 0, requiredEssence: 700 },
        { id: 'click3', nameKey: 'upgrade_click3_name', descKey: 'upgrade_click3_desc', baseCost: 5000, costMultiplier: 1.6, type: 'click', value: 25, currentLevel: 0, requiredEssence: 10000 },
        { id: 'auto3', nameKey: 'upgrade_auto3_name', descKey: 'upgrade_auto3_desc', baseCost: 12000, costMultiplier: 1.8, type: 'auto', value: 20, currentLevel: 0, requiredEssence: 15000 },
        { id: 'auto4', nameKey: 'upgrade_auto4_name', descKey: 'upgrade_auto4_desc', baseCost: 30000, costMultiplier: 1.9, type: 'auto', value: 50, currentLevel: 0, requiredEssence: 40000 },
        { id: 'click4', nameKey: 'upgrade_click4_name', descKey: 'upgrade_click4_desc', baseCost: 250000, costMultiplier: 1.7, type: 'click', value: 150, currentLevel: 0, requiredEssence: 500000 },
        { id: 'auto5', nameKey: 'upgrade_auto5_name', descKey: 'upgrade_auto5_desc', baseCost: 1000000, costMultiplier: 2.0, type: 'auto', value: 250, currentLevel: 0, requiredEssence: 1200000 },
        { id: 'auto6', nameKey: 'upgrade_auto6_name', descKey: 'upgrade_auto6_desc', baseCost: 5000000, costMultiplier: 2.2, type: 'auto', value: 1000, currentLevel: 0, requiredEssence: 6000000 },
        { id: 'click5', nameKey: 'upgrade_click5_name', descKey: 'upgrade_click5_desc', baseCost: 10000000, costMultiplier: 1.8, type: 'click', value: 1000, currentLevel: 0, requiredEssence: 15000000 },
        { id: 'auto7', nameKey: 'upgrade_auto7_name', descKey: 'upgrade_auto7_desc', baseCost: 50000000, costMultiplier: 2.1, type: 'auto', value: 5000, currentLevel: 0, requiredEssence: 60000000 },
    ];

    // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–∏–Ω–æ–≤ ---
    const availableSkins = [
        { id: 'default', nameKey: 'skin_default_name', cost: 0, cssClass: 'skin-default' },
        { id: 'gold', nameKey: 'skin_gold_name', cost: 15, cssClass: 'skin-gold' },
        { id: 'crystal', nameKey: 'skin_crystal_name', cost: 50, cssClass: 'skin-crystal' },
        { id: 'obsidian', nameKey: 'skin_obsidian_name', cost: 100, cssClass: 'skin-obsidian' },
    ];

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—É–∑—ã—Ä—å–∫–æ–≤ ---
    function createBubble() { if (!bubblesContainer) return; const b = document.createElement('div'); b.classList.add('bubble'); const s = Math.random() * 8 + 6; const d = Math.random() * 2.5 + 3; const l = Math.random() * 1.5; const h = Math.random() * 90 + 5; b.style.width = `${s}px`; b.style.height = `${s}px`; b.style.left = `${h}%`; b.style.animationDuration = `${d}s`; b.style.animationDelay = `${l}s`; bubblesContainer.appendChild(b); setTimeout(() => { b.remove(); }, (d + l) * 1000 + 100); }
    if (bubblesContainer) { setInterval(createBubble, 500); } else { console.warn("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—É–∑—ã—Ä—å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω."); }

    // --- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∞ –∂–∏–¥–∫–æ—Å—Ç–∏ ---
    function updateLiquidLevelVisual(percentage) {
        const l = Math.max(LIQUID_MIN_LEVEL, Math.min(LIQUID_MAX_LEVEL, percentage));
        if (cauldronElement) {
            cauldronElement.style.setProperty('--liquid-level', `${l}%`);
            if(bubblesContainer) {
                bubblesContainer.style.height = `${l}%`;
            }
        }
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –∂–∏–¥–∫–æ—Å—Ç–∏ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ –õ–æ–Ω–¥–æ–Ω–∞/UTC) ---
    function getLondonHour() {
        const now = new Date();
        return now.getUTCHours(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC
    }

    function getLiquidColorByLondonTime() {
        const hour = getLondonHour();
        const alpha = 0.35; // –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å

        if (hour >= 22 || hour < 5) { // –ù–æ—á—å (22:00 - 04:59 UTC)
            return `rgba(40, 40, 100, ${alpha})`; // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
        } else if (hour >= 5 && hour < 7) { // –†–∞—Å—Å–≤–µ—Ç (05:00 - 06:59 UTC)
            return `rgba(255, 150, 100, ${alpha})`; // –†–æ–∑–æ–≤–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
        } else if (hour >= 7 && hour < 11) { // –£—Ç—Ä–æ (07:00 - 10:59 UTC)
            return `rgba(100, 180, 220, ${alpha})`; // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
        } else if (hour >= 11 && hour < 17) { // –î–µ–Ω—å (11:00 - 16:59 UTC)
            return `rgba(220, 220, 100, ${alpha})`; // –ñ–µ–ª—Ç–æ-–∑–µ–ª–µ–Ω—ã–π
        } else if (hour >= 17 && hour < 20) { // –ó–∞–∫–∞—Ç (17:00 - 19:59 UTC)
            return `rgba(255, 120, 50, ${alpha})`; // –û—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
        } else { // –í–µ—á–µ—Ä (20:00 - 21:59 UTC)
            return `rgba(70, 70, 150, ${alpha})`; // –°–∏–Ω–µ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        }
    }

    function updateLiquidColor() {
        if (!cauldronElement) return;
        const color = getLiquidColorByLondonTime();
        cauldronElement.style.setProperty('--liquid-color', color);
    }
    // --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –∂–∏–¥–∫–æ—Å—Ç–∏ ---

    // --- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI ---
    function updateDisplay() {
        if (essenceCountElement) essenceCountElement.textContent = formatNumber(Math.floor(essence));
        if (essencePerSecondElement && perSecondDisplayDiv) {
            essencePerSecondElement.textContent = formatNumber(essencePerSecond);
            perSecondDisplayDiv.style.display = essencePerSecond > 0 ? 'block' : 'none';
        }
        if (gemCountElement) gemCountElement.textContent = formatNumber(gems);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∂–∏–¥–∫–æ—Å—Ç–∏
        updateLiquidLevelVisual(visualLiquidLevel);

        // –ò–ó–ú–ï–ù–ï–ù–û: –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
        if (upgradesPanel && !upgradesPanel.classList.contains('hidden')) {
            updateUpgradeButtonStates(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π
        }
        if (shopPanel && !shopPanel.classList.contains('hidden')) {
            updateSkinButtonStates(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å–∫–∏–Ω–æ–≤ –∏ —Å—á–µ—Ç—á–∏–∫ –≥–µ–º–æ–≤
        }
    }

    // --- –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª ---
    function formatNumber(num) { if (isNaN(num) || !Number.isFinite(num)) { console.warn("formatNumber –ø–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", num); return "ERR"; } const abbreviations = ["", "K", "M", "B", "T", "q", "Q", "s", "S", "O", "N", "d", "U"]; if (num < 1000) return num.toString(); let i = 0; while (num >= 1000 && i < abbreviations.length - 1) { num /= 1000; i++; } const formattedNum = num % 1 === 0 ? num.toString() : num.toFixed(1); return formattedNum + abbreviations[i]; }

    // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "+N" –ø—Ä–∏ –∫–ª–∏–∫–µ ---
    function showClickFeedback(amount, type = 'essence') { if (isBlocked || !clickFeedbackContainer) return; const f = document.createElement('div'); f.className = 'click-feedback'; const fmt = formatNumber(amount); if (type === 'gem') { const svgIconHtml = `<span class="gem-icon" style="display:inline-flex; vertical-align: middle; margin-left: 4px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="1em" height="1em" fill="var(--gem-color)"><path d="M12 1.68l-8 8.42L12 22.32l8-8.42L12 1.68zm0 2.1l5.95 6.27L12 18.54l-5.95-6.27L12 3.78z M6.4 10.1L12 16.1l5.6-6H6.4z"></path></svg></span>`; f.innerHTML = `+${fmt}${svgIconHtml}`; f.style.fontSize = '1.3em'; f.style.fontWeight = 'bold'; f.style.color = 'var(--gem-color)'; } else { f.textContent = `+${fmt} üß™`; f.style.color = 'var(--accent-color)'; } const ox = Math.random() * 60 - 30; const oy = (type === 'gem') ? (Math.random() * 20 + 15) : (Math.random() * 20 - 10); f.style.left = `calc(50% + ${ox}px)`; f.style.top = `calc(50% + ${oy}px)`; clickFeedbackContainer.appendChild(f); setTimeout(() => { f.remove(); }, 950); }

    // --- –õ–æ–≥–∏–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–æ—Ç–ª—É ---
     if (cauldronElement) {
         cauldronElement.addEventListener('click', () => {
             // !!! –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ !!!
             console.log('Cauldron click event fired!');
             // !!! –ö–æ–Ω–µ—Ü –ª–æ–≥–∞ !!!

             const currentTime = Date.now();
             if (tg?.HapticFeedback) { tg.HapticFeedback.impactOccurred('light'); }
             if (isBlocked) { showTemporaryNotification(translations.autoclickerBlocked?.[currentLanguage] || "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω!", "error"); return; }
             if (currentTime - lastClickTime >= MIN_CLICK_INTERVAL) {
                 warningCount = 0; lastInteractionTime = currentTime;
                 let clickAmount = essencePerClick;
                 if (Number.isFinite(clickAmount)) { essence += clickAmount; if (clickFeedbackContainer) showClickFeedback(clickAmount, 'essence'); } else { console.error("–ù–µ–∫–æ—Ä—Ä. essencePerClick:", essencePerClick); }
                 if (Math.random() < GEM_AWARD_CHANCE) { gems += GEMS_PER_AWARD; console.log(`+${GEMS_PER_AWARD} –∫—Ä–∏—Å—Ç–∞–ª–ª! –í—Å–µ–≥–æ: ${gems}`); if (clickFeedbackContainer) showClickFeedback(GEMS_PER_AWARD, 'gem'); if (tg?.HapticFeedback) { tg.HapticFeedback.impactOccurred('medium'); } }
                 visualLiquidLevel += LIQUID_INCREASE_PER_CLICK; visualLiquidLevel = Math.min(visualLiquidLevel, LIQUID_MAX_LEVEL);
                 updateDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º UI (–≤–∫–ª—é—á–∞—è —Å—á–µ—Ç—á–∏–∫–∏ –∏ —É—Ä–æ–≤–µ–Ω—å –∂–∏–¥–∫–æ—Å—Ç–∏)
                 cauldronElement.style.transform = 'scale(0.95)'; setTimeout(() => { if (cauldronElement) cauldronElement.style.transform = 'scale(1)'; }, 80);
                 lastClickTime = currentTime;
             } else {
                 warningCount++; lastInteractionTime = currentTime; console.warn(`–ë—ã—Å—Ç—Ä—ã–π –∫–ª–∏–∫ ${warningCount}/${MAX_WARNINGS}`); showTemporaryNotification(`${translations.tooFastClick?.[currentLanguage] || "–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!"} (${warningCount}/${MAX_WARNINGS})`, "warning"); if (tg?.HapticFeedback) { tg.HapticFeedback.impactOccurred('medium'); }
                 if (warningCount >= MAX_WARNINGS) { isBlocked = true; console.error("–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."); showTemporaryNotification(translations.autoclickerBlocked?.[currentLanguage] || "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω!", "error"); if (tg?.HapticFeedback) { tg.HapticFeedback.notificationOccurred('error'); } if (cauldronElement) cauldronElement.classList.add('blocked-cauldron'); }
             }
         });
         // !!! –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ !!!
         console.log('Cauldron click listener ADDED.');
         // !!! –ö–æ–Ω–µ—Ü –ª–æ–≥–∞ !!!
     } else {
         // !!! –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ !!!
         console.error("–≠–ª–µ–º–µ–Ω—Ç –∫–æ–ª–±—ã #cauldron –Ω–µ –Ω–∞–π–¥–µ–Ω –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è!");
         // !!! –ö–æ–Ω–µ—Ü –ª–æ–≥–∞ !!!
     }

    // --- –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ-–∫–ª–∏–∫–∞ ---
    // –û–±–µ—Ä–Ω–µ–º –≤ try-catch –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    try {
        setInterval(() => { if (!isBlocked && essencePerSecond > 0 && Number.isFinite(essencePerSecond)) { const essenceToAdd = essencePerSecond / 10; if (Number.isFinite(essenceToAdd)) { essence += essenceToAdd; updateDisplay(); } else { console.warn("–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—Ä—Ü–∏—è —ç—Å—Å–µ–Ω—Ü–∏–∏."); } } }, 100);
    } catch(e) { console.error("–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –∞–≤—Ç–æ–∫–ª–∏–∫–∞:", e); }

    // --- –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∂–∏–¥–∫–æ—Å—Ç–∏ ---
    // –û–±–µ—Ä–Ω–µ–º –≤ try-catch –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    try {
        setInterval(() => {
            const currentTime = Date.now();
            if (currentTime - lastInteractionTime > IDLE_TIMEOUT && visualLiquidLevel > LIQUID_MIN_LEVEL) {
                visualLiquidLevel -= LIQUID_DECAY_RATE;
                visualLiquidLevel = Math.max(visualLiquidLevel, LIQUID_MIN_LEVEL);
                updateDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º UI, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            }
        }, LIQUID_UPDATE_INTERVAL);
    } catch(e) { console.error("–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∂–∏–¥–∫–æ—Å—Ç–∏:", e); }

    // --- –õ–æ–≥–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π ---
    function calculateCost(upgrade) { if (!upgrade || typeof upgrade.baseCost !== 'number' || typeof upgrade.costMultiplier !== 'number' || typeof upgrade.currentLevel !== 'number') { console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:", upgrade); return Infinity; } return Math.floor(upgrade.baseCost * Math.pow(upgrade.costMultiplier, upgrade.currentLevel)); }

    // –§—É–Ω–∫—Ü–∏—è renderUpgrades —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ä–µ–∂–µ (–ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏)
    function renderUpgrades() {
        if (!upgradesListElement) { console.error("–≠–ª–µ–º–µ–Ω—Ç #upgrades-list –Ω–µ –Ω–∞–π–¥–µ–Ω!"); return; }
        upgradesListElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        upgrades.sort((a, b) => (a.requiredEssence || 0) - (b.requiredEssence || 0));
        if (upgrades.length === 0) { upgradesListElement.innerHTML = `<li><p>–£–ª—É—á—à–µ–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.</p></li>`; return; }

        const currentEssenceFloored = Math.floor(essence);

        upgrades.forEach(upgrade => {
            const cost = calculateCost(upgrade);
            if (!Number.isFinite(cost)) { console.error("–ü—Ä–æ–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é:", upgrade.id); return; }

            const required = upgrade.requiredEssence || 0;
            const isLocked = currentEssenceFloored < required;
            const canAfford = currentEssenceFloored >= cost;

            const listItem = document.createElement('li');
            listItem.dataset.upgradeId = upgrade.id; // –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ updateUpgradeButtonStates

            if (isLocked) { listItem.classList.add('locked'); }
            else if (!canAfford) { listItem.classList.add('cannot-afford'); }

            const translatedName = translations[upgrade.nameKey]?.[currentLanguage] || upgrade.nameKey;
            const translatedDesc = translations[upgrade.descKey]?.[currentLanguage] || upgrade.descKey;
            const buyButtonText = translations.buyButton?.[currentLanguage] || "–ö—É–ø–∏—Ç—å";
            const requirementPrefix = translations.requirementPrefix?.[currentLanguage] || "–ù—É–∂–Ω–æ";
            const requirementInfoPrefix = translations.requirementInfoPrefix?.[currentLanguage] || "–¢—Ä–µ–±—É–µ—Ç—Å—è";

            let buttonText = buyButtonText;
            let isButtonDisabled = false;

            if (isLocked) {
                isButtonDisabled = true;
                buttonText = `${requirementPrefix} ${formatNumber(required)} üß™`;
            } else if (!canAfford) {
                isButtonDisabled = true;
            }

            // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
            listItem.innerHTML = `
                <div class="upgrade-info">
                    <h3>${translatedName} (–£—Ä. ${upgrade.currentLevel})</h3>
                    <p>${translatedDesc}</p>
                    <p class="upgrade-cost">–¶–µ–Ω–∞: ${formatNumber(cost)} üß™</p>
                    <p class="requirement-info" style="display: ${isLocked ? 'block' : 'none'};">${requirementInfoPrefix}: ${formatNumber(required)} üß™</p>
                </div>
                <button class="buy-upgrade-btn" data-upgrade-id="${upgrade.id}">${buttonText}</button>
            `;

            const buyButton = listItem.querySelector('.buy-upgrade-btn');
            if (buyButton) {
                buyButton.disabled = isButtonDisabled;
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
                if (!isLocked) {
                    buyButton.addEventListener('click', (event) => {
                        event.stopPropagation();
                        if (!buyButton.disabled) { // –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ disabled –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
                            buyUpgrade(upgrade.id);
                        }
                    });
                }
            }
            upgradesListElement.appendChild(listItem);
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π, –Ω–æ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç renderUpgrades –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –£—Ä.
    function buyUpgrade(upgradeId) {
        if (isBlocked) { showTemporaryNotification(translations.actionBlocked?.[currentLanguage] || "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.", "error"); return; }
        const upgrade = upgrades.find(up => up.id === upgradeId);
        if (!upgrade) { console.error("–£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:", upgradeId); return; }

        const required = upgrade.requiredEssence || 0;
        if (Math.floor(essence) < required) {
            showTemporaryNotification(`${translations.needMoreEssence?.[currentLanguage] || "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ!"} ${formatNumber(required)} üß™`, "warning");
            if (tg?.HapticFeedback) tg.HapticFeedback.notificationOccurred('warning');
            return;
        }

        const cost = calculateCost(upgrade);
        if (!Number.isFinite(cost)) { showTemporaryNotification(translations.invalidCostError?.[currentLanguage] || "–û—à–∏–±–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏!", "error"); return; }

        if (essence >= cost) {
            essence -= cost;
            upgrade.currentLevel++;
            recalculateBonuses();
            updateDisplay(); // –û–±–Ω–æ–≤–∏—Ç —Å—á–µ—Ç—á–∏–∫–∏
            renderUpgrades(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∏ —Ü–µ–Ω—É
            saveGame();
            if (tg?.HapticFeedback) { tg.HapticFeedback.impactOccurred('light'); }
        } else {
            showTemporaryNotification(translations.notEnoughEssence?.[currentLanguage] || "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Å—Å–µ–Ω—Ü–∏–∏!", "warning");
            if (tg?.HapticFeedback) { tg.HapticFeedback.notificationOccurred('warning'); }
        }
    }

    function recalculateBonuses() { essencePerClick = 1; essencePerSecond = 0; upgrades.forEach(upgrade => { if (upgrade.currentLevel > 0 && Number.isFinite(upgrade.value) && typeof upgrade.type === 'string') { if (upgrade.type === 'click') { essencePerClick += upgrade.value * upgrade.currentLevel; } else if (upgrade.type === 'auto') { essencePerSecond += upgrade.value * upgrade.currentLevel; } } else if (upgrade.currentLevel > 0) { console.warn("–£–ª—É—á—à–µ–Ω–∏–µ —Å —É—Ä > 0 –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", upgrade); } }); if (!Number.isFinite(essencePerClick) || essencePerClick < 1) { console.error("–ù–µ–≤–µ—Ä–Ω—ã–π essencePerClick:", essencePerClick); essencePerClick = 1; } if (!Number.isFinite(essencePerSecond) || essencePerSecond < 0) { console.error("–ù–µ–≤–µ—Ä–Ω—ã–π essencePerSecond:", essencePerSecond); essencePerSecond = 0; } }

    // --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ª—É—á—à–µ–Ω–∏–π ---
    function updateUpgradeButtonStates() {
        if (!upgradesListElement || !upgradesPanel || upgradesPanel.classList.contains('hidden')) {
            return;
        }

        const currentEssenceFloored = Math.floor(essence);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º querySelectorAll –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å–ø–∏—Å–∫–µ
        const upgradeListItems = upgradesListElement.querySelectorAll('li[data-upgrade-id]');

        upgradeListItems.forEach(listItem => {
            const button = listItem.querySelector('.buy-upgrade-btn');
            const upgradeId = listItem.dataset.upgradeId; // –ë–µ—Ä–µ–º ID —Å li
            if (!button || !upgradeId) return;

            const upgrade = upgrades.find(up => up.id === upgradeId);
            if (!upgrade) return;

            const costElement = listItem.querySelector('.upgrade-cost');
            const requirementInfoElement = listItem.querySelector('.requirement-info');

            const cost = calculateCost(upgrade);
            const required = upgrade.requiredEssence || 0;
            const isLocked = currentEssenceFloored < required;
            const canAfford = currentEssenceFloored >= cost;

            let isButtonDisabled = false;
            let buttonText = translations.buyButton?.[currentLanguage] || "–ö—É–ø–∏—Ç—å";
            const currentButtonText = button.textContent; // –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏

            listItem.classList.toggle('locked', isLocked);
            listItem.classList.toggle('cannot-afford', !isLocked && !canAfford);

            if (isLocked) {
                isButtonDisabled = true;
                buttonText = `${translations.requirementPrefix?.[currentLanguage] || "–ù—É–∂–Ω–æ"} ${formatNumber(required)} üß™`;
                if (requirementInfoElement) {
                    requirementInfoElement.textContent = `${translations.requirementInfoPrefix?.[currentLanguage] || "–¢—Ä–µ–±—É–µ—Ç—Å—è"}: ${formatNumber(required)} üß™`;
                    requirementInfoElement.style.display = 'block';
                }
            } else {
                if (requirementInfoElement) {
                    requirementInfoElement.style.display = 'none';
                }
                if (!canAfford) {
                    isButtonDisabled = true;
                } else {
                    isButtonDisabled = false;
                }
            }

            button.disabled = isButtonDisabled;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
            if (isLocked && currentButtonText !== buttonText) {
                button.textContent = buttonText;
            } else if (!isLocked && currentButtonText !== buyButtonText) {
                button.textContent = buyButtonText;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ü–µ–Ω—ã
            if (costElement) {
                const costText = `–¶–µ–Ω–∞: ${formatNumber(cost)} üß™`;
                if (costElement.textContent !== costText) {
                    costElement.textContent = costText;
                }
            }
        });
    }

    // --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å–∫–∏–Ω–æ–≤ ---
    function updateSkinButtonStates() {
        if (!skinsListElement || !shopPanel || shopPanel.classList.contains('hidden')) {
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–µ–º–æ–≤ –≤ —à–∞–ø–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞
        if (shopGemCountElement) {
            shopGemCountElement.textContent = formatNumber(gems);
        }

        const skinListItems = skinsListElement.querySelectorAll('li[data-skin-id]');

        skinListItems.forEach(listItem => {
            const button = listItem.querySelector('.skin-action-btn.buy-btn'); // –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
            const skinId = listItem.dataset.skinId;
            if (!button || !skinId) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –Ω–µ—Ç ID

            const skin = availableSkins.find(s => s.id === skinId);
            if (!skin || skin.cost <= 0) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–ª–∏ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã–µ

            const canAfford = gems >= skin.cost;
            button.disabled = !canAfford; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ disabled
        });
    }

    // --- –û—Ç–∫—Ä—ã—Ç–∏–µ/–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–µ–π ---
    function closeSettings() { if (settingsPanel) settingsPanel.classList.add('hidden'); }
    function closeUpgrades() { if (upgradesPanel) upgradesPanel.classList.add('hidden'); }
    function closeShop() { if (shopPanel) shopPanel.classList.add('hidden'); }

    if (openUpgradesBtn && upgradesPanel) {
        openUpgradesBtn.addEventListener('click', () => {
            console.log('Open Upgrades button clicked.'); // –û—Ç–ª–∞–¥–∫–∞
            renderUpgrades(); // –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
            upgradesPanel.classList.remove('hidden');
            closeSettings(); closeShop();
        });
    } else { console.error("–ö–Ω–æ–ø–∫–∞/–ø–∞–Ω–µ–ª—å —É–ª—É—á—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }

    if (closeUpgradesBtn && upgradesPanel) { closeUpgradesBtn.addEventListener('click', closeUpgrades); } else { console.error("–ö–Ω–æ–ø–∫–∞/–ø–∞–Ω–µ–ª—å —É–ª—É—á—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }

    if (settingsBtn && settingsPanel) {
        settingsBtn.addEventListener('click', () => {
            console.log('Settings button clicked.'); // –û—Ç–ª–∞–¥–∫–∞
            updateActiveLangButton();
            settingsPanel.classList.remove('hidden');
            closeUpgrades(); closeShop();
        });
    } else { console.error("–ö–Ω–æ–ø–∫–∞/–ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }

    if (closeSettingsBtn && settingsPanel) { closeSettingsBtn.addEventListener('click', closeSettings); } else { console.error("–ö–Ω–æ–ø–∫–∞/–ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }
    if (settingsPanel) { settingsPanel.addEventListener('click', (e) => { if (e.target === settingsPanel) closeSettings(); }); }

    if (shopBtn && shopPanel) {
        shopBtn.addEventListener('click', () => {
            console.log('Shop button clicked.'); // –û—Ç–ª–∞–¥–∫–∞
            renderSkins(); // –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
            shopPanel.classList.remove('hidden');
            closeUpgrades(); closeSettings();
            if (tg?.HapticFeedback) tg.HapticFeedback.impactOccurred('light');
        });
    } else { console.error("–ö–Ω–æ–ø–∫–∞/–ø–∞–Ω–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }

    if (closeShopBtn && shopPanel) { closeShopBtn.addEventListener('click', closeShop); } else { console.error("–ö–Ω–æ–ø–∫–∞/–ø–∞–Ω–µ–ª—å –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); }

    // --- –õ–æ–≥–∏–∫–∞ –ù–∞—Å—Ç—Ä–æ–µ–∫ (—Ç–æ–ª—å–∫–æ —è–∑—ã–∫) ---
    function setLanguage(lang) { if (translations.greetingBase[lang]) { currentLanguage = lang; console.log(`–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${currentLanguage}`); applyTranslations(); updateActiveLangButton(); saveGame(); if (upgradesPanel && !upgradesPanel.classList.contains('hidden')) { renderUpgrades(); } if (shopPanel && !shopPanel.classList.contains('hidden')) { renderSkins(); } } else { console.warn(`–Ø–∑—ã–∫ "${lang}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`); } }
    function applyTranslations() { if (userGreetingElement) { let greeting = translations.greetingBase[currentLanguage] || "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è"; if (userName) { greeting += ` ${userName}`; } userGreetingElement.textContent = greeting; } document.querySelectorAll('[data-translate]').forEach(element => { const key = element.dataset.translate; const translation = translations[key]?.[currentLanguage]; if (translation) { element.textContent = translation; } else { /* console.warn(`–ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`); */ } }); const perSecTextNode = perSecondDisplayDiv?.lastChild; if (perSecTextNode && perSecTextNode.nodeType === Node.TEXT_NODE) { perSecTextNode.textContent = ` ${translations.perSec?.[currentLanguage] || '–≤ —Å–µ–∫'}`; } }
    function updateActiveLangButton() { if (!languageOptionsContainer) return; languageOptionsContainer.querySelectorAll('.lang-btn').forEach(button => { button.classList.toggle('active', button.dataset.lang === currentLanguage); }); }
    if (languageOptionsContainer) { languageOptionsContainer.addEventListener('click', (event) => { if (event.target.classList.contains('lang-btn')) { const lang = event.target.dataset.lang; if (lang && lang !== currentLanguage) { setLanguage(lang); } } }); } else { console.error("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."); }

    // --- –õ–æ–≥–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ ---
    // –§—É–Ω–∫—Ü–∏—è renderSkins –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ä–µ–∂–µ (–ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏)
    function renderSkins() {
        if (!skinsListElement) { console.error("–≠–ª–µ–º–µ–Ω—Ç #skins-list –Ω–µ –Ω–∞–π–¥–µ–Ω!"); return; }
        skinsListElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–µ–º–æ–≤ –≤ —à–∞–ø–∫–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ
        if (shopGemCountElement) { shopGemCountElement.textContent = formatNumber(gems); }

        availableSkins.forEach(skin => {
            const isOwned = ownedSkins.includes(skin.id);
            const isActive = activeSkinId === skin.id;
            const canAfford = gems >= skin.cost;

            const listItem = document.createElement('li');
            listItem.dataset.skinId = skin.id; // –î–æ–±–∞–≤–ª—è–µ–º ID
            if (isActive) { listItem.classList.add('active-skin'); }

            const translatedName = translations[skin.nameKey]?.[currentLanguage] || skin.nameKey;
            const buyButtonText = translations.buyButton?.[currentLanguage] || "–ö—É–ø–∏—Ç—å";
            const selectButtonText = translations.selectButton?.[currentLanguage] || "–í—ã–±—Ä–∞—Ç—å";
            const selectedButtonText = translations.selectedButton?.[currentLanguage] || "–í—ã–±—Ä–∞–Ω–æ";
            const gemIconSvg = `<span class="gem-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="1em" height="1em"><path d="M12 1.68l-8 8.42L12 22.32l8-8.42L12 1.68zm0 2.1l5.95 6.27L12 18.54l-5.95-6.27L12 3.78z M6.4 10.1L12 16.1l5.6-6H6.4z"/></svg></span>`;

            let actionButtonHtml = '';
            if (isActive) {
                actionButtonHtml = `<button class="skin-action-btn selected-btn" disabled>${selectedButtonText}</button>`;
            } else if (isOwned) {
                actionButtonHtml = `<button class="skin-action-btn select-btn">${selectButtonText}</button>`;
            } else {
                actionButtonHtml = `<button class="skin-action-btn buy-btn" ${!canAfford ? 'disabled' : ''}>${buyButtonText}</button>`;
            }

            listItem.innerHTML = `
                <div class="skin-preview ${skin.cssClass || ''}"></div>
                <div class="skin-info">
                    <h3>${translatedName}</h3>
                    ${skin.cost > 0 ? `<p class="skin-cost">${gemIconSvg} ${formatNumber(skin.cost)}</p>` : ''}
                </div>
                ${actionButtonHtml}
            `;

            const actionButton = listItem.querySelector('.skin-action-btn');
            if (actionButton && !actionButton.classList.contains('selected-btn')) {
                actionButton.addEventListener('click', () => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º disabled –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
                    if (!actionButton.disabled) {
                         handleSkinAction(skin.id);
                    }
                });
            }
            skinsListElement.appendChild(listItem);
        });
    }

    function handleSkinAction(skinId) { if (isBlocked) { showTemporaryNotification(translations.actionBlocked?.[currentLanguage] || "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.", "error"); return; } const skin = availableSkins.find(s => s.id === skinId); if (!skin) return; const isOwned = ownedSkins.includes(skinId); if (isOwned) { if (activeSkinId !== skinId) { setActiveSkin(skinId); } } else { buySkin(skinId); } }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ —Å–∫–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç renderSkins –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    function buySkin(skinId) {
        const skin = availableSkins.find(s => s.id === skinId);
        if (!skin || ownedSkins.includes(skinId) || skin.cost <= 0) return;

        if (gems >= skin.cost) {
            gems -= skin.cost;
            ownedSkins.push(skinId);
            console.log(`–°–∫–∏–Ω –∫—É–ø–ª–µ–Ω: ${skinId}. –û—Å—Ç–∞–ª–æ—Å—å: ${gems}`);
            showTemporaryNotification(translations.skinPurchaseSuccess?.[currentLanguage] || "–°–∫–∏–Ω –∫—É–ø–ª–µ–Ω!", "success");
            if (tg?.HapticFeedback) tg.HapticFeedback.notificationOccurred('success');
            updateDisplay(); // –û–±–Ω–æ–≤–∏—Ç —Å—á–µ—Ç—á–∏–∫ –≥–µ–º–æ–≤ –≤–≤–µ—Ä—Ö—É
            renderSkins(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ —Å–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ "–í—ã–±—Ä–∞—Ç—å"
            setActiveSkin(skinId); // –°—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–π —Å–∫–∏–Ω
        } else {
            console.log(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤: ${skinId}. –ù—É–∂–Ω–æ: ${skin.cost}, –ï—Å—Ç—å: ${gems}`);
            showTemporaryNotification(translations.notEnoughGems?.[currentLanguage] || "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!", "warning");
            if (tg?.HapticFeedback) tg.HapticFeedback.notificationOccurred('warning');
        }
    }

    function setActiveSkin(skinId) { if (!ownedSkins.includes(skinId)) { console.error(`–ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç. –Ω–µ –∫—É–ø–ª. —Å–∫–∏–Ω–∞: ${skinId}`); return; } if (activeSkinId !== skinId) { activeSkinId = skinId; console.log(`–ê–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω: ${skinId}`); applyCauldronSkin(); if (shopPanel && !shopPanel.classList.contains('hidden')) { renderSkins(); // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω } saveGame(); showTemporaryNotification(translations.skinSelected?.[currentLanguage] || "–°–∫–∏–Ω –≤—ã–±—Ä–∞–Ω!", "info"); if (tg?.HapticFeedback) tg.HapticFeedback.impactOccurred('light'); } }
    function applyCauldronSkin() { if (!cauldronElement) { console.warn("–ù–µ –º–æ–≥—É –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫–∏–Ω: —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–±—ã –Ω–µ –Ω–∞–π–¥–µ–Ω."); return; } const activeSkinDefinition = availableSkins.find(s => s.id === activeSkinId); const skinClass = activeSkinDefinition?.cssClass; availableSkins.forEach(skin => { if (skin.cssClass) { cauldronElement.classList.remove(skin.cssClass); } }); if (skinClass) { cauldronElement.classList.add(skinClass); console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω –∫–ª–∞—Å—Å —Å–∫–∏–Ω–∞: ${skinClass}`); } else { console.warn(`–ù–µ—Ç CSS –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å–∫–∏–Ω–∞: ${activeSkinId}.`); } }

    // --- –õ–æ–≥–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã ---
    function checkReferralAndBonus() { const startParam = tg.initDataUnsafe?.start_param; const urlParams = new URLSearchParams(window.location.search); const claimBonusParam = urlParams.get('claimBonus'); console.log("Start Param:", startParam, "Claim Bonus Param:", claimBonusParam); if (claimBonusParam) { handleBonusClaim(claimBonusParam); } else if (startParam && !isNaN(parseInt(startParam))) { handleNewReferral(startParam); } }
    function handleNewReferral(inviterId) { console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –æ—Ç", inviterId); /* –õ–æ–≥–∏–∫–∞ –∑–¥–µ—Å—å */ }
    function handleBonusClaim(referralId) { console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞", referralId); /* –õ–æ–≥–∏–∫–∞ –∑–¥–µ—Å—å */ }
    function cleanBonusUrlParam() { /* –õ–æ–≥–∏–∫–∞ –∑–¥–µ—Å—å */ }
    if (inviteFriendBtn) { /* –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è */ }

    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–ó–∞–≥—Ä—É–∑–∫–∞ ---
    function saveGame() {
        if (!tg?.CloudStorage || !tg.CloudStorage.setItem) { return; }
        // console.log("[Save] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è..."); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        let isValid = true;
        if (!Number.isFinite(essence) || essence < 0) { console.warn(`[Save Valid] –≠—Å—Å–µ–Ω—Ü–∏—è->0`); essence = 0; isValid = false; }
        if (!Number.isFinite(gems) || gems < 0) { console.warn(`[Save Valid] –ö—Ä–∏—Å—Ç–∞–ª–ª—ã->0`); gems = 0; isValid = false; }
        if (!Array.isArray(ownedSkins) || !ownedSkins.includes('default')) { console.warn(`[Save Valid] –°–∫–∏–Ω—ã->—Å–±—Ä–æ—Å`); ownedSkins = ['default']; if (activeSkinId !== 'default') activeSkinId = 'default'; isValid = false; }
        if (typeof activeSkinId !== 'string' || !ownedSkins.includes(activeSkinId)) { console.warn(`[Save Valid] –ê–∫—Ç. —Å–∫–∏–Ω->default`); activeSkinId = 'default'; isValid = false; }
        upgrades.forEach(upg => { if (!Number.isFinite(upg.currentLevel) || upg.currentLevel < 0) { console.warn(`[Save Valid] –ê–ø–≥—Ä–µ–π–¥ ${upg.id}->0`); upg.currentLevel = 0; isValid = false; } });
        if (!isValid) { console.warn("[Save] –î–∞–Ω–Ω—ã–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã."); }

        const gameState = {
            essence: essence, gems: gems, upgrades: upgrades.map(u => ({ id: u.id, level: u.currentLevel })),
            language: currentLanguage, ownedSkins: ownedSkins, activeSkinId: activeSkinId
        };
        try {
            const gameStateString = JSON.stringify(gameState);
            // console.log(`[Save] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (${gameStateString.length} –±–∞–π—Ç)...`); // –û—Ç–ª–∞–¥–∫–∞
            try {
                tg.CloudStorage.setItem('gameState', gameStateString, (error, success) => {
                    if (error) { console.error("[Save Cb] –û—à–∏–±–∫–∞:", error); } else if (success) { /* –£—Å–ø–µ—à–Ω–æ */ } else { console.warn("[Save Cb] –ù–µ–æ–ø—Ä–µ–¥. —Ä–µ–∑—É–ª—å—Ç–∞—Ç."); }
                });
            } catch (storageError) { console.error("[Save Try] –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ setItem:", storageError); }
        } catch (stringifyError) { console.error("[Save] –û—à–∏–±–∫–∞ JSON.stringify:", stringifyError); showTemporaryNotification(translations.saveCritError?.[currentLanguage] || "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", "error"); }
    }

    function loadGame() {
        console.log("[Load] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏...");
        isBlocked = false; warningCount = 0;
        if (cauldronElement) cauldronElement.classList.remove('blocked-cauldron');
        let needsReset = false;

        if (!tg?.CloudStorage || !tg.CloudStorage.getItem) {
            console.warn("[Load] CloudStorage –æ–±—ä–µ–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–æ–≤–∞—è –∏–≥—Ä–∞.");
            needsReset = true;
        } else {
            try {
                tg.CloudStorage.getItem('gameState', (error, value) => {
                    console.log("[Load Cb] –û—Ç–≤–µ—Ç –æ—Ç getItem.");
                    let loadedSuccessfully = false;
                    if (error) {
                        console.error("[Load Cb] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:", error);
                        if (error.message && error.message.includes("Unsupported")) { console.warn("[Load Cb] CloudStorage.getItem –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."); showTemporaryNotification("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", "warning"); } else { showTemporaryNotification(translations.loadError?.[currentLanguage] || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏!", "error"); }
                        needsReset = true;
                    } else if (value) {
                        console.log(`[Load Cb] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã (${value.length} –±–∞–π—Ç). –ü–∞—Ä—Å–∏–Ω–≥...`);
                        try {
                            const savedState = JSON.parse(value);
                            console.log("[Load Parse] OK:", savedState);
                            essence = Number(savedState.essence) || 0; if (!Number.isFinite(essence) || essence < 0) { console.warn("[Load Valid] –≠—Å—Å–µ–Ω—Ü–∏—è->0"); essence = 0; }
                            gems = Number(savedState.gems) || 0; if (!Number.isFinite(gems) || gems < 0) { console.warn("[Load Valid] –ö—Ä–∏—Å—Ç–∞–ª–ª—ã->0"); gems = 0; }
                            currentLanguage = savedState.language || 'ru'; if (!translations.greetingBase[currentLanguage]) { console.warn(`[Load Valid] –Ø–∑—ã–∫->ru`); currentLanguage = 'ru'; }
                            if (Array.isArray(savedState.upgrades)) { upgrades.forEach(u => { const sU = savedState.upgrades.find(su => su.id === u.id); const lvl = Number(sU?.level); u.currentLevel = (Number.isFinite(lvl) && lvl >= 0) ? lvl : 0; if(u.currentLevel !==0 && !(Number.isFinite(lvl) && lvl >=0)) console.warn(`[Load Valid] –ê–ø–≥—Ä–µ–π–¥ ${u.id}->0`); }); } else { console.warn("[Load Valid] –ê–ø–≥—Ä–µ–π–¥—ã->0"); upgrades.forEach(u => u.currentLevel = 0); }
                            ownedSkins = Array.isArray(savedState.ownedSkins) ? savedState.ownedSkins : ['default']; if (!ownedSkins.includes('default')) { ownedSkins.push('default'); console.warn("[Load Valid] –°–∫–∏–Ω default –¥–æ–±–∞–≤–ª–µ–Ω."); }
                            activeSkinId = (typeof savedState.activeSkinId === 'string' && ownedSkins.includes(savedState.activeSkinId)) ? savedState.activeSkinId : 'default'; if (savedState.activeSkinId && !ownedSkins.includes(savedState.activeSkinId)) { console.warn(`[Load Valid] –ê–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–Ω->default`); }
                            recalculateBonuses(); console.log("[Load] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ."); loadedSuccessfully = true;
                        } catch (parseError) { console.error("[Load Parse] –û—à–∏–±–∫–∞:", parseError); showTemporaryNotification(translations.readError?.[currentLanguage] || "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è!", "error"); needsReset = true; }
                    } else { console.log("[Load Cb] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ù–æ–≤–∞—è –∏–≥—Ä–∞."); needsReset = true; }

                    if (needsReset) { resetGameData(); }
                    // –ü–æ—Å—Ç-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –í–ù–£–¢–†–ò –∫–æ–ª–±—ç–∫–∞
                    applyTranslations();
                    updateDisplay(); // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    applyCauldronSkin();
                    updateLiquidColor(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∂–∏–¥–∫–æ—Å—Ç–∏
                    visualLiquidLevel = LIQUID_MIN_LEVEL; lastInteractionTime = Date.now(); updateLiquidLevelVisual(visualLiquidLevel); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á. —É—Ä–æ–≤–µ–Ω—å
                    checkReferralAndBonus();
                    console.log(`[Load Cb] –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –°–æ—Å—Ç–æ—è–Ω–∏–µ: E:${essence}, G:${gems}, Skin:${activeSkinId}`);
                });
            } catch (storageError) {
                console.error("[Load Try] –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ getItem:", storageError); showTemporaryNotification("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "error"); needsReset = true;
                if (needsReset) { resetGameData(); }
                // –ü–æ—Å—Ç-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–†–ò –û–®–ò–ë–ö–ï –í–´–ó–û–í–ê
                applyTranslations();
                updateDisplay();
                applyCauldronSkin();
                updateLiquidColor();
                visualLiquidLevel = LIQUID_MIN_LEVEL; lastInteractionTime = Date.now(); updateLiquidLevelVisual(visualLiquidLevel);
                checkReferralAndBonus();
                console.log(`[Load] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤—ã–∑–æ–≤–∞ getItem.`);
            }
        }

        // –ü–æ—Å—Ç-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ CloudStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å—Ä–∞–∑—É
        if (!tg?.CloudStorage) {
             setTimeout(() => {
                 if (needsReset) { resetGameData(); }
                 console.log("[Load Timeout] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
                 applyTranslations();
                 updateDisplay();
                 applyCauldronSkin();
                 updateLiquidColor();
                 visualLiquidLevel = LIQUID_MIN_LEVEL; lastInteractionTime = Date.now(); updateLiquidLevelVisual(visualLiquidLevel);
                 checkReferralAndBonus();
                 console.log(`[Load Timeout] –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –°–æ—Å—Ç–æ—è–Ω–∏–µ: E:${essence}, G:${gems}, Skin:${activeSkinId}`);
                 showTemporaryNotification("–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", "warning");
             }, 50);
        }
    }

    function resetGameData() {
        console.log("–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
        essence = 0; gems = 0;
        upgrades.forEach(upgrade => upgrade.currentLevel = 0);
        ownedSkins = ['default']; activeSkinId = 'default';
        recalculateBonuses();
    }

    // --- –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
    function showTemporaryNotification(message, type = "info") { const notification = document.createElement('div'); notification.className = `notification ${type}`; notification.textContent = message; document.body.appendChild(notification); void notification.offsetWidth; requestAnimationFrame(() => { notification.style.opacity = '1'; notification.style.bottom = '80px'; }); setTimeout(() => { notification.style.opacity = '0'; notification.style.bottom = '70px'; setTimeout(() => { if (notification.parentNode) { notification.remove(); } }, 500); }, 2500); }

    // --- –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    // –£–±—Ä–∞–ª–∏ try...catch –æ—Ç—Å—é–¥–∞, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    loadGame();


    // --- –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
    const autoSaveInterval = setInterval(saveGame, 15000);
    window.addEventListener('beforeunload', saveGame);
    document.addEventListener('visibilitychange', () => { if (document.visibilityState === 'hidden') { saveGame(); } });
    if (tg?.onEvent) { tg.onEvent('viewportChanged', (event) => { if (event.isStateStable) { /* console.log("Viewport stable, save."); */ saveGame(); } }); }

    // --- –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∂–∏–¥–∫–æ—Å—Ç–∏ ---
    const liquidColorUpdateInterval = setInterval(updateLiquidColor, 5 * 60 * 1000); // –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

}); // –ö–æ–Ω–µ—Ü DOMContentLoaded - –°—Ç—Ä–æ–∫–∞ ~721